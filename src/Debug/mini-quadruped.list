
mini-quadruped.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800bed8  0800bed8  0001bed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5b8  0800c5b8  00020284  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5b8  0800c5b8  00020284  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5b8  0800c5b8  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5b8  0800c5b8  0001c5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5bc  0800c5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0800c5c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000284  0800c844  00020284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  0800c844  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010015  00000000  00000000  000202ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ac  00000000  00000000  000302c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00032470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00033408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019121  00000000  00000000  00034300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011496  00000000  00000000  0004d421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f57c  00000000  00000000  0005e8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ede33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000590c  00000000  00000000  000ede88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000284 	.word	0x20000284
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bebc 	.word	0x0800bebc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000288 	.word	0x20000288
 800014c:	0800bebc 	.word	0x0800bebc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	460c      	mov	r4, r1
 8001114:	4605      	mov	r5, r0
 8001116:	4621      	mov	r1, r4
 8001118:	4628      	mov	r0, r5
 800111a:	2200      	movs	r2, #0
 800111c:	2300      	movs	r3, #0
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001184:	b0e8      	sub	sp, #416	; 0x1a0
 8001186:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001188:	f003 f8fc 	bl	8004384 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118c:	f001 fb16 	bl	80027bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001190:	f001 fda4 	bl	8002cdc <MX_GPIO_Init>
  MX_TIM1_Init();
 8001194:	f001 fb86 	bl	80028a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001198:	f001 fc48 	bl	8002a2c <MX_TIM2_Init>
  MX_TIM3_Init();
 800119c:	f001 fcdc 	bl	8002b58 <MX_TIM3_Init>
  MX_I2C1_Init();
 80011a0:	f001 fb52 	bl	8002848 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80011a4:	f001 fd70 	bl	8002c88 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	48bf      	ldr	r0, [pc, #764]	; (80014a8 <main+0x328>)
 80011ac:	f005 fa60 	bl	8006670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011b0:	2104      	movs	r1, #4
 80011b2:	48bd      	ldr	r0, [pc, #756]	; (80014a8 <main+0x328>)
 80011b4:	f005 fa5c 	bl	8006670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011b8:	2108      	movs	r1, #8
 80011ba:	48bb      	ldr	r0, [pc, #748]	; (80014a8 <main+0x328>)
 80011bc:	f005 fa58 	bl	8006670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80011c0:	210c      	movs	r1, #12
 80011c2:	48b9      	ldr	r0, [pc, #740]	; (80014a8 <main+0x328>)
 80011c4:	f005 fa54 	bl	8006670 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011c8:	2100      	movs	r1, #0
 80011ca:	48b8      	ldr	r0, [pc, #736]	; (80014ac <main+0x32c>)
 80011cc:	f005 fa50 	bl	8006670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011d0:	2104      	movs	r1, #4
 80011d2:	48b6      	ldr	r0, [pc, #728]	; (80014ac <main+0x32c>)
 80011d4:	f005 fa4c 	bl	8006670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80011d8:	2108      	movs	r1, #8
 80011da:	48b4      	ldr	r0, [pc, #720]	; (80014ac <main+0x32c>)
 80011dc:	f005 fa48 	bl	8006670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80011e0:	210c      	movs	r1, #12
 80011e2:	48b2      	ldr	r0, [pc, #712]	; (80014ac <main+0x32c>)
 80011e4:	f005 fa44 	bl	8006670 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	48b1      	ldr	r0, [pc, #708]	; (80014b0 <main+0x330>)
 80011ec:	f005 fa40 	bl	8006670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011f0:	2104      	movs	r1, #4
 80011f2:	48af      	ldr	r0, [pc, #700]	; (80014b0 <main+0x330>)
 80011f4:	f005 fa3c 	bl	8006670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011f8:	2108      	movs	r1, #8
 80011fa:	48ad      	ldr	r0, [pc, #692]	; (80014b0 <main+0x330>)
 80011fc:	f005 fa38 	bl	8006670 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001200:	210c      	movs	r1, #12
 8001202:	48ab      	ldr	r0, [pc, #684]	; (80014b0 <main+0x330>)
 8001204:	f005 fa34 	bl	8006670 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2, rx_buffer, TRANSMITED_BYTES);
 8001208:	220f      	movs	r2, #15
 800120a:	49aa      	ldr	r1, [pc, #680]	; (80014b4 <main+0x334>)
 800120c:	48aa      	ldr	r0, [pc, #680]	; (80014b8 <main+0x338>)
 800120e:	f005 fff3 	bl	80071f8 <HAL_UART_Receive_IT>
  uint8_t res;

  do
  {
	res = MPU6050_Init(&hi2c1);
 8001212:	48aa      	ldr	r0, [pc, #680]	; (80014bc <main+0x33c>)
 8001214:	f002 fa0f 	bl	8003636 <MPU6050_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
	if(res !=0)
 800121e:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00d      	beq.n	8001242 <main+0xc2>
	{
		HAL_Delay(500);
 8001226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122a:	f003 f90d 	bl	8004448 <HAL_Delay>
		HAL_I2C_DeInit(&hi2c1);  // reinitialize the I2C peripheral
 800122e:	48a3      	ldr	r0, [pc, #652]	; (80014bc <main+0x33c>)
 8001230:	f003 fe70 	bl	8004f14 <HAL_I2C_DeInit>
		HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f003 f906 	bl	8004448 <HAL_Delay>
		HAL_I2C_Init(&hi2c1);
 800123c:	489f      	ldr	r0, [pc, #636]	; (80014bc <main+0x33c>)
 800123e:	f003 fd25 	bl	8004c8c <HAL_I2C_Init>
	}

  } while(res != 0);
 8001242:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1e3      	bne.n	8001212 <main+0x92>

  MPU6050_t mpu;
  float distant_y = -85;
 800124a:	4b9d      	ldr	r3, [pc, #628]	; (80014c0 <main+0x340>)
 800124c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  /* Right Front Leg */
  float rf_r_m_o[3] = {torso_lenght * 0.5, 0.0, torso_width * 0.5};   			    // system o right front measure from m.
 8001250:	4a9c      	ldr	r2, [pc, #624]	; (80014c4 <main+0x344>)
 8001252:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001256:	ca07      	ldmia	r2, {r0, r1, r2}
 8001258:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float rf_m_l[3]   = {torso_lenght * 0.5, distant_y,  L1 + (torso_width * 0.5)};   // right front tip of the foot measure from m.
 800125c:	4b9a      	ldr	r3, [pc, #616]	; (80014c8 <main+0x348>)
 800125e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001262:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001266:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800126a:	4b98      	ldr	r3, [pc, #608]	; (80014cc <main+0x34c>)
 800126c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  /* Right Rear Leg */
  float rr_r_m_o[3] = {-torso_lenght * 0.5, 0.0, torso_width * 0.5};		        // system o right rear measure from m.
 8001270:	4a97      	ldr	r2, [pc, #604]	; (80014d0 <main+0x350>)
 8001272:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001276:	ca07      	ldmia	r2, {r0, r1, r2}
 8001278:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float rr_m_l[3]   = {-20-torso_lenght * 0.5, distant_y,  L1 + (torso_width * 0.5)};  // right rear tip of the foot measure from m.
 800127c:	4b95      	ldr	r3, [pc, #596]	; (80014d4 <main+0x354>)
 800127e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001282:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800128a:	4b90      	ldr	r3, [pc, #576]	; (80014cc <main+0x34c>)
 800128c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  /* Left Front Leg */
  float lf_r_m_o[3] = {torso_lenght * 0.5, 0.0, -torso_width*0.5};                  // system o left front measure from m.
 8001290:	4a91      	ldr	r2, [pc, #580]	; (80014d8 <main+0x358>)
 8001292:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001296:	ca07      	ldmia	r2, {r0, r1, r2}
 8001298:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float lf_m_l[3]   = {torso_lenght * 0.5, distant_y-5, -L1 - (torso_width*0.5)};     // left front tip of the foot measure from m.
 800129c:	4b8a      	ldr	r3, [pc, #552]	; (80014c8 <main+0x348>)
 800129e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80012a2:	498e      	ldr	r1, [pc, #568]	; (80014dc <main+0x35c>)
 80012a4:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 80012a8:	f7ff fc62 	bl	8000b70 <__aeabi_fsub>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80012b2:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <main+0x360>)
 80012b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  /* Left Rear Leg */
  float lr_r_m_o[3] = {-torso_lenght*0.5, 0.0, -torso_width*0.5};				    // system o left rear measure from m.
 80012b8:	4a8a      	ldr	r2, [pc, #552]	; (80014e4 <main+0x364>)
 80012ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012be:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float lr_m_l[3]   = {-20-torso_lenght*0.5, distant_y, -L1 - (torso_width*0.5)};	    // left rear tip of the foot measure from m.
 80012c4:	4b83      	ldr	r3, [pc, #524]	; (80014d4 <main+0x354>)
 80012c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012ca:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80012ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80012d2:	4b83      	ldr	r3, [pc, #524]	; (80014e0 <main+0x360>)
 80012d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  float lr_ik_res[3];
  float lr_rotated[3];
  float lr_r_o_rot[3];

  float T[3] = {0,10.0,0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4a80      	ldr	r2, [pc, #512]	; (80014e8 <main+0x368>)
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  float psi   = 0.0;   // Rot Z
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  float phi   = 0.0;   // Rot Y
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  float theta = 0.0;   // Rot X
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

  float error_psi;
  float set_point_psi = 0.0;
 800130c:	f04f 0300 	mov.w	r3, #0
 8001310:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  float error_theta;
  float set_point_theta = 0.0;
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  float error_phi = 0.0;
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  float error_phi_prev = 0.0;
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  char phi_buffer[5] = {0,0,0,0,0};
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	4a6e      	ldr	r2, [pc, #440]	; (80014ec <main+0x36c>)
 8001332:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001336:	6018      	str	r0, [r3, #0]
 8001338:	3304      	adds	r3, #4
 800133a:	7019      	strb	r1, [r3, #0]
  char psi_buffer[5] = {0,0,0,0,0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	4a6b      	ldr	r2, [pc, #428]	; (80014ec <main+0x36c>)
 8001340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001344:	6018      	str	r0, [r3, #0]
 8001346:	3304      	adds	r3, #4
 8001348:	7019      	strb	r1, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	if (rx_buffer[12] == 'x' &&
 800134a:	4b5a      	ldr	r3, [pc, #360]	; (80014b4 <main+0x334>)
 800134c:	7b1b      	ldrb	r3, [r3, #12]
 800134e:	2b78      	cmp	r3, #120	; 0x78
 8001350:	f040 809b 	bne.w	800148a <main+0x30a>
		rx_buffer[13] == 'x' &&
 8001354:	4b57      	ldr	r3, [pc, #348]	; (80014b4 <main+0x334>)
 8001356:	7b5b      	ldrb	r3, [r3, #13]
	if (rx_buffer[12] == 'x' &&
 8001358:	2b78      	cmp	r3, #120	; 0x78
 800135a:	f040 8096 	bne.w	800148a <main+0x30a>
		rx_buffer[14] == 'x')
 800135e:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <main+0x334>)
 8001360:	7b9b      	ldrb	r3, [r3, #14]
		rx_buffer[13] == 'x' &&
 8001362:	2b78      	cmp	r3, #120	; 0x78
 8001364:	f040 8091 	bne.w	800148a <main+0x30a>
	{
		MPU6050_Read_All(&hi2c1, &mpu);
 8001368:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800136c:	4619      	mov	r1, r3
 800136e:	4853      	ldr	r0, [pc, #332]	; (80014bc <main+0x33c>)
 8001370:	f002 f9ba 	bl	80036e8 <MPU6050_Read_All>

		error_psi   = set_point_psi     - ((mpu.KalmanAngleX)*PI/180);
 8001374:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8001378:	f7ff f856 	bl	8000428 <__aeabi_f2d>
 800137c:	4604      	mov	r4, r0
 800137e:	460d      	mov	r5, r1
 8001380:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001384:	a344      	add	r3, pc, #272	; (adr r3, 8001498 <main+0x318>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f8a5 	bl	80004d8 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <main+0x370>)
 800139c:	f7ff f9c6 	bl	800072c <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4620      	mov	r0, r4
 80013a6:	4629      	mov	r1, r5
 80013a8:	f7fe fede 	bl	8000168 <__aeabi_dsub>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fb88 	bl	8000ac8 <__aeabi_d2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		error_theta = set_point_theta   - ((mpu.KalmanAngleY)*PI/180);
 80013be:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 80013c2:	f7ff f831 	bl	8000428 <__aeabi_f2d>
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
 80013ca:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80013ce:	a332      	add	r3, pc, #200	; (adr r3, 8001498 <main+0x318>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7ff f880 	bl	80004d8 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <main+0x370>)
 80013e6:	f7ff f9a1 	bl	800072c <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7fe feb9 	bl	8000168 <__aeabi_dsub>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fb63 	bl	8000ac8 <__aeabi_d2f>
 8001402:	4603      	mov	r3, r0
 8001404:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

		psi   += PID_KALMAN_PSI*error_psi;
 8001408:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 800140c:	f7ff f80c 	bl	8000428 <__aeabi_f2d>
 8001410:	4604      	mov	r4, r0
 8001412:	460d      	mov	r5, r1
 8001414:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8001418:	f7ff f806 	bl	8000428 <__aeabi_f2d>
 800141c:	a320      	add	r3, pc, #128	; (adr r3, 80014a0 <main+0x320>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f859 	bl	80004d8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4620      	mov	r0, r4
 800142c:	4629      	mov	r1, r5
 800142e:	f7fe fe9d 	bl	800016c <__adddf3>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fb45 	bl	8000ac8 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		theta += PID_KALMAN_THETA*error_theta;
 8001444:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8001448:	f7fe ffee 	bl	8000428 <__aeabi_f2d>
 800144c:	4604      	mov	r4, r0
 800144e:	460d      	mov	r5, r1
 8001450:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8001454:	f7fe ffe8 	bl	8000428 <__aeabi_f2d>
 8001458:	a311      	add	r3, pc, #68	; (adr r3, 80014a0 <main+0x320>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f83b 	bl	80004d8 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7fe fe7f 	bl	800016c <__adddf3>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fb27 	bl	8000ac8 <__aeabi_d2f>
 800147a:	4603      	mov	r3, r0
 800147c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		phi = 0;
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001488:	e0c8      	b.n	800161c <main+0x49c>
	}
	else
	{

		for(int i=0; i<5; ++i)
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001490:	e04c      	b.n	800152c <main+0x3ac>
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	54442d18 	.word	0x54442d18
 800149c:	400921fb 	.word	0x400921fb
 80014a0:	1eb851ec 	.word	0x1eb851ec
 80014a4:	3fa1eb85 	.word	0x3fa1eb85
 80014a8:	2000034c 	.word	0x2000034c
 80014ac:	20000394 	.word	0x20000394
 80014b0:	20000304 	.word	0x20000304
 80014b4:	20000090 	.word	0x20000090
 80014b8:	200003dc 	.word	0x200003dc
 80014bc:	200002b0 	.word	0x200002b0
 80014c0:	c2aa0000 	.word	0xc2aa0000
 80014c4:	0800bed8 	.word	0x0800bed8
 80014c8:	42960000 	.word	0x42960000
 80014cc:	42b40000 	.word	0x42b40000
 80014d0:	0800bee4 	.word	0x0800bee4
 80014d4:	c2be0000 	.word	0xc2be0000
 80014d8:	0800bef0 	.word	0x0800bef0
 80014dc:	40a00000 	.word	0x40a00000
 80014e0:	c2b40000 	.word	0xc2b40000
 80014e4:	0800befc 	.word	0x0800befc
 80014e8:	41200000 	.word	0x41200000
 80014ec:	0800bf08 	.word	0x0800bf08
 80014f0:	40668000 	.word	0x40668000
		{
			phi_buffer[i] = rx_buffer[i];
 80014f4:	4ade      	ldr	r2, [pc, #888]	; (8001870 <main+0x6f0>)
 80014f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80014fa:	4413      	add	r3, r2
 80014fc:	7819      	ldrb	r1, [r3, #0]
 80014fe:	f107 020c 	add.w	r2, r7, #12
 8001502:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001506:	4413      	add	r3, r2
 8001508:	460a      	mov	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
			psi_buffer[i] = rx_buffer[i+5];
 800150c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001510:	3305      	adds	r3, #5
 8001512:	4ad7      	ldr	r2, [pc, #860]	; (8001870 <main+0x6f0>)
 8001514:	5cd1      	ldrb	r1, [r2, r3]
 8001516:	1d3a      	adds	r2, r7, #4
 8001518:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800151c:	4413      	add	r3, r2
 800151e:	460a      	mov	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<5; ++i)
 8001522:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001526:	3301      	adds	r3, #1
 8001528:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800152c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001530:	2b04      	cmp	r3, #4
 8001532:	dddf      	ble.n	80014f4 <main+0x374>
		}

		error_phi = (float)(atof(phi_buffer));
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4618      	mov	r0, r3
 800153a:	f006 fa63 	bl	8007a04 <atof>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fabf 	bl	8000ac8 <__aeabi_d2f>
 800154a:	4603      	mov	r3, r0
 800154c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		error_psi = (float)(atof(psi_buffer));
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f006 fa56 	bl	8007a04 <atof>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fab2 	bl	8000ac8 <__aeabi_d2f>
 8001564:	4603      	mov	r3, r0
 8001566:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

		phi += 0.08*error_phi + 0.002*(error_phi - error_phi_prev);
 800156a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800156e:	f7fe ff5b 	bl	8000428 <__aeabi_f2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
 8001576:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800157a:	f7fe ff55 	bl	8000428 <__aeabi_f2d>
 800157e:	a3ac      	add	r3, pc, #688	; (adr r3, 8001830 <main+0x6b0>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe ffa8 	bl	80004d8 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4690      	mov	r8, r2
 800158e:	4699      	mov	r9, r3
 8001590:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 8001594:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8001598:	f7ff faea 	bl	8000b70 <__aeabi_fsub>
 800159c:	4603      	mov	r3, r0
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff42 	bl	8000428 <__aeabi_f2d>
 80015a4:	a3a4      	add	r3, pc, #656	; (adr r3, 8001838 <main+0x6b8>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe ff95 	bl	80004d8 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4640      	mov	r0, r8
 80015b4:	4649      	mov	r1, r9
 80015b6:	f7fe fdd9 	bl	800016c <__adddf3>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7fe fdd3 	bl	800016c <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa7b 	bl	8000ac8 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		error_phi_prev = error_phi;
 80015d8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80015dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		psi += 0.04*error_psi;
 80015e0:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 80015e4:	f7fe ff20 	bl	8000428 <__aeabi_f2d>
 80015e8:	4604      	mov	r4, r0
 80015ea:	460d      	mov	r5, r1
 80015ec:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 80015f0:	f7fe ff1a 	bl	8000428 <__aeabi_f2d>
 80015f4:	a392      	add	r3, pc, #584	; (adr r3, 8001840 <main+0x6c0>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe ff6d 	bl	80004d8 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4620      	mov	r0, r4
 8001604:	4629      	mov	r1, r5
 8001606:	f7fe fdb1 	bl	800016c <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa59 	bl	8000ac8 <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	}

	// limits
	if(phi >  MAX_PHI)      phi   =  MAX_PHI;
 800161c:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001620:	f7fe ff02 	bl	8000428 <__aeabi_f2d>
 8001624:	a388      	add	r3, pc, #544	; (adr r3, 8001848 <main+0x6c8>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7ff f9e5 	bl	80009f8 <__aeabi_dcmpgt>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <main+0x4ba>
 8001634:	4b8f      	ldr	r3, [pc, #572]	; (8001874 <main+0x6f4>)
 8001636:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	if(phi < -MAX_PHI)      phi   = -MAX_PHI;
 800163a:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 800163e:	f7fe fef3 	bl	8000428 <__aeabi_f2d>
 8001642:	a383      	add	r3, pc, #524	; (adr r3, 8001850 <main+0x6d0>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7ff f9b8 	bl	80009bc <__aeabi_dcmplt>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <main+0x4d8>
 8001652:	4b89      	ldr	r3, [pc, #548]	; (8001878 <main+0x6f8>)
 8001654:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

	if(psi >  MAX_PSI)      psi   =  MAX_PSI;
 8001658:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800165c:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8001660:	f7ff fd4c 	bl	80010fc <__aeabi_fcmpgt>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <main+0x4f2>
 800166a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800166e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	if(psi < -MAX_PSI)      psi   = -MAX_PSI;
 8001672:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8001676:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 800167a:	f7ff fd21 	bl	80010c0 <__aeabi_fcmplt>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <main+0x50c>
 8001684:	f04f 433f 	mov.w	r3, #3204448256	; 0xbf000000
 8001688:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

	if(theta >  MAX_THETA)  theta =  MAX_THETA;
 800168c:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8001690:	f7fe feca 	bl	8000428 <__aeabi_f2d>
 8001694:	a36c      	add	r3, pc, #432	; (adr r3, 8001848 <main+0x6c8>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7ff f9ad 	bl	80009f8 <__aeabi_dcmpgt>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <main+0x52a>
 80016a4:	4b73      	ldr	r3, [pc, #460]	; (8001874 <main+0x6f4>)
 80016a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	if(theta < -MAX_THETA)  theta = -MAX_THETA;
 80016aa:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 80016ae:	f7fe febb 	bl	8000428 <__aeabi_f2d>
 80016b2:	a367      	add	r3, pc, #412	; (adr r3, 8001850 <main+0x6d0>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7ff f980 	bl	80009bc <__aeabi_dcmplt>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <main+0x548>
 80016c2:	4b6d      	ldr	r3, [pc, #436]	; (8001878 <main+0x6f8>)
 80016c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

	/* 1 - Right Front */
	roto_translation(psi, phi, theta, T, rf_r_m_o, rf_rotated);
 80016c8:	f107 0214 	add.w	r2, r7, #20
 80016cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80016de:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 80016e2:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 80016e6:	f001 fca7 	bl	8003038 <roto_translation>
	subtract(rf_m_l, rf_rotated, rf_r_o_rot);
 80016ea:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80016ee:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80016f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 ff6c 	bl	80035d4 <subtract>
	inverse_kinematics(rf_r_o_rot, L1, L2, L3,'r', rf_ik_res);
 80016fc:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001700:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	2372      	movs	r3, #114	; 0x72
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	4b5c      	ldr	r3, [pc, #368]	; (800187c <main+0x6fc>)
 800170c:	4a5c      	ldr	r2, [pc, #368]	; (8001880 <main+0x700>)
 800170e:	495d      	ldr	r1, [pc, #372]	; (8001884 <main+0x704>)
 8001710:	f001 fb1e 	bl	8002d50 <inverse_kinematics>
	/* 2 - Right Rear */
	roto_translation(psi, phi, theta, T, rr_r_m_o, rr_rotated);
 8001714:	f107 0214 	add.w	r2, r7, #20
 8001718:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800172a:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800172e:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8001732:	f001 fc81 	bl	8003038 <roto_translation>
	subtract(rr_m_l, rr_rotated, rr_r_o_rot);
 8001736:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800173a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800173e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001742:	4618      	mov	r0, r3
 8001744:	f001 ff46 	bl	80035d4 <subtract>
	inverse_kinematics(rr_r_o_rot, L1, L2, L3,'r', rr_ik_res);
 8001748:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800174c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	2372      	movs	r3, #114	; 0x72
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	4b49      	ldr	r3, [pc, #292]	; (800187c <main+0x6fc>)
 8001758:	4a49      	ldr	r2, [pc, #292]	; (8001880 <main+0x700>)
 800175a:	494a      	ldr	r1, [pc, #296]	; (8001884 <main+0x704>)
 800175c:	f001 faf8 	bl	8002d50 <inverse_kinematics>
	/* 3 - Left Front */
	roto_translation(psi, phi, theta, T, lf_r_m_o, lf_rotated);
 8001760:	f107 0214 	add.w	r2, r7, #20
 8001764:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	4613      	mov	r3, r2
 8001772:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8001776:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800177a:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 800177e:	f001 fc5b 	bl	8003038 <roto_translation>
	subtract(lf_m_l, lf_rotated, lf_r_o_rot);
 8001782:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001786:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800178a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800178e:	4618      	mov	r0, r3
 8001790:	f001 ff20 	bl	80035d4 <subtract>
	inverse_kinematics(lf_r_o_rot, L1, L2, L3,'l', lf_ik_res);
 8001794:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8001798:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	236c      	movs	r3, #108	; 0x6c
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <main+0x6fc>)
 80017a4:	4a36      	ldr	r2, [pc, #216]	; (8001880 <main+0x700>)
 80017a6:	4937      	ldr	r1, [pc, #220]	; (8001884 <main+0x704>)
 80017a8:	f001 fad2 	bl	8002d50 <inverse_kinematics>
	/* 4 - Left Rear */
	roto_translation(psi, phi, theta, T, lr_r_m_o, lr_rotated);
 80017ac:	f107 0214 	add.w	r2, r7, #20
 80017b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80017c2:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 80017c6:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 80017ca:	f001 fc35 	bl	8003038 <roto_translation>
	subtract(lr_m_l, lr_rotated, lr_r_o_rot);
 80017ce:	f107 0220 	add.w	r2, r7, #32
 80017d2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80017d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fefa 	bl	80035d4 <subtract>
	inverse_kinematics(lr_r_o_rot, L1, L2, L3,'l', lr_ik_res);
 80017e0:	f107 0020 	add.w	r0, r7, #32
 80017e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	236c      	movs	r3, #108	; 0x6c
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <main+0x6fc>)
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <main+0x700>)
 80017f2:	4924      	ldr	r1, [pc, #144]	; (8001884 <main+0x704>)
 80017f4:	f001 faac 	bl	8002d50 <inverse_kinematics>

	LR_servo_ii  = round(MAX(MIN(LR_a_servo_ii*lr_ik_res[1]  + LR_b_servo_ii,  MAX_LR_servo_ii),  MIN_LR_servo_ii));
 80017f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe12 	bl	8000428 <__aeabi_f2d>
 8001804:	a314      	add	r3, pc, #80	; (adr r3, 8001858 <main+0x6d8>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe fe65 	bl	80004d8 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	a312      	add	r3, pc, #72	; (adr r3, 8001860 <main+0x6e0>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fca6 	bl	800016c <__adddf3>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a30f      	add	r3, pc, #60	; (adr r3, 8001868 <main+0x6e8>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	e02b      	b.n	8001888 <main+0x708>
 8001830:	47ae147b 	.word	0x47ae147b
 8001834:	3fb47ae1 	.word	0x3fb47ae1
 8001838:	d2f1a9fc 	.word	0xd2f1a9fc
 800183c:	3f60624d 	.word	0x3f60624d
 8001840:	47ae147b 	.word	0x47ae147b
 8001844:	3fa47ae1 	.word	0x3fa47ae1
 8001848:	9999999a 	.word	0x9999999a
 800184c:	3fd99999 	.word	0x3fd99999
 8001850:	9999999a 	.word	0x9999999a
 8001854:	bfd99999 	.word	0xbfd99999
 8001858:	e5f592bf 	.word	0xe5f592bf
 800185c:	c082e64e 	.word	0xc082e64e
 8001860:	00000000 	.word	0x00000000
 8001864:	40906800 	.word	0x40906800
 8001868:	00000000 	.word	0x00000000
 800186c:	40a32400 	.word	0x40a32400
 8001870:	20000090 	.word	0x20000090
 8001874:	3ecccccd 	.word	0x3ecccccd
 8001878:	becccccd 	.word	0xbecccccd
 800187c:	42a00000 	.word	0x42a00000
 8001880:	429c0000 	.word	0x429c0000
 8001884:	42340000 	.word	0x42340000
 8001888:	f7ff f898 	bl	80009bc <__aeabi_dcmplt>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d025      	beq.n	80018de <main+0x75e>
 8001892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fdc5 	bl	8000428 <__aeabi_f2d>
 800189e:	a3c4      	add	r3, pc, #784	; (adr r3, 8001bb0 <main+0xa30>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fe18 	bl	80004d8 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	a3c1      	add	r3, pc, #772	; (adr r3, 8001bb8 <main+0xa38>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fc59 	bl	800016c <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	2301      	movs	r3, #1
 80018c4:	461c      	mov	r4, r3
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4bcb      	ldr	r3, [pc, #812]	; (8001bf8 <main+0xa78>)
 80018cc:	f7ff f894 	bl	80009f8 <__aeabi_dcmpgt>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <main+0x75a>
 80018d6:	2300      	movs	r3, #0
 80018d8:	461c      	mov	r4, r3
 80018da:	b2e3      	uxtb	r3, r4
 80018dc:	e000      	b.n	80018e0 <main+0x760>
 80018de:	2301      	movs	r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d03a      	beq.n	800195a <main+0x7da>
 80018e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fd9c 	bl	8000428 <__aeabi_f2d>
 80018f0:	a3af      	add	r3, pc, #700	; (adr r3, 8001bb0 <main+0xa30>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fdef 	bl	80004d8 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	a3ad      	add	r3, pc, #692	; (adr r3, 8001bb8 <main+0xa38>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fc30 	bl	800016c <__adddf3>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	a3aa      	add	r3, pc, #680	; (adr r3, 8001bc0 <main+0xa40>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7ff f84f 	bl	80009bc <__aeabi_dcmplt>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d016      	beq.n	8001952 <main+0x7d2>
 8001924:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fd7c 	bl	8000428 <__aeabi_f2d>
 8001930:	a39f      	add	r3, pc, #636	; (adr r3, 8001bb0 <main+0xa30>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fdcf 	bl	80004d8 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	a39d      	add	r3, pc, #628	; (adr r3, 8001bb8 <main+0xa38>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fc10 	bl	800016c <__adddf3>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	e006      	b.n	8001960 <main+0x7e0>
 8001952:	a39b      	add	r3, pc, #620	; (adr r3, 8001bc0 <main+0xa40>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	e002      	b.n	8001960 <main+0x7e0>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4ba6      	ldr	r3, [pc, #664]	; (8001bf8 <main+0xa78>)
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f009 f8b8 	bl	800aad8 <round>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4ca3      	ldr	r4, [pc, #652]	; (8001bfc <main+0xa7c>)
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f889 	bl	8000a88 <__aeabi_d2uiz>
 8001976:	4603      	mov	r3, r0
 8001978:	63e3      	str	r3, [r4, #60]	; 0x3c
	LR_servo_iii = round(MAX(MIN(LR_a_servo_iii*lr_ik_res[2] + LR_b_servo_iii, MAX_LR_servo_iii), MIN_LR_servo_iii));
 800197a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fd51 	bl	8000428 <__aeabi_f2d>
 8001986:	a390      	add	r3, pc, #576	; (adr r3, 8001bc8 <main+0xa48>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fda4 	bl	80004d8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	a38d      	add	r3, pc, #564	; (adr r3, 8001bd0 <main+0xa50>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fbe3 	bl	8000168 <__aeabi_dsub>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	a38b      	add	r3, pc, #556	; (adr r3, 8001bd8 <main+0xa58>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7ff f804 	bl	80009bc <__aeabi_dcmplt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d025      	beq.n	8001a06 <main+0x886>
 80019ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd31 	bl	8000428 <__aeabi_f2d>
 80019c6:	a380      	add	r3, pc, #512	; (adr r3, 8001bc8 <main+0xa48>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fd84 	bl	80004d8 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	a37d      	add	r3, pc, #500	; (adr r3, 8001bd0 <main+0xa50>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fbc3 	bl	8000168 <__aeabi_dsub>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	2301      	movs	r3, #1
 80019ec:	461c      	mov	r4, r3
 80019ee:	a37c      	add	r3, pc, #496	; (adr r3, 8001be0 <main+0xa60>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7ff f800 	bl	80009f8 <__aeabi_dcmpgt>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <main+0x882>
 80019fe:	2300      	movs	r3, #0
 8001a00:	461c      	mov	r4, r3
 8001a02:	b2e3      	uxtb	r3, r4
 8001a04:	e000      	b.n	8001a08 <main+0x888>
 8001a06:	2301      	movs	r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d03a      	beq.n	8001a82 <main+0x902>
 8001a0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd08 	bl	8000428 <__aeabi_f2d>
 8001a18:	a36b      	add	r3, pc, #428	; (adr r3, 8001bc8 <main+0xa48>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fd5b 	bl	80004d8 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	a369      	add	r3, pc, #420	; (adr r3, 8001bd0 <main+0xa50>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7fe fb9a 	bl	8000168 <__aeabi_dsub>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	a366      	add	r3, pc, #408	; (adr r3, 8001bd8 <main+0xa58>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe ffbb 	bl	80009bc <__aeabi_dcmplt>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d016      	beq.n	8001a7a <main+0x8fa>
 8001a4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fce8 	bl	8000428 <__aeabi_f2d>
 8001a58:	a35b      	add	r3, pc, #364	; (adr r3, 8001bc8 <main+0xa48>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fd3b 	bl	80004d8 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	a359      	add	r3, pc, #356	; (adr r3, 8001bd0 <main+0xa50>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fb7a 	bl	8000168 <__aeabi_dsub>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	e006      	b.n	8001a88 <main+0x908>
 8001a7a:	a357      	add	r3, pc, #348	; (adr r3, 8001bd8 <main+0xa58>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	e002      	b.n	8001a88 <main+0x908>
 8001a82:	a357      	add	r3, pc, #348	; (adr r3, 8001be0 <main+0xa60>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f009 f824 	bl	800aad8 <round>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4c59      	ldr	r4, [pc, #356]	; (8001bfc <main+0xa7c>)
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7fe fff5 	bl	8000a88 <__aeabi_d2uiz>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6423      	str	r3, [r4, #64]	; 0x40
	LR_servo_i   = round(MAX(MIN(LR_a_servo_i*lr_ik_res[0]   + LR_b_servo_i,   MAX_LR_servo_i),   MIN_LR_servo_i));
 8001aa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcbd 	bl	8000428 <__aeabi_f2d>
 8001aae:	a34e      	add	r3, pc, #312	; (adr r3, 8001be8 <main+0xa68>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fd10 	bl	80004d8 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	a34b      	add	r3, pc, #300	; (adr r3, 8001bf0 <main+0xa70>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fb51 	bl	800016c <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <main+0xa80>)
 8001ad8:	f7fe ff70 	bl	80009bc <__aeabi_dcmplt>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d025      	beq.n	8001b2e <main+0x9ae>
 8001ae2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fc9d 	bl	8000428 <__aeabi_f2d>
 8001aee:	a33e      	add	r3, pc, #248	; (adr r3, 8001be8 <main+0xa68>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fcf0 	bl	80004d8 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	a33b      	add	r3, pc, #236	; (adr r3, 8001bf0 <main+0xa70>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fb31 	bl	800016c <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	2301      	movs	r3, #1
 8001b14:	461c      	mov	r4, r3
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <main+0xa84>)
 8001b1c:	f7fe ff6c 	bl	80009f8 <__aeabi_dcmpgt>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <main+0x9aa>
 8001b26:	2300      	movs	r3, #0
 8001b28:	461c      	mov	r4, r3
 8001b2a:	b2e3      	uxtb	r3, r4
 8001b2c:	e000      	b.n	8001b30 <main+0x9b0>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d069      	beq.n	8001c08 <main+0xa88>
 8001b34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fc74 	bl	8000428 <__aeabi_f2d>
 8001b40:	a329      	add	r3, pc, #164	; (adr r3, 8001be8 <main+0xa68>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fcc7 	bl	80004d8 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	a327      	add	r3, pc, #156	; (adr r3, 8001bf0 <main+0xa70>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fb08 	bl	800016c <__adddf3>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <main+0xa80>)
 8001b6a:	f7fe ff27 	bl	80009bc <__aeabi_dcmplt>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d016      	beq.n	8001ba2 <main+0xa22>
 8001b74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc54 	bl	8000428 <__aeabi_f2d>
 8001b80:	a319      	add	r3, pc, #100	; (adr r3, 8001be8 <main+0xa68>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f7fe fca7 	bl	80004d8 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	a317      	add	r3, pc, #92	; (adr r3, 8001bf0 <main+0xa70>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fae8 	bl	800016c <__adddf3>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	e035      	b.n	8001c0e <main+0xa8e>
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <main+0xa80>)
 8001ba8:	e031      	b.n	8001c0e <main+0xa8e>
 8001baa:	bf00      	nop
 8001bac:	f3af 8000 	nop.w
 8001bb0:	e5f592bf 	.word	0xe5f592bf
 8001bb4:	c082e64e 	.word	0xc082e64e
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	40906800 	.word	0x40906800
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	40a32400 	.word	0x40a32400
 8001bc8:	5b2cf75a 	.word	0x5b2cf75a
 8001bcc:	408de9cd 	.word	0x408de9cd
 8001bd0:	11e55ab8 	.word	0x11e55ab8
 8001bd4:	405cb1b5 	.word	0x405cb1b5
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40a06800 	.word	0x40a06800
 8001be0:	00000000 	.word	0x00000000
 8001be4:	40913000 	.word	0x40913000
 8001be8:	ea231ee9 	.word	0xea231ee9
 8001bec:	c082ccd7 	.word	0xc082ccd7
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	40964400 	.word	0x40964400
 8001bf8:	4082c000 	.word	0x4082c000
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	409f4000 	.word	0x409f4000
 8001c04:	408f4000 	.word	0x408f4000
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4bcc      	ldr	r3, [pc, #816]	; (8001f40 <main+0xdc0>)
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f008 ff61 	bl	800aad8 <round>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4cca      	ldr	r4, [pc, #808]	; (8001f44 <main+0xdc4>)
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ff32 	bl	8000a88 <__aeabi_d2uiz>
 8001c24:	4603      	mov	r3, r0
 8001c26:	6363      	str	r3, [r4, #52]	; 0x34

	LF_servo_ii  = round(MAX(MIN(LF_a_servo_ii*lf_ik_res[1]  + LF_b_servo_ii,  MAX_LF_servo_ii),  MIN_LF_servo_ii));
 8001c28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fbfa 	bl	8000428 <__aeabi_f2d>
 8001c34:	a3b4      	add	r3, pc, #720	; (adr r3, 8001f08 <main+0xd88>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fc4d 	bl	80004d8 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4bbf      	ldr	r3, [pc, #764]	; (8001f48 <main+0xdc8>)
 8001c4c:	f7fe fa8e 	bl	800016c <__adddf3>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	a3ad      	add	r3, pc, #692	; (adr r3, 8001f10 <main+0xd90>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fead 	bl	80009bc <__aeabi_dcmplt>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d025      	beq.n	8001cb4 <main+0xb34>
 8001c68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fbda 	bl	8000428 <__aeabi_f2d>
 8001c74:	a3a4      	add	r3, pc, #656	; (adr r3, 8001f08 <main+0xd88>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fc2d 	bl	80004d8 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4baf      	ldr	r3, [pc, #700]	; (8001f48 <main+0xdc8>)
 8001c8c:	f7fe fa6e 	bl	800016c <__adddf3>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	2301      	movs	r3, #1
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4baa      	ldr	r3, [pc, #680]	; (8001f4c <main+0xdcc>)
 8001ca2:	f7fe fea9 	bl	80009f8 <__aeabi_dcmpgt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <main+0xb30>
 8001cac:	2300      	movs	r3, #0
 8001cae:	461c      	mov	r4, r3
 8001cb0:	b2e3      	uxtb	r3, r4
 8001cb2:	e000      	b.n	8001cb6 <main+0xb36>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d03a      	beq.n	8001d30 <main+0xbb0>
 8001cba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fbb1 	bl	8000428 <__aeabi_f2d>
 8001cc6:	a390      	add	r3, pc, #576	; (adr r3, 8001f08 <main+0xd88>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fc04 	bl	80004d8 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	4b9a      	ldr	r3, [pc, #616]	; (8001f48 <main+0xdc8>)
 8001cde:	f7fe fa45 	bl	800016c <__adddf3>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	a389      	add	r3, pc, #548	; (adr r3, 8001f10 <main+0xd90>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fe64 	bl	80009bc <__aeabi_dcmplt>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d016      	beq.n	8001d28 <main+0xba8>
 8001cfa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fb91 	bl	8000428 <__aeabi_f2d>
 8001d06:	a380      	add	r3, pc, #512	; (adr r3, 8001f08 <main+0xd88>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fbe4 	bl	80004d8 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	4b8a      	ldr	r3, [pc, #552]	; (8001f48 <main+0xdc8>)
 8001d1e:	f7fe fa25 	bl	800016c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	e006      	b.n	8001d36 <main+0xbb6>
 8001d28:	a379      	add	r3, pc, #484	; (adr r3, 8001f10 <main+0xd90>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	e002      	b.n	8001d36 <main+0xbb6>
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b85      	ldr	r3, [pc, #532]	; (8001f4c <main+0xdcc>)
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f008 fecd 	bl	800aad8 <round>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4c83      	ldr	r4, [pc, #524]	; (8001f50 <main+0xdd0>)
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7fe fe9e 	bl	8000a88 <__aeabi_d2uiz>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	6363      	str	r3, [r4, #52]	; 0x34
	LF_servo_iii = round(MAX(MIN(LF_a_servo_iii*lf_ik_res[2] + LF_b_servo_iii, MAX_LF_servo_iii), MIN_LF_servo_iii));
 8001d50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fb66 	bl	8000428 <__aeabi_f2d>
 8001d5c:	a36e      	add	r3, pc, #440	; (adr r3, 8001f18 <main+0xd98>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	f7fe fbb9 	bl	80004d8 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	a36c      	add	r3, pc, #432	; (adr r3, 8001f20 <main+0xda0>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe f9f8 	bl	8000168 <__aeabi_dsub>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	a369      	add	r3, pc, #420	; (adr r3, 8001f28 <main+0xda8>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fe19 	bl	80009bc <__aeabi_dcmplt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d025      	beq.n	8001ddc <main+0xc5c>
 8001d90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb46 	bl	8000428 <__aeabi_f2d>
 8001d9c:	a35e      	add	r3, pc, #376	; (adr r3, 8001f18 <main+0xd98>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f7fe fb99 	bl	80004d8 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	a35c      	add	r3, pc, #368	; (adr r3, 8001f20 <main+0xda0>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe f9d8 	bl	8000168 <__aeabi_dsub>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <main+0xdd4>)
 8001dca:	f7fe fe15 	bl	80009f8 <__aeabi_dcmpgt>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <main+0xc58>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	461c      	mov	r4, r3
 8001dd8:	b2e3      	uxtb	r3, r4
 8001dda:	e000      	b.n	8001dde <main+0xc5e>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03a      	beq.n	8001e58 <main+0xcd8>
 8001de2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb1d 	bl	8000428 <__aeabi_f2d>
 8001dee:	a34a      	add	r3, pc, #296	; (adr r3, 8001f18 <main+0xd98>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fb70 	bl	80004d8 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	a347      	add	r3, pc, #284	; (adr r3, 8001f20 <main+0xda0>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe f9af 	bl	8000168 <__aeabi_dsub>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	a345      	add	r3, pc, #276	; (adr r3, 8001f28 <main+0xda8>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fdd0 	bl	80009bc <__aeabi_dcmplt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d016      	beq.n	8001e50 <main+0xcd0>
 8001e22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fafd 	bl	8000428 <__aeabi_f2d>
 8001e2e:	a33a      	add	r3, pc, #232	; (adr r3, 8001f18 <main+0xd98>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fb50 	bl	80004d8 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	a337      	add	r3, pc, #220	; (adr r3, 8001f20 <main+0xda0>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe f98f 	bl	8000168 <__aeabi_dsub>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	e006      	b.n	8001e5e <main+0xcde>
 8001e50:	a335      	add	r3, pc, #212	; (adr r3, 8001f28 <main+0xda8>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	e002      	b.n	8001e5e <main+0xcde>
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <main+0xdd4>)
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f008 fe39 	bl	800aad8 <round>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4c39      	ldr	r4, [pc, #228]	; (8001f50 <main+0xdd0>)
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fe0a 	bl	8000a88 <__aeabi_d2uiz>
 8001e74:	4603      	mov	r3, r0
 8001e76:	6423      	str	r3, [r4, #64]	; 0x40
	LF_servo_i   = round(MAX(MIN(LF_a_servo_i*lf_ik_res[0]   + LF_b_servo_i,   MAX_LF_servo_i),   MIN_LF_servo_i));
 8001e78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fad2 	bl	8000428 <__aeabi_f2d>
 8001e84:	a32a      	add	r3, pc, #168	; (adr r3, 8001f30 <main+0xdb0>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f7fe fb25 	bl	80004d8 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	a328      	add	r3, pc, #160	; (adr r3, 8001f38 <main+0xdb8>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	f7fe f966 	bl	800016c <__adddf3>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <main+0xdd8>)
 8001eae:	f7fe fd85 	bl	80009bc <__aeabi_dcmplt>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d051      	beq.n	8001f5c <main+0xddc>
 8001eb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fab2 	bl	8000428 <__aeabi_f2d>
 8001ec4:	a31a      	add	r3, pc, #104	; (adr r3, 8001f30 <main+0xdb0>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fb05 	bl	80004d8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	a318      	add	r3, pc, #96	; (adr r3, 8001f38 <main+0xdb8>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe f946 	bl	800016c <__adddf3>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	2301      	movs	r3, #1
 8001eea:	461c      	mov	r4, r3
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <main+0xdc0>)
 8001ef2:	f7fe fd81 	bl	80009f8 <__aeabi_dcmpgt>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <main+0xd80>
 8001efc:	2300      	movs	r3, #0
 8001efe:	461c      	mov	r4, r3
 8001f00:	b2e3      	uxtb	r3, r4
 8001f02:	e02c      	b.n	8001f5e <main+0xdde>
 8001f04:	f3af 8000 	nop.w
 8001f08:	c8b565fe 	.word	0xc8b565fe
 8001f0c:	c083988f 	.word	0xc083988f
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40a32400 	.word	0x40a32400
 8001f18:	c710cb29 	.word	0xc710cb29
 8001f1c:	408da9ca 	.word	0x408da9ca
 8001f20:	be9e60d4 	.word	0xbe9e60d4
 8001f24:	40396e33 	.word	0x40396e33
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	40a06800 	.word	0x40a06800
 8001f30:	81205103 	.word	0x81205103
 8001f34:	408240c9 	.word	0x408240c9
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	4096e400 	.word	0x4096e400
 8001f40:	408f4000 	.word	0x408f4000
 8001f44:	40000400 	.word	0x40000400
 8001f48:	408e5000 	.word	0x408e5000
 8001f4c:	40813000 	.word	0x40813000
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	408c2000 	.word	0x408c2000
 8001f58:	409f4000 	.word	0x409f4000
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d03a      	beq.n	8001fd8 <main+0xe58>
 8001f62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fa5d 	bl	8000428 <__aeabi_f2d>
 8001f6e:	a3ae      	add	r3, pc, #696	; (adr r3, 8002228 <main+0x10a8>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fab0 	bl	80004d8 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	a3ab      	add	r3, pc, #684	; (adr r3, 8002230 <main+0x10b0>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe f8f1 	bl	800016c <__adddf3>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	4bb2      	ldr	r3, [pc, #712]	; (8002260 <main+0x10e0>)
 8001f98:	f7fe fd10 	bl	80009bc <__aeabi_dcmplt>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <main+0xe50>
 8001fa2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fa3d 	bl	8000428 <__aeabi_f2d>
 8001fae:	a39e      	add	r3, pc, #632	; (adr r3, 8002228 <main+0x10a8>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe fa90 	bl	80004d8 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	a39b      	add	r3, pc, #620	; (adr r3, 8002230 <main+0x10b0>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe f8d1 	bl	800016c <__adddf3>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	e006      	b.n	8001fde <main+0xe5e>
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	4ba2      	ldr	r3, [pc, #648]	; (8002260 <main+0x10e0>)
 8001fd6:	e002      	b.n	8001fde <main+0xe5e>
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	4ba1      	ldr	r3, [pc, #644]	; (8002264 <main+0x10e4>)
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f008 fd79 	bl	800aad8 <round>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4c9f      	ldr	r4, [pc, #636]	; (8002268 <main+0x10e8>)
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe fd4a 	bl	8000a88 <__aeabi_d2uiz>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	63a3      	str	r3, [r4, #56]	; 0x38

	RR_servo_ii  = round(MAX(MIN(RR_a_servo_ii*rr_ik_res[1]  + RR_b_servo_ii,  MAX_RR_servo_ii),  MIN_RR_servo_ii));
 8001ff8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa12 	bl	8000428 <__aeabi_f2d>
 8002004:	a38c      	add	r3, pc, #560	; (adr r3, 8002238 <main+0x10b8>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fa65 	bl	80004d8 <__aeabi_dmul>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	a38a      	add	r3, pc, #552	; (adr r3, 8002240 <main+0x10c0>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe f8a6 	bl	800016c <__adddf3>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b8f      	ldr	r3, [pc, #572]	; (800226c <main+0x10ec>)
 800202e:	f7fe fcc5 	bl	80009bc <__aeabi_dcmplt>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d025      	beq.n	8002084 <main+0xf04>
 8002038:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f9f2 	bl	8000428 <__aeabi_f2d>
 8002044:	a37c      	add	r3, pc, #496	; (adr r3, 8002238 <main+0x10b8>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fa45 	bl	80004d8 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	a37a      	add	r3, pc, #488	; (adr r3, 8002240 <main+0x10c0>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe f886 	bl	800016c <__adddf3>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	2301      	movs	r3, #1
 800206a:	461c      	mov	r4, r3
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <main+0x10f0>)
 8002072:	f7fe fcc1 	bl	80009f8 <__aeabi_dcmpgt>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <main+0xf00>
 800207c:	2300      	movs	r3, #0
 800207e:	461c      	mov	r4, r3
 8002080:	b2e3      	uxtb	r3, r4
 8002082:	e000      	b.n	8002086 <main+0xf06>
 8002084:	2301      	movs	r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d03a      	beq.n	8002100 <main+0xf80>
 800208a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f9c9 	bl	8000428 <__aeabi_f2d>
 8002096:	a368      	add	r3, pc, #416	; (adr r3, 8002238 <main+0x10b8>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fa1c 	bl	80004d8 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	a365      	add	r3, pc, #404	; (adr r3, 8002240 <main+0x10c0>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe f85d 	bl	800016c <__adddf3>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4b6b      	ldr	r3, [pc, #428]	; (800226c <main+0x10ec>)
 80020c0:	f7fe fc7c 	bl	80009bc <__aeabi_dcmplt>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d016      	beq.n	80020f8 <main+0xf78>
 80020ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f9a9 	bl	8000428 <__aeabi_f2d>
 80020d6:	a358      	add	r3, pc, #352	; (adr r3, 8002238 <main+0x10b8>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe f9fc 	bl	80004d8 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	a355      	add	r3, pc, #340	; (adr r3, 8002240 <main+0x10c0>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe f83d 	bl	800016c <__adddf3>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	e006      	b.n	8002106 <main+0xf86>
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	4b5b      	ldr	r3, [pc, #364]	; (800226c <main+0x10ec>)
 80020fe:	e002      	b.n	8002106 <main+0xf86>
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	4b5a      	ldr	r3, [pc, #360]	; (8002270 <main+0x10f0>)
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f008 fce5 	bl	800aad8 <round>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4c58      	ldr	r4, [pc, #352]	; (8002274 <main+0x10f4>)
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe fcb6 	bl	8000a88 <__aeabi_d2uiz>
 800211c:	4603      	mov	r3, r0
 800211e:	63a3      	str	r3, [r4, #56]	; 0x38
	RR_servo_iii = round(MAX(MIN(RR_a_servo_iii*rr_ik_res[2] + RR_b_servo_iii, MAX_RR_servo_iii), MIN_RR_servo_iii));
 8002120:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe f97e 	bl	8000428 <__aeabi_f2d>
 800212c:	a346      	add	r3, pc, #280	; (adr r3, 8002248 <main+0x10c8>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe f9d1 	bl	80004d8 <__aeabi_dmul>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	a344      	add	r3, pc, #272	; (adr r3, 8002250 <main+0x10d0>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe f812 	bl	800016c <__adddf3>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	a341      	add	r3, pc, #260	; (adr r3, 8002258 <main+0x10d8>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe fc31 	bl	80009bc <__aeabi_dcmplt>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d025      	beq.n	80021ac <main+0x102c>
 8002160:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f95e 	bl	8000428 <__aeabi_f2d>
 800216c:	a336      	add	r3, pc, #216	; (adr r3, 8002248 <main+0x10c8>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f7fe f9b1 	bl	80004d8 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	a334      	add	r3, pc, #208	; (adr r3, 8002250 <main+0x10d0>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f7fd fff2 	bl	800016c <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	2301      	movs	r3, #1
 8002192:	461c      	mov	r4, r3
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b37      	ldr	r3, [pc, #220]	; (8002278 <main+0x10f8>)
 800219a:	f7fe fc2d 	bl	80009f8 <__aeabi_dcmpgt>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <main+0x1028>
 80021a4:	2300      	movs	r3, #0
 80021a6:	461c      	mov	r4, r3
 80021a8:	b2e3      	uxtb	r3, r4
 80021aa:	e000      	b.n	80021ae <main+0x102e>
 80021ac:	2301      	movs	r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d064      	beq.n	800227c <main+0x10fc>
 80021b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f935 	bl	8000428 <__aeabi_f2d>
 80021be:	a322      	add	r3, pc, #136	; (adr r3, 8002248 <main+0x10c8>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe f988 	bl	80004d8 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	a31f      	add	r3, pc, #124	; (adr r3, 8002250 <main+0x10d0>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fd ffc9 	bl	800016c <__adddf3>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	a31d      	add	r3, pc, #116	; (adr r3, 8002258 <main+0x10d8>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe fbe8 	bl	80009bc <__aeabi_dcmplt>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <main+0x10a0>
 80021f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f915 	bl	8000428 <__aeabi_f2d>
 80021fe:	a312      	add	r3, pc, #72	; (adr r3, 8002248 <main+0x10c8>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	f7fe f968 	bl	80004d8 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	a30f      	add	r3, pc, #60	; (adr r3, 8002250 <main+0x10d0>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fd ffa9 	bl	800016c <__adddf3>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	e030      	b.n	8002282 <main+0x1102>
 8002220:	a30d      	add	r3, pc, #52	; (adr r3, 8002258 <main+0x10d8>)
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	e02c      	b.n	8002282 <main+0x1102>
 8002228:	81205103 	.word	0x81205103
 800222c:	408240c9 	.word	0x408240c9
 8002230:	00000000 	.word	0x00000000
 8002234:	4096e400 	.word	0x4096e400
 8002238:	bc2b69e6 	.word	0xbc2b69e6
 800223c:	4083e4f4 	.word	0x4083e4f4
 8002240:	00000000 	.word	0x00000000
 8002244:	409f9000 	.word	0x409f9000
 8002248:	a0af0c9d 	.word	0xa0af0c9d
 800224c:	c09075c4 	.word	0xc09075c4
 8002250:	3812152b 	.word	0x3812152b
 8002254:	40a9c365 	.word	0x40a9c365
 8002258:	00000000 	.word	0x00000000
 800225c:	40a06800 	.word	0x40a06800
 8002260:	409f4000 	.word	0x409f4000
 8002264:	408f4000 	.word	0x408f4000
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40a2c000 	.word	0x40a2c000
 8002270:	4082c000 	.word	0x4082c000
 8002274:	40000400 	.word	0x40000400
 8002278:	408c2000 	.word	0x408c2000
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	4bcb      	ldr	r3, [pc, #812]	; (80025b0 <main+0x1430>)
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f008 fc27 	bl	800aad8 <round>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f7fe fbf7 	bl	8000a88 <__aeabi_d2uiz>
 800229a:	4603      	mov	r3, r0
 800229c:	63a3      	str	r3, [r4, #56]	; 0x38
	RR_servo_i   = round(MAX(MIN(RR_a_servo_i*rr_ik_res[0]   + RR_b_servo_i,   MAX_RR_servo_i),   MIN_RR_servo_i));
 800229e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f8bf 	bl	8000428 <__aeabi_f2d>
 80022aa:	a3b1      	add	r3, pc, #708	; (adr r3, 8002570 <main+0x13f0>)
 80022ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b0:	f7fe f912 	bl	80004d8 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	a3ae      	add	r3, pc, #696	; (adr r3, 8002578 <main+0x13f8>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f7fd ff53 	bl	800016c <__adddf3>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4bb8      	ldr	r3, [pc, #736]	; (80025b4 <main+0x1434>)
 80022d4:	f7fe fb72 	bl	80009bc <__aeabi_dcmplt>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d025      	beq.n	800232a <main+0x11aa>
 80022de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f89f 	bl	8000428 <__aeabi_f2d>
 80022ea:	a3a1      	add	r3, pc, #644	; (adr r3, 8002570 <main+0x13f0>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe f8f2 	bl	80004d8 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	a39e      	add	r3, pc, #632	; (adr r3, 8002578 <main+0x13f8>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fd ff33 	bl	800016c <__adddf3>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	2301      	movs	r3, #1
 8002310:	461c      	mov	r4, r3
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	4ba8      	ldr	r3, [pc, #672]	; (80025b8 <main+0x1438>)
 8002318:	f7fe fb6e 	bl	80009f8 <__aeabi_dcmpgt>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <main+0x11a6>
 8002322:	2300      	movs	r3, #0
 8002324:	461c      	mov	r4, r3
 8002326:	b2e3      	uxtb	r3, r4
 8002328:	e000      	b.n	800232c <main+0x11ac>
 800232a:	2301      	movs	r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d03a      	beq.n	80023a6 <main+0x1226>
 8002330:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f876 	bl	8000428 <__aeabi_f2d>
 800233c:	a38c      	add	r3, pc, #560	; (adr r3, 8002570 <main+0x13f0>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fe f8c9 	bl	80004d8 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	a38a      	add	r3, pc, #552	; (adr r3, 8002578 <main+0x13f8>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fd ff0a 	bl	800016c <__adddf3>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	4b93      	ldr	r3, [pc, #588]	; (80025b4 <main+0x1434>)
 8002366:	f7fe fb29 	bl	80009bc <__aeabi_dcmplt>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d016      	beq.n	800239e <main+0x121e>
 8002370:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f856 	bl	8000428 <__aeabi_f2d>
 800237c:	a37c      	add	r3, pc, #496	; (adr r3, 8002570 <main+0x13f0>)
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	f7fe f8a9 	bl	80004d8 <__aeabi_dmul>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	a37a      	add	r3, pc, #488	; (adr r3, 8002578 <main+0x13f8>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fd feea 	bl	800016c <__adddf3>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	e006      	b.n	80023ac <main+0x122c>
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	4b84      	ldr	r3, [pc, #528]	; (80025b4 <main+0x1434>)
 80023a4:	e002      	b.n	80023ac <main+0x122c>
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	4b83      	ldr	r3, [pc, #524]	; (80025b8 <main+0x1438>)
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f008 fb92 	bl	800aad8 <round>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fb62 	bl	8000a88 <__aeabi_d2uiz>
 80023c4:	4603      	mov	r3, r0
 80023c6:	6363      	str	r3, [r4, #52]	; 0x34

	RF_servo_ii  = round(MAX(MIN(RF_a_servo_ii*rf_ik_res[1]  + RF_b_servo_ii,  MAX_RF_servo_ii),  MIN_RF_servo_ii));
 80023c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f82b 	bl	8000428 <__aeabi_f2d>
 80023d2:	a36b      	add	r3, pc, #428	; (adr r3, 8002580 <main+0x1400>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fe f87e 	bl	80004d8 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	a368      	add	r3, pc, #416	; (adr r3, 8002588 <main+0x1408>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fd febf 	bl	800016c <__adddf3>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	a366      	add	r3, pc, #408	; (adr r3, 8002590 <main+0x1410>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f7fe fade 	bl	80009bc <__aeabi_dcmplt>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d024      	beq.n	8002450 <main+0x12d0>
 8002406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f80c 	bl	8000428 <__aeabi_f2d>
 8002410:	a35b      	add	r3, pc, #364	; (adr r3, 8002580 <main+0x1400>)
 8002412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002416:	f7fe f85f 	bl	80004d8 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	a359      	add	r3, pc, #356	; (adr r3, 8002588 <main+0x1408>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fd fea0 	bl	800016c <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	2301      	movs	r3, #1
 8002436:	461c      	mov	r4, r3
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <main+0x143c>)
 800243e:	f7fe fadb 	bl	80009f8 <__aeabi_dcmpgt>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <main+0x12cc>
 8002448:	2300      	movs	r3, #0
 800244a:	461c      	mov	r4, r3
 800244c:	b2e3      	uxtb	r3, r4
 800244e:	e000      	b.n	8002452 <main+0x12d2>
 8002450:	2301      	movs	r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d038      	beq.n	80024c8 <main+0x1348>
 8002456:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800245a:	4618      	mov	r0, r3
 800245c:	f7fd ffe4 	bl	8000428 <__aeabi_f2d>
 8002460:	a347      	add	r3, pc, #284	; (adr r3, 8002580 <main+0x1400>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe f837 	bl	80004d8 <__aeabi_dmul>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	a345      	add	r3, pc, #276	; (adr r3, 8002588 <main+0x1408>)
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	f7fd fe78 	bl	800016c <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	a342      	add	r3, pc, #264	; (adr r3, 8002590 <main+0x1410>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	f7fe fa97 	bl	80009bc <__aeabi_dcmplt>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d015      	beq.n	80024c0 <main+0x1340>
 8002494:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002498:	4618      	mov	r0, r3
 800249a:	f7fd ffc5 	bl	8000428 <__aeabi_f2d>
 800249e:	a338      	add	r3, pc, #224	; (adr r3, 8002580 <main+0x1400>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe f818 	bl	80004d8 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	a335      	add	r3, pc, #212	; (adr r3, 8002588 <main+0x1408>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f7fd fe59 	bl	800016c <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	e006      	b.n	80024ce <main+0x134e>
 80024c0:	a333      	add	r3, pc, #204	; (adr r3, 8002590 <main+0x1410>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	e002      	b.n	80024ce <main+0x134e>
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <main+0x143c>)
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f008 fb01 	bl	800aad8 <round>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4c39      	ldr	r4, [pc, #228]	; (80025c0 <main+0x1440>)
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe fad2 	bl	8000a88 <__aeabi_d2uiz>
 80024e4:	4603      	mov	r3, r0
 80024e6:	63e3      	str	r3, [r4, #60]	; 0x3c
	RF_servo_iii = round(MAX(MIN(RF_a_servo_iii*rf_ik_res[2] + RF_b_servo_iii, MAX_RF_servo_iii), MIN_RF_servo_iii));
 80024e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fd ff9b 	bl	8000428 <__aeabi_f2d>
 80024f2:	a329      	add	r3, pc, #164	; (adr r3, 8002598 <main+0x1418>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fd ffee 	bl	80004d8 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	a326      	add	r3, pc, #152	; (adr r3, 80025a0 <main+0x1420>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fd fe2f 	bl	800016c <__adddf3>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	a324      	add	r3, pc, #144	; (adr r3, 80025a8 <main+0x1428>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	f7fe fa4e 	bl	80009bc <__aeabi_dcmplt>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d04e      	beq.n	80025c4 <main+0x1444>
 8002526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd ff7c 	bl	8000428 <__aeabi_f2d>
 8002530:	a319      	add	r3, pc, #100	; (adr r3, 8002598 <main+0x1418>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fd ffcf 	bl	80004d8 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	a317      	add	r3, pc, #92	; (adr r3, 80025a0 <main+0x1420>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f7fd fe10 	bl	800016c <__adddf3>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	2301      	movs	r3, #1
 8002556:	461c      	mov	r4, r3
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <main+0x1430>)
 800255e:	f7fe fa4b 	bl	80009f8 <__aeabi_dcmpgt>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <main+0x13ec>
 8002568:	2300      	movs	r3, #0
 800256a:	461c      	mov	r4, r3
 800256c:	b2e3      	uxtb	r3, r4
 800256e:	e02a      	b.n	80025c6 <main+0x1446>
 8002570:	ea231ee9 	.word	0xea231ee9
 8002574:	c082ccd7 	.word	0xc082ccd7
 8002578:	55551c11 	.word	0x55551c11
 800257c:	40970555 	.word	0x40970555
 8002580:	ea231ee9 	.word	0xea231ee9
 8002584:	4082ccd7 	.word	0x4082ccd7
 8002588:	00000000 	.word	0x00000000
 800258c:	409f0400 	.word	0x409f0400
 8002590:	00000000 	.word	0x00000000
 8002594:	40a28400 	.word	0x40a28400
 8002598:	b8849652 	.word	0xb8849652
 800259c:	c08ef528 	.word	0xc08ef528
 80025a0:	5aed616d 	.word	0x5aed616d
 80025a4:	40a82068 	.word	0x40a82068
 80025a8:	00000000 	.word	0x00000000
 80025ac:	40a06800 	.word	0x40a06800
 80025b0:	408c2000 	.word	0x408c2000
 80025b4:	409f4000 	.word	0x409f4000
 80025b8:	408f4000 	.word	0x408f4000
 80025bc:	4082c000 	.word	0x4082c000
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	2301      	movs	r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d038      	beq.n	800263c <main+0x14bc>
 80025ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ff2a 	bl	8000428 <__aeabi_f2d>
 80025d4:	a36c      	add	r3, pc, #432	; (adr r3, 8002788 <main+0x1608>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fd ff7d 	bl	80004d8 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	a36a      	add	r3, pc, #424	; (adr r3, 8002790 <main+0x1610>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fd fdbe 	bl	800016c <__adddf3>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	a367      	add	r3, pc, #412	; (adr r3, 8002798 <main+0x1618>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fe f9dd 	bl	80009bc <__aeabi_dcmplt>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d015      	beq.n	8002634 <main+0x14b4>
 8002608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ff0b 	bl	8000428 <__aeabi_f2d>
 8002612:	a35d      	add	r3, pc, #372	; (adr r3, 8002788 <main+0x1608>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	f7fd ff5e 	bl	80004d8 <__aeabi_dmul>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	a35a      	add	r3, pc, #360	; (adr r3, 8002790 <main+0x1610>)
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	f7fd fd9f 	bl	800016c <__adddf3>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	e006      	b.n	8002642 <main+0x14c2>
 8002634:	a358      	add	r3, pc, #352	; (adr r3, 8002798 <main+0x1618>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	e002      	b.n	8002642 <main+0x14c2>
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <main+0x1630>)
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f008 fa47 	bl	800aad8 <round>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fa17 	bl	8000a88 <__aeabi_d2uiz>
 800265a:	4603      	mov	r3, r0
 800265c:	63e3      	str	r3, [r4, #60]	; 0x3c
	RF_servo_i   = round(MAX(MIN(RF_a_servo_i*rf_ik_res[0]   + RF_b_servo_i,   MAX_RF_servo_i),   MIN_RF_servo_i));
 800265e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd fee0 	bl	8000428 <__aeabi_f2d>
 8002668:	a34d      	add	r3, pc, #308	; (adr r3, 80027a0 <main+0x1620>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ff33 	bl	80004d8 <__aeabi_dmul>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	a34b      	add	r3, pc, #300	; (adr r3, 80027a8 <main+0x1628>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f7fd fd74 	bl	800016c <__adddf3>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <main+0x1634>)
 8002692:	f7fe f993 	bl	80009bc <__aeabi_dcmplt>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d024      	beq.n	80026e6 <main+0x1566>
 800269c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fec1 	bl	8000428 <__aeabi_f2d>
 80026a6:	a33e      	add	r3, pc, #248	; (adr r3, 80027a0 <main+0x1620>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd ff14 	bl	80004d8 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	a33b      	add	r3, pc, #236	; (adr r3, 80027a8 <main+0x1628>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fd fd55 	bl	800016c <__adddf3>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	2301      	movs	r3, #1
 80026cc:	461c      	mov	r4, r3
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <main+0x1638>)
 80026d4:	f7fe f990 	bl	80009f8 <__aeabi_dcmpgt>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <main+0x1562>
 80026de:	2300      	movs	r3, #0
 80026e0:	461c      	mov	r4, r3
 80026e2:	b2e3      	uxtb	r3, r4
 80026e4:	e000      	b.n	80026e8 <main+0x1568>
 80026e6:	2301      	movs	r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d038      	beq.n	800275e <main+0x15de>
 80026ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd fe99 	bl	8000428 <__aeabi_f2d>
 80026f6:	a32a      	add	r3, pc, #168	; (adr r3, 80027a0 <main+0x1620>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	f7fd feec 	bl	80004d8 <__aeabi_dmul>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	a327      	add	r3, pc, #156	; (adr r3, 80027a8 <main+0x1628>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f7fd fd2d 	bl	800016c <__adddf3>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <main+0x1634>)
 8002720:	f7fe f94c 	bl	80009bc <__aeabi_dcmplt>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d015      	beq.n	8002756 <main+0x15d6>
 800272a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fe7a 	bl	8000428 <__aeabi_f2d>
 8002734:	a31a      	add	r3, pc, #104	; (adr r3, 80027a0 <main+0x1620>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fd fecd 	bl	80004d8 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	a318      	add	r3, pc, #96	; (adr r3, 80027a8 <main+0x1628>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fd fd0e 	bl	800016c <__adddf3>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	e006      	b.n	8002764 <main+0x15e4>
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <main+0x1634>)
 800275c:	e002      	b.n	8002764 <main+0x15e4>
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <main+0x1638>)
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f008 f9b6 	bl	800aad8 <round>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f7fe f986 	bl	8000a88 <__aeabi_d2uiz>
 800277c:	4603      	mov	r3, r0
 800277e:	6423      	str	r3, [r4, #64]	; 0x40
	if (rx_buffer[12] == 'x' &&
 8002780:	f7fe bde3 	b.w	800134a <main+0x1ca>
 8002784:	f3af 8000 	nop.w
 8002788:	b8849652 	.word	0xb8849652
 800278c:	c08ef528 	.word	0xc08ef528
 8002790:	5aed616d 	.word	0x5aed616d
 8002794:	40a82068 	.word	0x40a82068
 8002798:	00000000 	.word	0x00000000
 800279c:	40a06800 	.word	0x40a06800
 80027a0:	ee5202ac 	.word	0xee5202ac
 80027a4:	4082b360 	.word	0x4082b360
 80027a8:	00000000 	.word	0x00000000
 80027ac:	40977000 	.word	0x40977000
 80027b0:	408c2000 	.word	0x408c2000
 80027b4:	409f4000 	.word	0x409f4000
 80027b8:	408f4000 	.word	0x408f4000

080027bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b090      	sub	sp, #64	; 0x40
 80027c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027c2:	f107 0318 	add.w	r3, r7, #24
 80027c6:	2228      	movs	r2, #40	; 0x28
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f005 f948 	bl	8007a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
 80027dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027de:	2301      	movs	r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027ec:	2301      	movs	r3, #1
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027f0:	2302      	movs	r3, #2
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	4618      	mov	r0, r3
 8002806:	f003 fa71 	bl	8005cec <HAL_RCC_OscConfig>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002810:	f001 fab4 	bl	8003d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002814:	230f      	movs	r3, #15
 8002816:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002818:	2302      	movs	r3, #2
 800281a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2102      	movs	r1, #2
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fcdc 	bl	80061ec <HAL_RCC_ClockConfig>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800283a:	f001 fa9f 	bl	8003d7c <Error_Handler>
  }
}
 800283e:	bf00      	nop
 8002840:	3740      	adds	r7, #64	; 0x40
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <MX_I2C1_Init+0x50>)
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <MX_I2C1_Init+0x54>)
 8002850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MX_I2C1_Init+0x50>)
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <MX_I2C1_Init+0x58>)
 8002856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <MX_I2C1_Init+0x50>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MX_I2C1_Init+0x50>)
 8002860:	2200      	movs	r2, #0
 8002862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <MX_I2C1_Init+0x50>)
 8002866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800286a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <MX_I2C1_Init+0x50>)
 800286e:	2200      	movs	r2, #0
 8002870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <MX_I2C1_Init+0x50>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <MX_I2C1_Init+0x50>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_I2C1_Init+0x50>)
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002884:	4804      	ldr	r0, [pc, #16]	; (8002898 <MX_I2C1_Init+0x50>)
 8002886:	f002 fa01 	bl	8004c8c <HAL_I2C_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002890:	f001 fa74 	bl	8003d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200002b0 	.word	0x200002b0
 800289c:	40005400 	.word	0x40005400
 80028a0:	00061a80 	.word	0x00061a80

080028a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b096      	sub	sp, #88	; 0x58
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	615a      	str	r2, [r3, #20]
 80028d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2220      	movs	r2, #32
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f005 f8bf 	bl	8007a60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028e2:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <MX_TIM1_Init+0x180>)
 80028e4:	4a50      	ldr	r2, [pc, #320]	; (8002a28 <MX_TIM1_Init+0x184>)
 80028e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 80028e8:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <MX_TIM1_Init+0x180>)
 80028ea:	2248      	movs	r2, #72	; 0x48
 80028ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ee:	4b4d      	ldr	r3, [pc, #308]	; (8002a24 <MX_TIM1_Init+0x180>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <MX_TIM1_Init+0x180>)
 80028f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80028fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <MX_TIM1_Init+0x180>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002902:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <MX_TIM1_Init+0x180>)
 8002904:	2200      	movs	r2, #0
 8002906:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <MX_TIM1_Init+0x180>)
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800290e:	4845      	ldr	r0, [pc, #276]	; (8002a24 <MX_TIM1_Init+0x180>)
 8002910:	f003 fe06 	bl	8006520 <HAL_TIM_Base_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800291a:	f001 fa2f 	bl	8003d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002928:	4619      	mov	r1, r3
 800292a:	483e      	ldr	r0, [pc, #248]	; (8002a24 <MX_TIM1_Init+0x180>)
 800292c:	f004 f800 	bl	8006930 <HAL_TIM_ConfigClockSource>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002936:	f001 fa21 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800293a:	483a      	ldr	r0, [pc, #232]	; (8002a24 <MX_TIM1_Init+0x180>)
 800293c:	f003 fe3f 	bl	80065be <HAL_TIM_PWM_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002946:	f001 fa19 	bl	8003d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002956:	4619      	mov	r1, r3
 8002958:	4832      	ldr	r0, [pc, #200]	; (8002a24 <MX_TIM1_Init+0x180>)
 800295a:	f004 fb51 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002964:	f001 fa0a 	bl	8003d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002968:	2360      	movs	r3, #96	; 0x60
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002988:	2200      	movs	r2, #0
 800298a:	4619      	mov	r1, r3
 800298c:	4825      	ldr	r0, [pc, #148]	; (8002a24 <MX_TIM1_Init+0x180>)
 800298e:	f003 ff11 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002998:	f001 f9f0 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800299c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a0:	2204      	movs	r2, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	481f      	ldr	r0, [pc, #124]	; (8002a24 <MX_TIM1_Init+0x180>)
 80029a6:	f003 ff05 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80029b0:	f001 f9e4 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	2208      	movs	r2, #8
 80029ba:	4619      	mov	r1, r3
 80029bc:	4819      	ldr	r0, [pc, #100]	; (8002a24 <MX_TIM1_Init+0x180>)
 80029be:	f003 fef9 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80029c8:	f001 f9d8 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d0:	220c      	movs	r2, #12
 80029d2:	4619      	mov	r1, r3
 80029d4:	4813      	ldr	r0, [pc, #76]	; (8002a24 <MX_TIM1_Init+0x180>)
 80029d6:	f003 feed 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80029e0:	f001 f9cc 	bl	8003d7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4807      	ldr	r0, [pc, #28]	; (8002a24 <MX_TIM1_Init+0x180>)
 8002a08:	f004 fb58 	bl	80070bc <HAL_TIMEx_ConfigBreakDeadTime>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002a12:	f001 f9b3 	bl	8003d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a16:	4803      	ldr	r0, [pc, #12]	; (8002a24 <MX_TIM1_Init+0x180>)
 8002a18:	f001 fa8c 	bl	8003f34 <HAL_TIM_MspPostInit>

}
 8002a1c:	bf00      	nop
 8002a1e:	3758      	adds	r7, #88	; 0x58
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	2000034c 	.word	0x2000034c
 8002a28:	40012c00 	.word	0x40012c00

08002a2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	; 0x38
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a40:	f107 0320 	add.w	r3, r7, #32
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
 8002a58:	615a      	str	r2, [r3, #20]
 8002a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8002a64:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002a66:	2248      	movs	r2, #72	; 0x48
 8002a68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002a70:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002a72:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a7e:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a84:	4833      	ldr	r0, [pc, #204]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002a86:	f003 fd4b 	bl	8006520 <HAL_TIM_Base_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a90:	f001 f974 	bl	8003d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	482c      	ldr	r0, [pc, #176]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002aa2:	f003 ff45 	bl	8006930 <HAL_TIM_ConfigClockSource>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002aac:	f001 f966 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ab0:	4828      	ldr	r0, [pc, #160]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002ab2:	f003 fd84 	bl	80065be <HAL_TIM_PWM_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002abc:	f001 f95e 	bl	8003d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ac8:	f107 0320 	add.w	r3, r7, #32
 8002acc:	4619      	mov	r1, r3
 8002ace:	4821      	ldr	r0, [pc, #132]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002ad0:	f004 fa96 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002ada:	f001 f94f 	bl	8003d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ade:	2360      	movs	r3, #96	; 0x60
 8002ae0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	2200      	movs	r2, #0
 8002af2:	4619      	mov	r1, r3
 8002af4:	4817      	ldr	r0, [pc, #92]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002af6:	f003 fe5d 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002b00:	f001 f93c 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	2204      	movs	r2, #4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4812      	ldr	r0, [pc, #72]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002b0c:	f003 fe52 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002b16:	f001 f931 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	4619      	mov	r1, r3
 8002b20:	480c      	ldr	r0, [pc, #48]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002b22:	f003 fe47 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002b2c:	f001 f926 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	220c      	movs	r2, #12
 8002b34:	4619      	mov	r1, r3
 8002b36:	4807      	ldr	r0, [pc, #28]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002b38:	f003 fe3c 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002b42:	f001 f91b 	bl	8003d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b46:	4803      	ldr	r0, [pc, #12]	; (8002b54 <MX_TIM2_Init+0x128>)
 8002b48:	f001 f9f4 	bl	8003f34 <HAL_TIM_MspPostInit>

}
 8002b4c:	bf00      	nop
 8002b4e:	3738      	adds	r7, #56	; 0x38
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000394 	.word	0x20000394

08002b58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08e      	sub	sp, #56	; 0x38
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6c:	f107 0320 	add.w	r3, r7, #32
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
 8002b84:	615a      	str	r2, [r3, #20]
 8002b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b88:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002b8a:	4a3e      	ldr	r2, [pc, #248]	; (8002c84 <MX_TIM3_Init+0x12c>)
 8002b8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002b90:	2248      	movs	r2, #72	; 0x48
 8002b92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b94:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002b9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ba0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba2:	4b37      	ldr	r3, [pc, #220]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bae:	4834      	ldr	r0, [pc, #208]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002bb0:	f003 fcb6 	bl	8006520 <HAL_TIM_Base_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002bba:	f001 f8df 	bl	8003d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc8:	4619      	mov	r1, r3
 8002bca:	482d      	ldr	r0, [pc, #180]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002bcc:	f003 feb0 	bl	8006930 <HAL_TIM_ConfigClockSource>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002bd6:	f001 f8d1 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bda:	4829      	ldr	r0, [pc, #164]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002bdc:	f003 fcef 	bl	80065be <HAL_TIM_PWM_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002be6:	f001 f8c9 	bl	8003d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bf2:	f107 0320 	add.w	r3, r7, #32
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4821      	ldr	r0, [pc, #132]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002bfa:	f004 fa01 	bl	8007000 <HAL_TIMEx_MasterConfigSynchronization>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002c04:	f001 f8ba 	bl	8003d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c08:	2360      	movs	r3, #96	; 0x60
 8002c0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4818      	ldr	r0, [pc, #96]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002c20:	f003 fdc8 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002c2a:	f001 f8a7 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	2204      	movs	r2, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	4812      	ldr	r0, [pc, #72]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002c36:	f003 fdbd 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002c40:	f001 f89c 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c44:	1d3b      	adds	r3, r7, #4
 8002c46:	2208      	movs	r2, #8
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480d      	ldr	r0, [pc, #52]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002c4c:	f003 fdb2 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002c56:	f001 f891 	bl	8003d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	220c      	movs	r2, #12
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4807      	ldr	r0, [pc, #28]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002c62:	f003 fda7 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002c6c:	f001 f886 	bl	8003d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c70:	4803      	ldr	r0, [pc, #12]	; (8002c80 <MX_TIM3_Init+0x128>)
 8002c72:	f001 f95f 	bl	8003f34 <HAL_TIM_MspPostInit>

}
 8002c76:	bf00      	nop
 8002c78:	3738      	adds	r7, #56	; 0x38
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000304 	.word	0x20000304
 8002c84:	40000400 	.word	0x40000400

08002c88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <MX_USART2_UART_Init+0x4c>)
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <MX_USART2_UART_Init+0x50>)
 8002c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <MX_USART2_UART_Init+0x4c>)
 8002c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <MX_USART2_UART_Init+0x4c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <MX_USART2_UART_Init+0x4c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <MX_USART2_UART_Init+0x4c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <MX_USART2_UART_Init+0x4c>)
 8002cae:	220c      	movs	r2, #12
 8002cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <MX_USART2_UART_Init+0x4c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <MX_USART2_UART_Init+0x4c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cbe:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <MX_USART2_UART_Init+0x4c>)
 8002cc0:	f004 fa4d 	bl	800715e <HAL_UART_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cca:	f001 f857 	bl	8003d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200003dc 	.word	0x200003dc
 8002cd8:	40004400 	.word	0x40004400

08002cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002ce8:	f043 0310 	orr.w	r3, r3, #16
 8002cec:	6193      	str	r3, [r2, #24]
 8002cee:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfa:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002d00:	f043 0320 	orr.w	r3, r3, #32
 8002d04:	6193      	str	r3, [r2, #24]
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	4a0d      	ldr	r2, [pc, #52]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	6193      	str	r3, [r2, #24]
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2a:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	6193      	str	r3, [r2, #24]
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <MX_GPIO_Init+0x70>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]

}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	40021000 	.word	0x40021000

08002d50 <inverse_kinematics>:
		                float L_1,
						float L_2,
						float L_3,
						char side,
						float* res)
{
 8002d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d54:	b08c      	sub	sp, #48	; 0x30
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6178      	str	r0, [r7, #20]
 8002d5a:	6139      	str	r1, [r7, #16]
 8002d5c:	60fa      	str	r2, [r7, #12]
 8002d5e:	60bb      	str	r3, [r7, #8]

	float s = 1.0;
 8002d60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(side == 'l') s = -1.0;
 8002d66:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002d6a:	2b6c      	cmp	r3, #108	; 0x6c
 8002d6c:	d101      	bne.n	8002d72 <inverse_kinematics+0x22>
 8002d6e:	4bb1      	ldr	r3, [pc, #708]	; (8003034 <inverse_kinematics+0x2e4>)
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c

	float x_1 = x[0];
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
	float x_2 = x[1];
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
	float x_3 = x[2];
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	623b      	str	r3, [r7, #32]

	float D = (x_1*x_1 + x_2*x_2 + x_3*x_3 - L_1*L_1 - L_2*L_2 - L_3*L_3) / (2*L_2*L_3);
 8002d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d88:	f7fd fffc 	bl	8000d84 <__aeabi_fmul>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461c      	mov	r4, r3
 8002d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d94:	f7fd fff6 	bl	8000d84 <__aeabi_fmul>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7fd fee9 	bl	8000b74 <__addsf3>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461c      	mov	r4, r3
 8002da6:	6a39      	ldr	r1, [r7, #32]
 8002da8:	6a38      	ldr	r0, [r7, #32]
 8002daa:	f7fd ffeb 	bl	8000d84 <__aeabi_fmul>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7fd fede 	bl	8000b74 <__addsf3>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461c      	mov	r4, r3
 8002dbc:	6939      	ldr	r1, [r7, #16]
 8002dbe:	6938      	ldr	r0, [r7, #16]
 8002dc0:	f7fd ffe0 	bl	8000d84 <__aeabi_fmul>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7fd fed1 	bl	8000b70 <__aeabi_fsub>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461c      	mov	r4, r3
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7fd ffd5 	bl	8000d84 <__aeabi_fmul>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4620      	mov	r0, r4
 8002de0:	f7fd fec6 	bl	8000b70 <__aeabi_fsub>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461c      	mov	r4, r3
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	68b8      	ldr	r0, [r7, #8]
 8002dec:	f7fd ffca 	bl	8000d84 <__aeabi_fmul>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4619      	mov	r1, r3
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7fd febb 	bl	8000b70 <__aeabi_fsub>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461c      	mov	r4, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4619      	mov	r1, r3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd feb6 	bl	8000b74 <__addsf3>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd ffb9 	bl	8000d84 <__aeabi_fmul>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4619      	mov	r1, r3
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7fe f868 	bl	8000eec <__aeabi_fdiv>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	61fb      	str	r3, [r7, #28]

	float delta = sqrt(x_2*x_2 + x_3*x_3 - L_1*L_1);
 8002e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e24:	f7fd ffae 	bl	8000d84 <__aeabi_fmul>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461c      	mov	r4, r3
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	6a38      	ldr	r0, [r7, #32]
 8002e30:	f7fd ffa8 	bl	8000d84 <__aeabi_fmul>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4619      	mov	r1, r3
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7fd fe9b 	bl	8000b74 <__addsf3>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	461c      	mov	r4, r3
 8002e42:	6939      	ldr	r1, [r7, #16]
 8002e44:	6938      	ldr	r0, [r7, #16]
 8002e46:	f7fd ff9d 	bl	8000d84 <__aeabi_fmul>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7fd fe8e 	bl	8000b70 <__aeabi_fsub>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fae6 	bl	8000428 <__aeabi_f2d>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	f007 fec8 	bl	800abf8 <sqrt>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f7fd fe2a 	bl	8000ac8 <__aeabi_d2f>
 8002e74:	4603      	mov	r3, r0
 8002e76:	61bb      	str	r3, [r7, #24]

	if(1 - D*D >=0)
 8002e78:	69f9      	ldr	r1, [r7, #28]
 8002e7a:	69f8      	ldr	r0, [r7, #28]
 8002e7c:	f7fd ff82 	bl	8000d84 <__aeabi_fmul>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4619      	mov	r1, r3
 8002e84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002e88:	f7fd fe72 	bl	8000b70 <__aeabi_fsub>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe f928 	bl	80010e8 <__aeabi_fcmpge>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d100      	bne.n	8002ea0 <inverse_kinematics+0x150>
		res[0] = atan2(x_2, -x_3)  +  atan2(delta, -s*L_1);
		res[2] = atan2(sqrt(1 - D*D), D);
		res[1] = atan2(x_1, delta) - atan2(L_3*sin(res[2]), L_2 + L_3*cos(res[2]));
	}

}
 8002e9e:	e0c4      	b.n	800302a <inverse_kinematics+0x2da>
		res[0] = atan2(x_2, -x_3)  +  atan2(delta, -s*L_1);
 8002ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ea2:	f7fd fac1 	bl	8000428 <__aeabi_f2d>
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	460d      	mov	r5, r1
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fab9 	bl	8000428 <__aeabi_f2d>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	f007 fe99 	bl	800abf4 <atan2>
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	460d      	mov	r5, r1
 8002ec6:	69b8      	ldr	r0, [r7, #24]
 8002ec8:	f7fd faae 	bl	8000428 <__aeabi_f2d>
 8002ecc:	4680      	mov	r8, r0
 8002ece:	4689      	mov	r9, r1
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ed6:	6939      	ldr	r1, [r7, #16]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd ff53 	bl	8000d84 <__aeabi_fmul>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd faa1 	bl	8000428 <__aeabi_f2d>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4640      	mov	r0, r8
 8002eec:	4649      	mov	r1, r9
 8002eee:	f007 fe81 	bl	800abf4 <atan2>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	4629      	mov	r1, r5
 8002efa:	f7fd f937 	bl	800016c <__adddf3>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fddf 	bl	8000ac8 <__aeabi_d2f>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0e:	601a      	str	r2, [r3, #0]
		res[2] = atan2(sqrt(1 - D*D), D);
 8002f10:	69f9      	ldr	r1, [r7, #28]
 8002f12:	69f8      	ldr	r0, [r7, #28]
 8002f14:	f7fd ff36 	bl	8000d84 <__aeabi_fmul>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002f20:	f7fd fe26 	bl	8000b70 <__aeabi_fsub>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fa7e 	bl	8000428 <__aeabi_f2d>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	f007 fe60 	bl	800abf8 <sqrt>
 8002f38:	4604      	mov	r4, r0
 8002f3a:	460d      	mov	r5, r1
 8002f3c:	69f8      	ldr	r0, [r7, #28]
 8002f3e:	f7fd fa73 	bl	8000428 <__aeabi_f2d>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4620      	mov	r0, r4
 8002f48:	4629      	mov	r1, r5
 8002f4a:	f007 fe53 	bl	800abf4 <atan2>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f54:	f101 0408 	add.w	r4, r1, #8
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7fd fdb4 	bl	8000ac8 <__aeabi_d2f>
 8002f60:	4603      	mov	r3, r0
 8002f62:	6023      	str	r3, [r4, #0]
		res[1] = atan2(x_1, delta) - atan2(L_3*sin(res[2]), L_2 + L_3*cos(res[2]));
 8002f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f66:	f7fd fa5f 	bl	8000428 <__aeabi_f2d>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	69b8      	ldr	r0, [r7, #24]
 8002f70:	f7fd fa5a 	bl	8000428 <__aeabi_f2d>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4620      	mov	r0, r4
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	f007 fe3a 	bl	800abf4 <atan2>
 8002f80:	4604      	mov	r4, r0
 8002f82:	460d      	mov	r5, r1
 8002f84:	68b8      	ldr	r0, [r7, #8]
 8002f86:	f7fd fa4f 	bl	8000428 <__aeabi_f2d>
 8002f8a:	4680      	mov	r8, r0
 8002f8c:	4689      	mov	r9, r1
 8002f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f90:	3308      	adds	r3, #8
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fa47 	bl	8000428 <__aeabi_f2d>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f007 fde1 	bl	800ab68 <sin>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4640      	mov	r0, r8
 8002fac:	4649      	mov	r1, r9
 8002fae:	f7fd fa93 	bl	80004d8 <__aeabi_dmul>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	e9c7 2300 	strd	r2, r3, [r7]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7fd fa34 	bl	8000428 <__aeabi_f2d>
 8002fc0:	4680      	mov	r8, r0
 8002fc2:	4689      	mov	r9, r1
 8002fc4:	68b8      	ldr	r0, [r7, #8]
 8002fc6:	f7fd fa2f 	bl	8000428 <__aeabi_f2d>
 8002fca:	4682      	mov	sl, r0
 8002fcc:	468b      	mov	fp, r1
 8002fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fa27 	bl	8000428 <__aeabi_f2d>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f007 fd33 	bl	800aa4c <cos>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4650      	mov	r0, sl
 8002fec:	4659      	mov	r1, fp
 8002fee:	f7fd fa73 	bl	80004d8 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4640      	mov	r0, r8
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	f7fd f8b7 	bl	800016c <__adddf3>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003006:	f007 fdf5 	bl	800abf4 <atan2>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4620      	mov	r0, r4
 8003010:	4629      	mov	r1, r5
 8003012:	f7fd f8a9 	bl	8000168 <__aeabi_dsub>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003020:	1d1c      	adds	r4, r3, #4
 8003022:	f7fd fd51 	bl	8000ac8 <__aeabi_d2f>
 8003026:	4603      	mov	r3, r0
 8003028:	6023      	str	r3, [r4, #0]
}
 800302a:	bf00      	nop
 800302c:	3730      	adds	r7, #48	; 0x30
 800302e:	46bd      	mov	sp, r7
 8003030:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003034:	bf800000 	.word	0xbf800000

08003038 <roto_translation>:
					  float phi,
					  float theta,
					  float* T,
					  float* vec,
					  float* res)
{
 8003038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	6178      	str	r0, [r7, #20]
 8003042:	6139      	str	r1, [r7, #16]
 8003044:	60fa      	str	r2, [r7, #12]
 8003046:	60bb      	str	r3, [r7, #8]
	res[0] = vec[2]*sin(phi) + vec[0]*cos(phi)*cos(psi) - vec[1]*cos(phi)*sin(psi) + T[0];
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	3308      	adds	r3, #8
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd f9ea 	bl	8000428 <__aeabi_f2d>
 8003054:	4604      	mov	r4, r0
 8003056:	460d      	mov	r5, r1
 8003058:	6938      	ldr	r0, [r7, #16]
 800305a:	f7fd f9e5 	bl	8000428 <__aeabi_f2d>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4610      	mov	r0, r2
 8003064:	4619      	mov	r1, r3
 8003066:	f007 fd7f 	bl	800ab68 <sin>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd fa31 	bl	80004d8 <__aeabi_dmul>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4690      	mov	r8, r2
 800307c:	4699      	mov	r9, r3
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd f9d0 	bl	8000428 <__aeabi_f2d>
 8003088:	4604      	mov	r4, r0
 800308a:	460d      	mov	r5, r1
 800308c:	6938      	ldr	r0, [r7, #16]
 800308e:	f7fd f9cb 	bl	8000428 <__aeabi_f2d>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	f007 fcd7 	bl	800aa4c <cos>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f7fd fa17 	bl	80004d8 <__aeabi_dmul>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	461d      	mov	r5, r3
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7fd f9b8 	bl	8000428 <__aeabi_f2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f007 fcc4 	bl	800aa4c <cos>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4620      	mov	r0, r4
 80030ca:	4629      	mov	r1, r5
 80030cc:	f7fd fa04 	bl	80004d8 <__aeabi_dmul>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4640      	mov	r0, r8
 80030d6:	4649      	mov	r1, r9
 80030d8:	f7fd f848 	bl	800016c <__adddf3>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4690      	mov	r8, r2
 80030e2:	4699      	mov	r9, r3
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	3304      	adds	r3, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd f99c 	bl	8000428 <__aeabi_f2d>
 80030f0:	4604      	mov	r4, r0
 80030f2:	460d      	mov	r5, r1
 80030f4:	6938      	ldr	r0, [r7, #16]
 80030f6:	f7fd f997 	bl	8000428 <__aeabi_f2d>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	f007 fca3 	bl	800aa4c <cos>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f7fd f9e3 	bl	80004d8 <__aeabi_dmul>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4614      	mov	r4, r2
 8003118:	461d      	mov	r5, r3
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f7fd f984 	bl	8000428 <__aeabi_f2d>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f007 fd1e 	bl	800ab68 <sin>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4620      	mov	r0, r4
 8003132:	4629      	mov	r1, r5
 8003134:	f7fd f9d0 	bl	80004d8 <__aeabi_dmul>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4640      	mov	r0, r8
 800313e:	4649      	mov	r1, r9
 8003140:	f7fd f812 	bl	8000168 <__aeabi_dsub>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4614      	mov	r4, r2
 800314a:	461d      	mov	r5, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd f969 	bl	8000428 <__aeabi_f2d>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4620      	mov	r0, r4
 800315c:	4629      	mov	r1, r5
 800315e:	f7fd f805 	bl	800016c <__adddf3>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	f7fd fcad 	bl	8000ac8 <__aeabi_d2f>
 800316e:	4602      	mov	r2, r0
 8003170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003172:	601a      	str	r2, [r3, #0]
	res[1] = vec[0]*(cos(theta)*sin(psi) + cos(psi)*sin(phi)*sin(theta)) + vec[1]*(cos(psi)*cos(theta) - sin(phi)*sin(psi)*sin(theta)) - vec[2]*cos(phi)*sin(theta) + T[1];
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f955 	bl	8000428 <__aeabi_f2d>
 800317e:	4604      	mov	r4, r0
 8003180:	460d      	mov	r5, r1
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7fd f950 	bl	8000428 <__aeabi_f2d>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f007 fc5c 	bl	800aa4c <cos>
 8003194:	4680      	mov	r8, r0
 8003196:	4689      	mov	r9, r1
 8003198:	6978      	ldr	r0, [r7, #20]
 800319a:	f7fd f945 	bl	8000428 <__aeabi_f2d>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f007 fcdf 	bl	800ab68 <sin>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4640      	mov	r0, r8
 80031b0:	4649      	mov	r1, r9
 80031b2:	f7fd f991 	bl	80004d8 <__aeabi_dmul>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4692      	mov	sl, r2
 80031bc:	469b      	mov	fp, r3
 80031be:	6978      	ldr	r0, [r7, #20]
 80031c0:	f7fd f932 	bl	8000428 <__aeabi_f2d>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	f007 fc3e 	bl	800aa4c <cos>
 80031d0:	4680      	mov	r8, r0
 80031d2:	4689      	mov	r9, r1
 80031d4:	6938      	ldr	r0, [r7, #16]
 80031d6:	f7fd f927 	bl	8000428 <__aeabi_f2d>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f007 fcc1 	bl	800ab68 <sin>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4640      	mov	r0, r8
 80031ec:	4649      	mov	r1, r9
 80031ee:	f7fd f973 	bl	80004d8 <__aeabi_dmul>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4690      	mov	r8, r2
 80031f8:	4699      	mov	r9, r3
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7fd f914 	bl	8000428 <__aeabi_f2d>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4610      	mov	r0, r2
 8003206:	4619      	mov	r1, r3
 8003208:	f007 fcae 	bl	800ab68 <sin>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4640      	mov	r0, r8
 8003212:	4649      	mov	r1, r9
 8003214:	f7fd f960 	bl	80004d8 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4650      	mov	r0, sl
 800321e:	4659      	mov	r1, fp
 8003220:	f7fc ffa4 	bl	800016c <__adddf3>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4620      	mov	r0, r4
 800322a:	4629      	mov	r1, r5
 800322c:	f7fd f954 	bl	80004d8 <__aeabi_dmul>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4692      	mov	sl, r2
 8003236:	469b      	mov	fp, r3
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	3304      	adds	r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd f8f2 	bl	8000428 <__aeabi_f2d>
 8003244:	4604      	mov	r4, r0
 8003246:	460d      	mov	r5, r1
 8003248:	6978      	ldr	r0, [r7, #20]
 800324a:	f7fd f8ed 	bl	8000428 <__aeabi_f2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	f007 fbf9 	bl	800aa4c <cos>
 800325a:	4680      	mov	r8, r0
 800325c:	4689      	mov	r9, r1
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7fd f8e2 	bl	8000428 <__aeabi_f2d>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f007 fbee 	bl	800aa4c <cos>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4640      	mov	r0, r8
 8003276:	4649      	mov	r1, r9
 8003278:	f7fd f92e 	bl	80004d8 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	e9c7 2300 	strd	r2, r3, [r7]
 8003284:	6938      	ldr	r0, [r7, #16]
 8003286:	f7fd f8cf 	bl	8000428 <__aeabi_f2d>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f007 fc69 	bl	800ab68 <sin>
 8003296:	4680      	mov	r8, r0
 8003298:	4689      	mov	r9, r1
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f7fd f8c4 	bl	8000428 <__aeabi_f2d>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	f007 fc5e 	bl	800ab68 <sin>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4640      	mov	r0, r8
 80032b2:	4649      	mov	r1, r9
 80032b4:	f7fd f910 	bl	80004d8 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4690      	mov	r8, r2
 80032be:	4699      	mov	r9, r3
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7fd f8b1 	bl	8000428 <__aeabi_f2d>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	f007 fc4b 	bl	800ab68 <sin>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4640      	mov	r0, r8
 80032d8:	4649      	mov	r1, r9
 80032da:	f7fd f8fd 	bl	80004d8 <__aeabi_dmul>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e6:	f7fc ff3f 	bl	8000168 <__aeabi_dsub>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4620      	mov	r0, r4
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7fd f8f1 	bl	80004d8 <__aeabi_dmul>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4650      	mov	r0, sl
 80032fc:	4659      	mov	r1, fp
 80032fe:	f7fc ff35 	bl	800016c <__adddf3>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4690      	mov	r8, r2
 8003308:	4699      	mov	r9, r3
 800330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330c:	3308      	adds	r3, #8
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f889 	bl	8000428 <__aeabi_f2d>
 8003316:	4604      	mov	r4, r0
 8003318:	460d      	mov	r5, r1
 800331a:	6938      	ldr	r0, [r7, #16]
 800331c:	f7fd f884 	bl	8000428 <__aeabi_f2d>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4610      	mov	r0, r2
 8003326:	4619      	mov	r1, r3
 8003328:	f007 fb90 	bl	800aa4c <cos>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4620      	mov	r0, r4
 8003332:	4629      	mov	r1, r5
 8003334:	f7fd f8d0 	bl	80004d8 <__aeabi_dmul>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7fd f871 	bl	8000428 <__aeabi_f2d>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	f007 fc0b 	bl	800ab68 <sin>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4620      	mov	r0, r4
 8003358:	4629      	mov	r1, r5
 800335a:	f7fd f8bd 	bl	80004d8 <__aeabi_dmul>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4640      	mov	r0, r8
 8003364:	4649      	mov	r1, r9
 8003366:	f7fc feff 	bl	8000168 <__aeabi_dsub>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4614      	mov	r4, r2
 8003370:	461d      	mov	r5, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3304      	adds	r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f855 	bl	8000428 <__aeabi_f2d>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fc fef1 	bl	800016c <__adddf3>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003394:	1d1c      	adds	r4, r3, #4
 8003396:	f7fd fb97 	bl	8000ac8 <__aeabi_d2f>
 800339a:	4603      	mov	r3, r0
 800339c:	6023      	str	r3, [r4, #0]
	res[2] = vec[0]*(sin(psi)*sin(theta) - cos(psi)*cos(theta)*sin(phi)) + vec[1]*(cos(psi)*sin(theta) + cos(theta)*sin(phi)*sin(psi)) + vec[2]*cos(phi)*cos(theta) + T[2];
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd f840 	bl	8000428 <__aeabi_f2d>
 80033a8:	4604      	mov	r4, r0
 80033aa:	460d      	mov	r5, r1
 80033ac:	6978      	ldr	r0, [r7, #20]
 80033ae:	f7fd f83b 	bl	8000428 <__aeabi_f2d>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	f007 fbd5 	bl	800ab68 <sin>
 80033be:	4680      	mov	r8, r0
 80033c0:	4689      	mov	r9, r1
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f7fd f830 	bl	8000428 <__aeabi_f2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	f007 fbca 	bl	800ab68 <sin>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4640      	mov	r0, r8
 80033da:	4649      	mov	r1, r9
 80033dc:	f7fd f87c 	bl	80004d8 <__aeabi_dmul>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4692      	mov	sl, r2
 80033e6:	469b      	mov	fp, r3
 80033e8:	6978      	ldr	r0, [r7, #20]
 80033ea:	f7fd f81d 	bl	8000428 <__aeabi_f2d>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	f007 fb29 	bl	800aa4c <cos>
 80033fa:	4680      	mov	r8, r0
 80033fc:	4689      	mov	r9, r1
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7fd f812 	bl	8000428 <__aeabi_f2d>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	f007 fb1e 	bl	800aa4c <cos>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4640      	mov	r0, r8
 8003416:	4649      	mov	r1, r9
 8003418:	f7fd f85e 	bl	80004d8 <__aeabi_dmul>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4690      	mov	r8, r2
 8003422:	4699      	mov	r9, r3
 8003424:	6938      	ldr	r0, [r7, #16]
 8003426:	f7fc ffff 	bl	8000428 <__aeabi_f2d>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	f007 fb99 	bl	800ab68 <sin>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4640      	mov	r0, r8
 800343c:	4649      	mov	r1, r9
 800343e:	f7fd f84b 	bl	80004d8 <__aeabi_dmul>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4650      	mov	r0, sl
 8003448:	4659      	mov	r1, fp
 800344a:	f7fc fe8d 	bl	8000168 <__aeabi_dsub>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4620      	mov	r0, r4
 8003454:	4629      	mov	r1, r5
 8003456:	f7fd f83f 	bl	80004d8 <__aeabi_dmul>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4692      	mov	sl, r2
 8003460:	469b      	mov	fp, r3
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	3304      	adds	r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fc ffdd 	bl	8000428 <__aeabi_f2d>
 800346e:	4604      	mov	r4, r0
 8003470:	460d      	mov	r5, r1
 8003472:	6978      	ldr	r0, [r7, #20]
 8003474:	f7fc ffd8 	bl	8000428 <__aeabi_f2d>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	f007 fae4 	bl	800aa4c <cos>
 8003484:	4680      	mov	r8, r0
 8003486:	4689      	mov	r9, r1
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7fc ffcd 	bl	8000428 <__aeabi_f2d>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	f007 fb67 	bl	800ab68 <sin>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4640      	mov	r0, r8
 80034a0:	4649      	mov	r1, r9
 80034a2:	f7fd f819 	bl	80004d8 <__aeabi_dmul>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	e9c7 2300 	strd	r2, r3, [r7]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7fc ffba 	bl	8000428 <__aeabi_f2d>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	f007 fac6 	bl	800aa4c <cos>
 80034c0:	4680      	mov	r8, r0
 80034c2:	4689      	mov	r9, r1
 80034c4:	6938      	ldr	r0, [r7, #16]
 80034c6:	f7fc ffaf 	bl	8000428 <__aeabi_f2d>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	f007 fb49 	bl	800ab68 <sin>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4640      	mov	r0, r8
 80034dc:	4649      	mov	r1, r9
 80034de:	f7fc fffb 	bl	80004d8 <__aeabi_dmul>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4690      	mov	r8, r2
 80034e8:	4699      	mov	r9, r3
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f7fc ff9c 	bl	8000428 <__aeabi_f2d>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f007 fb36 	bl	800ab68 <sin>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4640      	mov	r0, r8
 8003502:	4649      	mov	r1, r9
 8003504:	f7fc ffe8 	bl	80004d8 <__aeabi_dmul>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003510:	f7fc fe2c 	bl	800016c <__adddf3>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4620      	mov	r0, r4
 800351a:	4629      	mov	r1, r5
 800351c:	f7fc ffdc 	bl	80004d8 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4650      	mov	r0, sl
 8003526:	4659      	mov	r1, fp
 8003528:	f7fc fe20 	bl	800016c <__adddf3>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4690      	mov	r8, r2
 8003532:	4699      	mov	r9, r3
 8003534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003536:	3308      	adds	r3, #8
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fc ff74 	bl	8000428 <__aeabi_f2d>
 8003540:	4604      	mov	r4, r0
 8003542:	460d      	mov	r5, r1
 8003544:	6938      	ldr	r0, [r7, #16]
 8003546:	f7fc ff6f 	bl	8000428 <__aeabi_f2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	f007 fa7b 	bl	800aa4c <cos>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4620      	mov	r0, r4
 800355c:	4629      	mov	r1, r5
 800355e:	f7fc ffbb 	bl	80004d8 <__aeabi_dmul>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4614      	mov	r4, r2
 8003568:	461d      	mov	r5, r3
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7fc ff5c 	bl	8000428 <__aeabi_f2d>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	f007 fa68 	bl	800aa4c <cos>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	f7fc ffa8 	bl	80004d8 <__aeabi_dmul>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4640      	mov	r0, r8
 800358e:	4649      	mov	r1, r9
 8003590:	f7fc fdec 	bl	800016c <__adddf3>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4614      	mov	r4, r2
 800359a:	461d      	mov	r5, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	3308      	adds	r3, #8
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fc ff40 	bl	8000428 <__aeabi_f2d>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4620      	mov	r0, r4
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7fc fddc 	bl	800016c <__adddf3>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035be:	f103 0408 	add.w	r4, r3, #8
 80035c2:	f7fd fa81 	bl	8000ac8 <__aeabi_d2f>
 80035c6:	4603      	mov	r3, r0
 80035c8:	6023      	str	r3, [r4, #0]
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035d4 <subtract>:

void subtract(float* v_1, float* v_2, float* res)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
	res[0] = v_1[0] - v_2[0];
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f7fd fac0 	bl	8000b70 <__aeabi_fsub>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
	res[1] = v_1[1] - v_2[1];
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3304      	adds	r3, #4
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3304      	adds	r3, #4
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1d1c      	adds	r4, r3, #4
 8003608:	4610      	mov	r0, r2
 800360a:	f7fd fab1 	bl	8000b70 <__aeabi_fsub>
 800360e:	4603      	mov	r3, r0
 8003610:	6023      	str	r3, [r4, #0]
	res[2] = v_1[2] - v_2[2];
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3308      	adds	r3, #8
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	3308      	adds	r3, #8
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f103 0408 	add.w	r4, r3, #8
 8003624:	4610      	mov	r0, r2
 8003626:	f7fd faa3 	bl	8000b70 <__aeabi_fsub>
 800362a:	4603      	mov	r3, r0
 800362c:	6023      	str	r3, [r4, #0]
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bd90      	pop	{r4, r7, pc}

08003636 <MPU6050_Init>:

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b088      	sub	sp, #32
 800363a:	af04      	add	r7, sp, #16
 800363c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800363e:	2364      	movs	r3, #100	; 0x64
 8003640:	9302      	str	r3, [sp, #8]
 8003642:	2301      	movs	r3, #1
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	f107 030f 	add.w	r3, r7, #15
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2301      	movs	r3, #1
 800364e:	2275      	movs	r2, #117	; 0x75
 8003650:	21d0      	movs	r1, #208	; 0xd0
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f001 fd88 	bl	8005168 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b68      	cmp	r3, #104	; 0x68
 800365c:	d13d      	bne.n	80036da <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003662:	2364      	movs	r3, #100	; 0x64
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	2301      	movs	r3, #1
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	f107 030e 	add.w	r3, r7, #14
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2301      	movs	r3, #1
 8003672:	226b      	movs	r2, #107	; 0x6b
 8003674:	21d0      	movs	r1, #208	; 0xd0
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f001 fc7c 	bl	8004f74 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800367c:	2307      	movs	r3, #7
 800367e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8003680:	2364      	movs	r3, #100	; 0x64
 8003682:	9302      	str	r3, [sp, #8]
 8003684:	2301      	movs	r3, #1
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	f107 030e 	add.w	r3, r7, #14
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2301      	movs	r3, #1
 8003690:	2219      	movs	r2, #25
 8003692:	21d0      	movs	r1, #208	; 0xd0
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f001 fc6d 	bl	8004f74 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800369a:	2300      	movs	r3, #0
 800369c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800369e:	2364      	movs	r3, #100	; 0x64
 80036a0:	9302      	str	r3, [sp, #8]
 80036a2:	2301      	movs	r3, #1
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	f107 030e 	add.w	r3, r7, #14
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2301      	movs	r3, #1
 80036ae:	221c      	movs	r2, #28
 80036b0:	21d0      	movs	r1, #208	; 0xd0
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f001 fc5e 	bl	8004f74 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80036bc:	2364      	movs	r3, #100	; 0x64
 80036be:	9302      	str	r3, [sp, #8]
 80036c0:	2301      	movs	r3, #1
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	f107 030e 	add.w	r3, r7, #14
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	2301      	movs	r3, #1
 80036cc:	221b      	movs	r2, #27
 80036ce:	21d0      	movs	r1, #208	; 0xd0
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f001 fc4f 	bl	8004f74 <HAL_I2C_Mem_Write>
        return 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <MPU6050_Init+0xa6>
    }
    return 1;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	0000      	movs	r0, r0
	...

080036e8 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80036e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ec:	b094      	sub	sp, #80	; 0x50
 80036ee:	af04      	add	r7, sp, #16
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80036f4:	2364      	movs	r3, #100	; 0x64
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	230e      	movs	r3, #14
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	f107 0308 	add.w	r3, r7, #8
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2301      	movs	r3, #1
 8003704:	223b      	movs	r2, #59	; 0x3b
 8003706:	21d0      	movs	r1, #208	; 0xd0
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f001 fd2d 	bl	8005168 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800370e:	7a3b      	ldrb	r3, [r7, #8]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	b21a      	sxth	r2, r3
 8003714:	7a7b      	ldrb	r3, [r7, #9]
 8003716:	b21b      	sxth	r3, r3
 8003718:	4313      	orrs	r3, r2
 800371a:	b21a      	sxth	r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003720:	7abb      	ldrb	r3, [r7, #10]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	b21a      	sxth	r2, r3
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	b21b      	sxth	r3, r3
 800372a:	4313      	orrs	r3, r2
 800372c:	b21a      	sxth	r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003732:	7b3b      	ldrb	r3, [r7, #12]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	b21a      	sxth	r2, r3
 8003738:	7b7b      	ldrb	r3, [r7, #13]
 800373a:	b21b      	sxth	r3, r3
 800373c:	4313      	orrs	r3, r2
 800373e:	b21a      	sxth	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8003744:	7bbb      	ldrb	r3, [r7, #14]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	b21a      	sxth	r2, r3
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	b21b      	sxth	r3, r3
 800374e:	4313      	orrs	r3, r2
 8003750:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8003752:	7c3b      	ldrb	r3, [r7, #16]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	b21a      	sxth	r2, r3
 8003758:	7c7b      	ldrb	r3, [r7, #17]
 800375a:	b21b      	sxth	r3, r3
 800375c:	4313      	orrs	r3, r2
 800375e:	b21a      	sxth	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8003764:	7cbb      	ldrb	r3, [r7, #18]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	b21a      	sxth	r2, r3
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	b21b      	sxth	r3, r3
 800376e:	4313      	orrs	r3, r2
 8003770:	b21a      	sxth	r2, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003776:	7d3b      	ldrb	r3, [r7, #20]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	b21a      	sxth	r2, r3
 800377c:	7d7b      	ldrb	r3, [r7, #21]
 800377e:	b21b      	sxth	r3, r3
 8003780:	4313      	orrs	r3, r2
 8003782:	b21a      	sxth	r2, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc fe38 	bl	8000404 <__aeabi_i2d>
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	4bb7      	ldr	r3, [pc, #732]	; (8003a78 <MPU6050_Read_All+0x390>)
 800379a:	f7fc ffc7 	bl	800072c <__aeabi_ddiv>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	6839      	ldr	r1, [r7, #0]
 80037a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc fe28 	bl	8000404 <__aeabi_i2d>
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	4baf      	ldr	r3, [pc, #700]	; (8003a78 <MPU6050_Read_All+0x390>)
 80037ba:	f7fc ffb7 	bl	800072c <__aeabi_ddiv>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	6839      	ldr	r1, [r7, #0]
 80037c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fc fe18 	bl	8000404 <__aeabi_i2d>
 80037d4:	a3a2      	add	r3, pc, #648	; (adr r3, 8003a60 <MPU6050_Read_All+0x378>)
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f7fc ffa7 	bl	800072c <__aeabi_ddiv>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	6839      	ldr	r1, [r7, #0]
 80037e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80037e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fd fa75 	bl	8000cdc <__aeabi_i2f>
 80037f2:	4603      	mov	r3, r0
 80037f4:	49a1      	ldr	r1, [pc, #644]	; (8003a7c <MPU6050_Read_All+0x394>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fb78 	bl	8000eec <__aeabi_fdiv>
 80037fc:	4603      	mov	r3, r0
 80037fe:	49a0      	ldr	r1, [pc, #640]	; (8003a80 <MPU6050_Read_All+0x398>)
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd f9b7 	bl	8000b74 <__addsf3>
 8003806:	4603      	mov	r3, r0
 8003808:	461a      	mov	r2, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fc fdf5 	bl	8000404 <__aeabi_i2d>
 800381a:	a393      	add	r3, pc, #588	; (adr r3, 8003a68 <MPU6050_Read_All+0x380>)
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	f7fc ff84 	bl	800072c <__aeabi_ddiv>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003834:	4618      	mov	r0, r3
 8003836:	f7fc fde5 	bl	8000404 <__aeabi_i2d>
 800383a:	a38b      	add	r3, pc, #556	; (adr r3, 8003a68 <MPU6050_Read_All+0x380>)
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f7fc ff74 	bl	800072c <__aeabi_ddiv>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	6839      	ldr	r1, [r7, #0]
 800384a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003854:	4618      	mov	r0, r3
 8003856:	f7fc fdd5 	bl	8000404 <__aeabi_i2d>
 800385a:	a383      	add	r3, pc, #524	; (adr r3, 8003a68 <MPU6050_Read_All+0x380>)
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f7fc ff64 	bl	800072c <__aeabi_ddiv>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800386e:	f000 fde1 	bl	8004434 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	4b83      	ldr	r3, [pc, #524]	; (8003a84 <MPU6050_Read_All+0x39c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fdb2 	bl	80003e4 <__aeabi_ui2d>
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	4b80      	ldr	r3, [pc, #512]	; (8003a88 <MPU6050_Read_All+0x3a0>)
 8003886:	f7fc ff51 	bl	800072c <__aeabi_ddiv>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8003892:	f000 fdcf 	bl	8004434 <HAL_GetTick>
 8003896:	4603      	mov	r3, r0
 8003898:	4a7a      	ldr	r2, [pc, #488]	; (8003a84 <MPU6050_Read_All+0x39c>)
 800389a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a2:	461a      	mov	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038aa:	fb03 f202 	mul.w	r2, r3, r2
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038b4:	4619      	mov	r1, r3
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038bc:	fb03 f301 	mul.w	r3, r3, r1
 80038c0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fd9e 	bl	8000404 <__aeabi_i2d>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f007 f992 	bl	800abf8 <sqrt>
 80038d4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80038e4:	f7fd f860 	bl	80009a8 <__aeabi_dcmpeq>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d119      	bne.n	8003922 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fc fd85 	bl	8000404 <__aeabi_i2d>
 80038fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038fe:	f7fc ff15 	bl	800072c <__aeabi_ddiv>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	f006 ff15 	bl	800a738 <atan>
 800390e:	a358      	add	r3, pc, #352	; (adr r3, 8003a70 <MPU6050_Read_All+0x388>)
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	f7fc fde0 	bl	80004d8 <__aeabi_dmul>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003920:	e005      	b.n	800392e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003934:	425b      	negs	r3, r3
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fd64 	bl	8000404 <__aeabi_i2d>
 800393c:	4682      	mov	sl, r0
 800393e:	468b      	mov	fp, r1
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fc fd5c 	bl	8000404 <__aeabi_i2d>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4650      	mov	r0, sl
 8003952:	4659      	mov	r1, fp
 8003954:	f007 f94e 	bl	800abf4 <atan2>
 8003958:	a345      	add	r3, pc, #276	; (adr r3, 8003a70 <MPU6050_Read_All+0x388>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f7fc fdbb 	bl	80004d8 <__aeabi_dmul>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <MPU6050_Read_All+0x3a4>)
 8003970:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003974:	f7fd f822 	bl	80009bc <__aeabi_dcmplt>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <MPU6050_Read_All+0x2ac>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <MPU6050_Read_All+0x3a8>)
 800398a:	f7fd f835 	bl	80009f8 <__aeabi_dcmpgt>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d114      	bne.n	80039be <MPU6050_Read_All+0x2d6>
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <MPU6050_Read_All+0x3a8>)
 800399a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800399e:	f7fd f82b 	bl	80009f8 <__aeabi_dcmpgt>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <MPU6050_Read_All+0x2ec>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <MPU6050_Read_All+0x3a4>)
 80039b4:	f7fd f802 	bl	80009bc <__aeabi_dcmplt>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 80039be:	4935      	ldr	r1, [pc, #212]	; (8003a94 <MPU6050_Read_All+0x3ac>)
 80039c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80039d2:	e012      	b.n	80039fa <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80039da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039e2:	e9cd 2300 	strd	r2, r3, [sp]
 80039e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ea:	482a      	ldr	r0, [pc, #168]	; (8003a94 <MPU6050_Read_All+0x3ac>)
 80039ec:	f000 f856 	bl	8003a9c <Kalman_getAngle>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	6839      	ldr	r1, [r7, #0]
 80039f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003a00:	4690      	mov	r8, r2
 8003a02:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <MPU6050_Read_All+0x3a8>)
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	4649      	mov	r1, r9
 8003a10:	f7fc fff2 	bl	80009f8 <__aeabi_dcmpgt>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003a20:	4614      	mov	r4, r2
 8003a22:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003a32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a3a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a42:	4815      	ldr	r0, [pc, #84]	; (8003a98 <MPU6050_Read_All+0x3b0>)
 8003a44:	f000 f82a 	bl	8003a9c <Kalman_getAngle>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	6839      	ldr	r1, [r7, #0]
 8003a4e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8003a52:	bf00      	nop
 8003a54:	3740      	adds	r7, #64	; 0x40
 8003a56:	46bd      	mov	sp, r7
 8003a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a5c:	f3af 8000 	nop.w
 8003a60:	00000000 	.word	0x00000000
 8003a64:	40cc2900 	.word	0x40cc2900
 8003a68:	00000000 	.word	0x00000000
 8003a6c:	40606000 	.word	0x40606000
 8003a70:	1a63c1f8 	.word	0x1a63c1f8
 8003a74:	404ca5dc 	.word	0x404ca5dc
 8003a78:	40d00000 	.word	0x40d00000
 8003a7c:	43aa0000 	.word	0x43aa0000
 8003a80:	42121eb8 	.word	0x42121eb8
 8003a84:	200002ac 	.word	0x200002ac
 8003a88:	408f4000 	.word	0x408f4000
 8003a8c:	c0568000 	.word	0xc0568000
 8003a90:	40568000 	.word	0x40568000
 8003a94:	20000048 	.word	0x20000048
 8003a98:	20000000 	.word	0x20000000

08003a9c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8003a9c:	b5b0      	push	{r4, r5, r7, lr}
 8003a9e:	b092      	sub	sp, #72	; 0x48
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003aae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ab2:	f7fc fb59 	bl	8000168 <__aeabi_dsub>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003ac4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ac8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003acc:	f7fc fd04 	bl	80004d8 <__aeabi_dmul>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc fb48 	bl	800016c <__adddf3>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003af2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003af6:	f7fc fcef 	bl	80004d8 <__aeabi_dmul>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003b08:	f7fc fb2e 	bl	8000168 <__aeabi_dsub>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003b1a:	f7fc fb25 	bl	8000168 <__aeabi_dsub>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4610      	mov	r0, r2
 8003b24:	4619      	mov	r1, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f7fc fb1e 	bl	800016c <__adddf3>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003b3c:	f7fc fccc 	bl	80004d8 <__aeabi_dmul>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4620      	mov	r0, r4
 8003b46:	4629      	mov	r1, r5
 8003b48:	f7fc fb10 	bl	800016c <__adddf3>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	68f9      	ldr	r1, [r7, #12]
 8003b52:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003b62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003b66:	f7fc fcb7 	bl	80004d8 <__aeabi_dmul>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4620      	mov	r0, r4
 8003b70:	4629      	mov	r1, r5
 8003b72:	f7fc faf9 	bl	8000168 <__aeabi_dsub>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003b8c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003b90:	f7fc fca2 	bl	80004d8 <__aeabi_dmul>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4620      	mov	r0, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	f7fc fae4 	bl	8000168 <__aeabi_dsub>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	68f9      	ldr	r1, [r7, #12]
 8003ba6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003bb6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003bba:	f7fc fc8d 	bl	80004d8 <__aeabi_dmul>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	f7fc fad1 	bl	800016c <__adddf3>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003be0:	f7fc fac4 	bl	800016c <__adddf3>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003bf2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bf6:	f7fc fd99 	bl	800072c <__aeabi_ddiv>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c0c:	f7fc fd8e 	bl	800072c <__aeabi_ddiv>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c22:	f7fc faa1 	bl	8000168 <__aeabi_dsub>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003c34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c3c:	f7fc fc4c 	bl	80004d8 <__aeabi_dmul>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4620      	mov	r0, r4
 8003c46:	4629      	mov	r1, r5
 8003c48:	f7fc fa90 	bl	800016c <__adddf3>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	68f9      	ldr	r1, [r7, #12]
 8003c52:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias  += K[1] * y;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003c5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c64:	f7fc fc38 	bl	80004d8 <__aeabi_dmul>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	4629      	mov	r1, r5
 8003c70:	f7fc fa7c 	bl	800016c <__adddf3>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	68f9      	ldr	r1, [r7, #12]
 8003c7a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003c84:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003c8e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003c98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ca0:	f7fc fc1a 	bl	80004d8 <__aeabi_dmul>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4620      	mov	r0, r4
 8003caa:	4629      	mov	r1, r5
 8003cac:	f7fc fa5c 	bl	8000168 <__aeabi_dsub>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003cc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cc8:	f7fc fc06 	bl	80004d8 <__aeabi_dmul>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f7fc fa48 	bl	8000168 <__aeabi_dsub>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003ce8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003cec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cf0:	f7fc fbf2 	bl	80004d8 <__aeabi_dmul>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f7fc fa34 	bl	8000168 <__aeabi_dsub>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	68f9      	ldr	r1, [r7, #12]
 8003d06:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003d10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d18:	f7fc fbde 	bl	80004d8 <__aeabi_dmul>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7fc fa20 	bl	8000168 <__aeabi_dsub>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	68f9      	ldr	r1, [r7, #12]
 8003d2e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	3748      	adds	r7, #72	; 0x48
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003d44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, rx_buffer, TRANSMITED_BYTES);
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	4904      	ldr	r1, [pc, #16]	; (8003d60 <HAL_UART_RxCpltCallback+0x1c>)
 8003d50:	4804      	ldr	r0, [pc, #16]	; (8003d64 <HAL_UART_RxCpltCallback+0x20>)
 8003d52:	f003 fa51 	bl	80071f8 <HAL_UART_Receive_IT>
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000090 	.word	0x20000090
 8003d64:	200003dc 	.word	0x200003dc

08003d68 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

	__NOP();
 8003d70:	bf00      	nop

}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d80:	b672      	cpsid	i
}
 8003d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d84:	e7fe      	b.n	8003d84 <Error_Handler+0x8>
	...

08003d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_MspInit+0x5c>)
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <HAL_MspInit+0x5c>)
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	6193      	str	r3, [r2, #24]
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <HAL_MspInit+0x5c>)
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <HAL_MspInit+0x5c>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_MspInit+0x5c>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	61d3      	str	r3, [r2, #28]
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <HAL_MspInit+0x5c>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_MspInit+0x60>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <HAL_MspInit+0x60>)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40010000 	.word	0x40010000

08003dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df4:	f107 0310 	add.w	r3, r7, #16
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <HAL_I2C_MspInit+0x70>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d123      	bne.n	8003e54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <HAL_I2C_MspInit+0x74>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <HAL_I2C_MspInit+0x74>)
 8003e12:	f043 0308 	orr.w	r3, r3, #8
 8003e16:	6193      	str	r3, [r2, #24]
 8003e18:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <HAL_I2C_MspInit+0x74>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e24:	23c0      	movs	r3, #192	; 0xc0
 8003e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e28:	2312      	movs	r3, #18
 8003e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e30:	f107 0310 	add.w	r3, r7, #16
 8003e34:	4619      	mov	r1, r3
 8003e36:	480b      	ldr	r0, [pc, #44]	; (8003e64 <HAL_I2C_MspInit+0x78>)
 8003e38:	f000 fce8 	bl	800480c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <HAL_I2C_MspInit+0x74>)
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <HAL_I2C_MspInit+0x74>)
 8003e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e46:	61d3      	str	r3, [r2, #28]
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_I2C_MspInit+0x74>)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e54:	bf00      	nop
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40005400 	.word	0x40005400
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40010c00 	.word	0x40010c00

08003e68 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <HAL_I2C_MspDeInit+0x38>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10d      	bne.n	8003e96 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_I2C_MspDeInit+0x3c>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <HAL_I2C_MspDeInit+0x3c>)
 8003e80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e84:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003e86:	2140      	movs	r1, #64	; 0x40
 8003e88:	4807      	ldr	r0, [pc, #28]	; (8003ea8 <HAL_I2C_MspDeInit+0x40>)
 8003e8a:	f000 fe43 	bl	8004b14 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003e8e:	2180      	movs	r1, #128	; 0x80
 8003e90:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <HAL_I2C_MspDeInit+0x40>)
 8003e92:	f000 fe3f 	bl	8004b14 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40005400 	.word	0x40005400
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40010c00 	.word	0x40010c00

08003eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_TIM_Base_MspInit+0x7c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_TIM_Base_MspInit+0x80>)
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <HAL_TIM_Base_MspInit+0x80>)
 8003ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ec8:	6193      	str	r3, [r2, #24]
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <HAL_TIM_Base_MspInit+0x80>)
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ed6:	e022      	b.n	8003f1e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d10c      	bne.n	8003efc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <HAL_TIM_Base_MspInit+0x80>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	4a11      	ldr	r2, [pc, #68]	; (8003f2c <HAL_TIM_Base_MspInit+0x80>)
 8003ee8:	f043 0301 	orr.w	r3, r3, #1
 8003eec:	61d3      	str	r3, [r2, #28]
 8003eee:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <HAL_TIM_Base_MspInit+0x80>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]
}
 8003efa:	e010      	b.n	8003f1e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0b      	ldr	r2, [pc, #44]	; (8003f30 <HAL_TIM_Base_MspInit+0x84>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10b      	bne.n	8003f1e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_TIM_Base_MspInit+0x80>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_TIM_Base_MspInit+0x80>)
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	61d3      	str	r3, [r2, #28]
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_TIM_Base_MspInit+0x80>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40000400 	.word	0x40000400

08003f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08c      	sub	sp, #48	; 0x30
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f3c:	f107 031c 	add.w	r3, r7, #28
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a4f      	ldr	r2, [pc, #316]	; (800408c <HAL_TIM_MspPostInit+0x158>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d119      	bne.n	8003f88 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f54:	4b4e      	ldr	r3, [pc, #312]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	4a4d      	ldr	r2, [pc, #308]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	6193      	str	r3, [r2, #24]
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003f6c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f72:	2302      	movs	r3, #2
 8003f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f76:	2302      	movs	r3, #2
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	f107 031c 	add.w	r3, r7, #28
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4844      	ldr	r0, [pc, #272]	; (8004094 <HAL_TIM_MspPostInit+0x160>)
 8003f82:	f000 fc43 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f86:	e07d      	b.n	8004084 <HAL_TIM_MspPostInit+0x150>
  else if(htim->Instance==TIM2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f90:	d143      	bne.n	800401a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	4a3e      	ldr	r2, [pc, #248]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	6193      	str	r3, [r2, #24]
 8003f9e:	4b3c      	ldr	r3, [pc, #240]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	4a38      	ldr	r2, [pc, #224]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8003fb0:	f043 0308 	orr.w	r3, r3, #8
 8003fb4:	6193      	str	r3, [r2, #24]
 8003fb6:	4b36      	ldr	r3, [pc, #216]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fce:	f107 031c 	add.w	r3, r7, #28
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	482f      	ldr	r0, [pc, #188]	; (8004094 <HAL_TIM_MspPostInit+0x160>)
 8003fd6:	f000 fc19 	bl	800480c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe8:	f107 031c 	add.w	r3, r7, #28
 8003fec:	4619      	mov	r1, r3
 8003fee:	482a      	ldr	r0, [pc, #168]	; (8004098 <HAL_TIM_MspPostInit+0x164>)
 8003ff0:	f000 fc0c 	bl	800480c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003ff4:	4b29      	ldr	r3, [pc, #164]	; (800409c <HAL_TIM_MspPostInit+0x168>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004012:	4a22      	ldr	r2, [pc, #136]	; (800409c <HAL_TIM_MspPostInit+0x168>)
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	6053      	str	r3, [r2, #4]
}
 8004018:	e034      	b.n	8004084 <HAL_TIM_MspPostInit+0x150>
  else if(htim->Instance==TIM3)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a20      	ldr	r2, [pc, #128]	; (80040a0 <HAL_TIM_MspPostInit+0x16c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d12f      	bne.n	8004084 <HAL_TIM_MspPostInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6193      	str	r3, [r2, #24]
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 8004042:	f043 0308 	orr.w	r3, r3, #8
 8004046:	6193      	str	r3, [r2, #24]
 8004048:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_TIM_MspPostInit+0x15c>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004054:	23c0      	movs	r3, #192	; 0xc0
 8004056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004058:	2302      	movs	r3, #2
 800405a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2302      	movs	r3, #2
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004060:	f107 031c 	add.w	r3, r7, #28
 8004064:	4619      	mov	r1, r3
 8004066:	480b      	ldr	r0, [pc, #44]	; (8004094 <HAL_TIM_MspPostInit+0x160>)
 8004068:	f000 fbd0 	bl	800480c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800406c:	2303      	movs	r3, #3
 800406e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004074:	2302      	movs	r3, #2
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004078:	f107 031c 	add.w	r3, r7, #28
 800407c:	4619      	mov	r1, r3
 800407e:	4806      	ldr	r0, [pc, #24]	; (8004098 <HAL_TIM_MspPostInit+0x164>)
 8004080:	f000 fbc4 	bl	800480c <HAL_GPIO_Init>
}
 8004084:	bf00      	nop
 8004086:	3730      	adds	r7, #48	; 0x30
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40021000 	.word	0x40021000
 8004094:	40010800 	.word	0x40010800
 8004098:	40010c00 	.word	0x40010c00
 800409c:	40010000 	.word	0x40010000
 80040a0:	40000400 	.word	0x40000400

080040a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ac:	f107 0310 	add.w	r3, r7, #16
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1f      	ldr	r2, [pc, #124]	; (800413c <HAL_UART_MspInit+0x98>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d137      	bne.n	8004134 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040c4:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <HAL_UART_MspInit+0x9c>)
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_UART_MspInit+0x9c>)
 80040ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ce:	61d3      	str	r3, [r2, #28]
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <HAL_UART_MspInit+0x9c>)
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040dc:	4b18      	ldr	r3, [pc, #96]	; (8004140 <HAL_UART_MspInit+0x9c>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	4a17      	ldr	r2, [pc, #92]	; (8004140 <HAL_UART_MspInit+0x9c>)
 80040e2:	f043 0304 	orr.w	r3, r3, #4
 80040e6:	6193      	str	r3, [r2, #24]
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <HAL_UART_MspInit+0x9c>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040f4:	2304      	movs	r3, #4
 80040f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f8:	2302      	movs	r3, #2
 80040fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040fc:	2303      	movs	r3, #3
 80040fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004100:	f107 0310 	add.w	r3, r7, #16
 8004104:	4619      	mov	r1, r3
 8004106:	480f      	ldr	r0, [pc, #60]	; (8004144 <HAL_UART_MspInit+0xa0>)
 8004108:	f000 fb80 	bl	800480c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800410c:	2308      	movs	r3, #8
 800410e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004118:	f107 0310 	add.w	r3, r7, #16
 800411c:	4619      	mov	r1, r3
 800411e:	4809      	ldr	r0, [pc, #36]	; (8004144 <HAL_UART_MspInit+0xa0>)
 8004120:	f000 fb74 	bl	800480c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004124:	2200      	movs	r2, #0
 8004126:	2100      	movs	r1, #0
 8004128:	2026      	movs	r0, #38	; 0x26
 800412a:	f000 fa88 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800412e:	2026      	movs	r0, #38	; 0x26
 8004130:	f000 faa1 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004134:	bf00      	nop
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40004400 	.word	0x40004400
 8004140:	40021000 	.word	0x40021000
 8004144:	40010800 	.word	0x40010800

08004148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800414c:	e7fe      	b.n	800414c <NMI_Handler+0x4>

0800414e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004152:	e7fe      	b.n	8004152 <HardFault_Handler+0x4>

08004154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004158:	e7fe      	b.n	8004158 <MemManage_Handler+0x4>

0800415a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800415e:	e7fe      	b.n	800415e <BusFault_Handler+0x4>

08004160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <UsageFault_Handler+0x4>

08004166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800418e:	f000 f93f 	bl	8004410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800419c:	4802      	ldr	r0, [pc, #8]	; (80041a8 <USART2_IRQHandler+0x10>)
 800419e:	f003 f85b 	bl	8007258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200003dc 	.word	0x200003dc

080041ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
	return 1;
 80041b0:	2301      	movs	r3, #1
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <_kill>:

int _kill(int pid, int sig)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041c4:	f003 fc22 	bl	8007a0c <__errno>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2216      	movs	r2, #22
 80041cc:	601a      	str	r2, [r3, #0]
	return -1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <_exit>:

void _exit (int status)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ffe7 	bl	80041ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80041ec:	e7fe      	b.n	80041ec <_exit+0x12>

080041ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e00a      	b.n	8004216 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004200:	f3af 8000 	nop.w
 8004204:	4601      	mov	r1, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	60ba      	str	r2, [r7, #8]
 800420c:	b2ca      	uxtb	r2, r1
 800420e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	dbf0      	blt.n	8004200 <_read+0x12>
	}

return len;
 800421e:	687b      	ldr	r3, [r7, #4]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e009      	b.n	800424e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	60ba      	str	r2, [r7, #8]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3301      	adds	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	dbf1      	blt.n	800423a <_write+0x12>
	}
	return len;
 8004256:	687b      	ldr	r3, [r7, #4]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_close>:

int _close(int file)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	return -1;
 8004268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004286:	605a      	str	r2, [r3, #4]
	return 0;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <_isatty>:

int _isatty(int file)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	return 1;
 800429c:	2301      	movs	r3, #1
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
	return 0;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042c8:	4a14      	ldr	r2, [pc, #80]	; (800431c <_sbrk+0x5c>)
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <_sbrk+0x60>)
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <_sbrk+0x64>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <_sbrk+0x64>)
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <_sbrk+0x68>)
 80042e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <_sbrk+0x64>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d207      	bcs.n	8004300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f0:	f003 fb8c 	bl	8007a0c <__errno>
 80042f4:	4603      	mov	r3, r0
 80042f6:	220c      	movs	r2, #12
 80042f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042fe:	e009      	b.n	8004314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <_sbrk+0x64>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004306:	4b07      	ldr	r3, [pc, #28]	; (8004324 <_sbrk+0x64>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	4a05      	ldr	r2, [pc, #20]	; (8004324 <_sbrk+0x64>)
 8004310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20005000 	.word	0x20005000
 8004320:	00000400 	.word	0x00000400
 8004324:	200002a0 	.word	0x200002a0
 8004328:	20000438 	.word	0x20000438

0800432c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004338:	480c      	ldr	r0, [pc, #48]	; (800436c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800433a:	490d      	ldr	r1, [pc, #52]	; (8004370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800433c:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800433e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004340:	e002      	b.n	8004348 <LoopCopyDataInit>

08004342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004346:	3304      	adds	r3, #4

08004348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800434a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800434c:	d3f9      	bcc.n	8004342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800434e:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004350:	4c0a      	ldr	r4, [pc, #40]	; (800437c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004354:	e001      	b.n	800435a <LoopFillZerobss>

08004356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004358:	3204      	adds	r2, #4

0800435a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800435a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800435c:	d3fb      	bcc.n	8004356 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800435e:	f7ff ffe5 	bl	800432c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004362:	f003 fb59 	bl	8007a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004366:	f7fc ff0b 	bl	8001180 <main>
  bx lr
 800436a:	4770      	bx	lr
  ldr r0, =_sdata
 800436c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004370:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8004374:	0800c5c0 	.word	0x0800c5c0
  ldr r2, =_sbss
 8004378:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 800437c:	20000434 	.word	0x20000434

08004380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004380:	e7fe      	b.n	8004380 <ADC1_2_IRQHandler>
	...

08004384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <HAL_Init+0x28>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a07      	ldr	r2, [pc, #28]	; (80043ac <HAL_Init+0x28>)
 800438e:	f043 0310 	orr.w	r3, r3, #16
 8004392:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004394:	2003      	movs	r0, #3
 8004396:	f000 f947 	bl	8004628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800439a:	200f      	movs	r0, #15
 800439c:	f000 f808 	bl	80043b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043a0:	f7ff fcf2 	bl	8003d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40022000 	.word	0x40022000

080043b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043b8:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_InitTick+0x54>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_InitTick+0x58>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f95f 	bl	8004692 <HAL_SYSTICK_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e00e      	b.n	80043fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b0f      	cmp	r3, #15
 80043e2:	d80a      	bhi.n	80043fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043e4:	2200      	movs	r2, #0
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043ec:	f000 f927 	bl	800463e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043f0:	4a06      	ldr	r2, [pc, #24]	; (800440c <HAL_InitTick+0x5c>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200000a0 	.word	0x200000a0
 8004408:	200000a8 	.word	0x200000a8
 800440c:	200000a4 	.word	0x200000a4

08004410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_IncTick+0x1c>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_IncTick+0x20>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4413      	add	r3, r2
 8004420:	4a03      	ldr	r2, [pc, #12]	; (8004430 <HAL_IncTick+0x20>)
 8004422:	6013      	str	r3, [r2, #0]
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	200000a8 	.word	0x200000a8
 8004430:	20000420 	.word	0x20000420

08004434 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return uwTick;
 8004438:	4b02      	ldr	r3, [pc, #8]	; (8004444 <HAL_GetTick+0x10>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	20000420 	.word	0x20000420

08004448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004450:	f7ff fff0 	bl	8004434 <HAL_GetTick>
 8004454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004460:	d005      	beq.n	800446e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_Delay+0x44>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800446e:	bf00      	nop
 8004470:	f7ff ffe0 	bl	8004434 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	429a      	cmp	r2, r3
 800447e:	d8f7      	bhi.n	8004470 <HAL_Delay+0x28>
  {
  }
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	200000a8 	.word	0x200000a8

08004490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <__NVIC_SetPriorityGrouping+0x44>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044ac:	4013      	ands	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044c2:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <__NVIC_SetPriorityGrouping+0x44>)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	60d3      	str	r3, [r2, #12]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <__NVIC_GetPriorityGrouping+0x18>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	0a1b      	lsrs	r3, r3, #8
 80044e2:	f003 0307 	and.w	r3, r3, #7
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	2b00      	cmp	r3, #0
 8004504:	db0b      	blt.n	800451e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	f003 021f 	and.w	r2, r3, #31
 800450c:	4906      	ldr	r1, [pc, #24]	; (8004528 <__NVIC_EnableIRQ+0x34>)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	2001      	movs	r0, #1
 8004516:	fa00 f202 	lsl.w	r2, r0, r2
 800451a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	; (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f4:	d301      	bcc.n	80045fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f6:	2301      	movs	r3, #1
 80045f8:	e00f      	b.n	800461a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <SysTick_Config+0x40>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004602:	210f      	movs	r1, #15
 8004604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004608:	f7ff ff90 	bl	800452c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <SysTick_Config+0x40>)
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004612:	4b04      	ldr	r3, [pc, #16]	; (8004624 <SysTick_Config+0x40>)
 8004614:	2207      	movs	r2, #7
 8004616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	e000e010 	.word	0xe000e010

08004628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff2d 	bl	8004490 <__NVIC_SetPriorityGrouping>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004650:	f7ff ff42 	bl	80044d8 <__NVIC_GetPriorityGrouping>
 8004654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	6978      	ldr	r0, [r7, #20]
 800465c:	f7ff ff90 	bl	8004580 <NVIC_EncodePriority>
 8004660:	4602      	mov	r2, r0
 8004662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff5f 	bl	800452c <__NVIC_SetPriority>
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	4603      	mov	r3, r0
 800467e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff35 	bl	80044f4 <__NVIC_EnableIRQ>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff ffa2 	bl	80045e4 <SysTick_Config>
 80046a0:	4603      	mov	r3, r0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d008      	beq.n	80046d2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2204      	movs	r2, #4
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e020      	b.n	8004714 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 020e 	bic.w	r2, r2, #14
 80046e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	2101      	movs	r1, #1
 80046fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004700:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004712:	7bfb      	ldrb	r3, [r7, #15]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
	...

08004720 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004732:	2b02      	cmp	r3, #2
 8004734:	d005      	beq.n	8004742 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2204      	movs	r2, #4
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	e051      	b.n	80047e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 020e 	bic.w	r2, r2, #14
 8004750:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <HAL_DMA_Abort_IT+0xd0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d029      	beq.n	80047c0 <HAL_DMA_Abort_IT+0xa0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <HAL_DMA_Abort_IT+0xd4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_DMA_Abort_IT+0x9c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <HAL_DMA_Abort_IT+0xd8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01a      	beq.n	80047b6 <HAL_DMA_Abort_IT+0x96>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <HAL_DMA_Abort_IT+0xdc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d012      	beq.n	80047b0 <HAL_DMA_Abort_IT+0x90>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <HAL_DMA_Abort_IT+0xe0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00a      	beq.n	80047aa <HAL_DMA_Abort_IT+0x8a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_DMA_Abort_IT+0xe4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d102      	bne.n	80047a4 <HAL_DMA_Abort_IT+0x84>
 800479e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047a2:	e00e      	b.n	80047c2 <HAL_DMA_Abort_IT+0xa2>
 80047a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047a8:	e00b      	b.n	80047c2 <HAL_DMA_Abort_IT+0xa2>
 80047aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047ae:	e008      	b.n	80047c2 <HAL_DMA_Abort_IT+0xa2>
 80047b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047b4:	e005      	b.n	80047c2 <HAL_DMA_Abort_IT+0xa2>
 80047b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047ba:	e002      	b.n	80047c2 <HAL_DMA_Abort_IT+0xa2>
 80047bc:	2310      	movs	r3, #16
 80047be:	e000      	b.n	80047c2 <HAL_DMA_Abort_IT+0xa2>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4a11      	ldr	r2, [pc, #68]	; (8004808 <HAL_DMA_Abort_IT+0xe8>)
 80047c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
    } 
  }
  return status;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40020008 	.word	0x40020008
 80047f4:	4002001c 	.word	0x4002001c
 80047f8:	40020030 	.word	0x40020030
 80047fc:	40020044 	.word	0x40020044
 8004800:	40020058 	.word	0x40020058
 8004804:	4002006c 	.word	0x4002006c
 8004808:	40020000 	.word	0x40020000

0800480c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800480c:	b480      	push	{r7}
 800480e:	b08b      	sub	sp, #44	; 0x2c
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004816:	2300      	movs	r3, #0
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800481a:	2300      	movs	r3, #0
 800481c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800481e:	e169      	b.n	8004af4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004820:	2201      	movs	r2, #1
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	429a      	cmp	r2, r3
 800483a:	f040 8158 	bne.w	8004aee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4a9a      	ldr	r2, [pc, #616]	; (8004aac <HAL_GPIO_Init+0x2a0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d05e      	beq.n	8004906 <HAL_GPIO_Init+0xfa>
 8004848:	4a98      	ldr	r2, [pc, #608]	; (8004aac <HAL_GPIO_Init+0x2a0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d875      	bhi.n	800493a <HAL_GPIO_Init+0x12e>
 800484e:	4a98      	ldr	r2, [pc, #608]	; (8004ab0 <HAL_GPIO_Init+0x2a4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d058      	beq.n	8004906 <HAL_GPIO_Init+0xfa>
 8004854:	4a96      	ldr	r2, [pc, #600]	; (8004ab0 <HAL_GPIO_Init+0x2a4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d86f      	bhi.n	800493a <HAL_GPIO_Init+0x12e>
 800485a:	4a96      	ldr	r2, [pc, #600]	; (8004ab4 <HAL_GPIO_Init+0x2a8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d052      	beq.n	8004906 <HAL_GPIO_Init+0xfa>
 8004860:	4a94      	ldr	r2, [pc, #592]	; (8004ab4 <HAL_GPIO_Init+0x2a8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d869      	bhi.n	800493a <HAL_GPIO_Init+0x12e>
 8004866:	4a94      	ldr	r2, [pc, #592]	; (8004ab8 <HAL_GPIO_Init+0x2ac>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d04c      	beq.n	8004906 <HAL_GPIO_Init+0xfa>
 800486c:	4a92      	ldr	r2, [pc, #584]	; (8004ab8 <HAL_GPIO_Init+0x2ac>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d863      	bhi.n	800493a <HAL_GPIO_Init+0x12e>
 8004872:	4a92      	ldr	r2, [pc, #584]	; (8004abc <HAL_GPIO_Init+0x2b0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d046      	beq.n	8004906 <HAL_GPIO_Init+0xfa>
 8004878:	4a90      	ldr	r2, [pc, #576]	; (8004abc <HAL_GPIO_Init+0x2b0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d85d      	bhi.n	800493a <HAL_GPIO_Init+0x12e>
 800487e:	2b12      	cmp	r3, #18
 8004880:	d82a      	bhi.n	80048d8 <HAL_GPIO_Init+0xcc>
 8004882:	2b12      	cmp	r3, #18
 8004884:	d859      	bhi.n	800493a <HAL_GPIO_Init+0x12e>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <HAL_GPIO_Init+0x80>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	08004907 	.word	0x08004907
 8004890:	080048e1 	.word	0x080048e1
 8004894:	080048f3 	.word	0x080048f3
 8004898:	08004935 	.word	0x08004935
 800489c:	0800493b 	.word	0x0800493b
 80048a0:	0800493b 	.word	0x0800493b
 80048a4:	0800493b 	.word	0x0800493b
 80048a8:	0800493b 	.word	0x0800493b
 80048ac:	0800493b 	.word	0x0800493b
 80048b0:	0800493b 	.word	0x0800493b
 80048b4:	0800493b 	.word	0x0800493b
 80048b8:	0800493b 	.word	0x0800493b
 80048bc:	0800493b 	.word	0x0800493b
 80048c0:	0800493b 	.word	0x0800493b
 80048c4:	0800493b 	.word	0x0800493b
 80048c8:	0800493b 	.word	0x0800493b
 80048cc:	0800493b 	.word	0x0800493b
 80048d0:	080048e9 	.word	0x080048e9
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	4a79      	ldr	r2, [pc, #484]	; (8004ac0 <HAL_GPIO_Init+0x2b4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80048de:	e02c      	b.n	800493a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	623b      	str	r3, [r7, #32]
          break;
 80048e6:	e029      	b.n	800493c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	3304      	adds	r3, #4
 80048ee:	623b      	str	r3, [r7, #32]
          break;
 80048f0:	e024      	b.n	800493c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	3308      	adds	r3, #8
 80048f8:	623b      	str	r3, [r7, #32]
          break;
 80048fa:	e01f      	b.n	800493c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	330c      	adds	r3, #12
 8004902:	623b      	str	r3, [r7, #32]
          break;
 8004904:	e01a      	b.n	800493c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800490e:	2304      	movs	r3, #4
 8004910:	623b      	str	r3, [r7, #32]
          break;
 8004912:	e013      	b.n	800493c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d105      	bne.n	8004928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800491c:	2308      	movs	r3, #8
 800491e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	611a      	str	r2, [r3, #16]
          break;
 8004926:	e009      	b.n	800493c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004928:	2308      	movs	r3, #8
 800492a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	615a      	str	r2, [r3, #20]
          break;
 8004932:	e003      	b.n	800493c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004934:	2300      	movs	r3, #0
 8004936:	623b      	str	r3, [r7, #32]
          break;
 8004938:	e000      	b.n	800493c <HAL_GPIO_Init+0x130>
          break;
 800493a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	2bff      	cmp	r3, #255	; 0xff
 8004940:	d801      	bhi.n	8004946 <HAL_GPIO_Init+0x13a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	e001      	b.n	800494a <HAL_GPIO_Init+0x13e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2bff      	cmp	r3, #255	; 0xff
 8004950:	d802      	bhi.n	8004958 <HAL_GPIO_Init+0x14c>
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	e002      	b.n	800495e <HAL_GPIO_Init+0x152>
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	3b08      	subs	r3, #8
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	210f      	movs	r1, #15
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	fa01 f303 	lsl.w	r3, r1, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	401a      	ands	r2, r3
 8004970:	6a39      	ldr	r1, [r7, #32]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	fa01 f303 	lsl.w	r3, r1, r3
 8004978:	431a      	orrs	r2, r3
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80b1 	beq.w	8004aee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800498c:	4b4d      	ldr	r3, [pc, #308]	; (8004ac4 <HAL_GPIO_Init+0x2b8>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	4a4c      	ldr	r2, [pc, #304]	; (8004ac4 <HAL_GPIO_Init+0x2b8>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	6193      	str	r3, [r2, #24]
 8004998:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <HAL_GPIO_Init+0x2b8>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049a4:	4a48      	ldr	r2, [pc, #288]	; (8004ac8 <HAL_GPIO_Init+0x2bc>)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	089b      	lsrs	r3, r3, #2
 80049aa:	3302      	adds	r3, #2
 80049ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	220f      	movs	r2, #15
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4013      	ands	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a40      	ldr	r2, [pc, #256]	; (8004acc <HAL_GPIO_Init+0x2c0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <HAL_GPIO_Init+0x1ec>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a3f      	ldr	r2, [pc, #252]	; (8004ad0 <HAL_GPIO_Init+0x2c4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00d      	beq.n	80049f4 <HAL_GPIO_Init+0x1e8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3e      	ldr	r2, [pc, #248]	; (8004ad4 <HAL_GPIO_Init+0x2c8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <HAL_GPIO_Init+0x1e4>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a3d      	ldr	r2, [pc, #244]	; (8004ad8 <HAL_GPIO_Init+0x2cc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <HAL_GPIO_Init+0x1e0>
 80049e8:	2303      	movs	r3, #3
 80049ea:	e006      	b.n	80049fa <HAL_GPIO_Init+0x1ee>
 80049ec:	2304      	movs	r3, #4
 80049ee:	e004      	b.n	80049fa <HAL_GPIO_Init+0x1ee>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e002      	b.n	80049fa <HAL_GPIO_Init+0x1ee>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_GPIO_Init+0x1ee>
 80049f8:	2300      	movs	r3, #0
 80049fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fc:	f002 0203 	and.w	r2, r2, #3
 8004a00:	0092      	lsls	r2, r2, #2
 8004a02:	4093      	lsls	r3, r2
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a0a:	492f      	ldr	r1, [pc, #188]	; (8004ac8 <HAL_GPIO_Init+0x2bc>)
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	3302      	adds	r3, #2
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d006      	beq.n	8004a32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a24:	4b2d      	ldr	r3, [pc, #180]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	492c      	ldr	r1, [pc, #176]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]
 8004a30:	e006      	b.n	8004a40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a32:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	4928      	ldr	r1, [pc, #160]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d006      	beq.n	8004a5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a4c:	4b23      	ldr	r3, [pc, #140]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4922      	ldr	r1, [pc, #136]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	604b      	str	r3, [r1, #4]
 8004a58:	e006      	b.n	8004a68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a5a:	4b20      	ldr	r3, [pc, #128]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	491e      	ldr	r1, [pc, #120]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	4918      	ldr	r1, [pc, #96]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]
 8004a80:	e006      	b.n	8004a90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	4914      	ldr	r1, [pc, #80]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d021      	beq.n	8004ae0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	490e      	ldr	r1, [pc, #56]	; (8004adc <HAL_GPIO_Init+0x2d0>)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60cb      	str	r3, [r1, #12]
 8004aa8:	e021      	b.n	8004aee <HAL_GPIO_Init+0x2e2>
 8004aaa:	bf00      	nop
 8004aac:	10320000 	.word	0x10320000
 8004ab0:	10310000 	.word	0x10310000
 8004ab4:	10220000 	.word	0x10220000
 8004ab8:	10210000 	.word	0x10210000
 8004abc:	10120000 	.word	0x10120000
 8004ac0:	10110000 	.word	0x10110000
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40010800 	.word	0x40010800
 8004ad0:	40010c00 	.word	0x40010c00
 8004ad4:	40011000 	.word	0x40011000
 8004ad8:	40011400 	.word	0x40011400
 8004adc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_GPIO_Init+0x304>)
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	4909      	ldr	r1, [pc, #36]	; (8004b10 <HAL_GPIO_Init+0x304>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	3301      	adds	r3, #1
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	fa22 f303 	lsr.w	r3, r2, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f47f ae8e 	bne.w	8004820 <HAL_GPIO_Init+0x14>
  }
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	372c      	adds	r7, #44	; 0x2c
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	40010400 	.word	0x40010400

08004b14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b089      	sub	sp, #36	; 0x24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004b22:	e09a      	b.n	8004c5a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004b24:	2201      	movs	r2, #1
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 808d 	beq.w	8004c54 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8004b3a:	4a4e      	ldr	r2, [pc, #312]	; (8004c74 <HAL_GPIO_DeInit+0x160>)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	3302      	adds	r3, #2
 8004b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b46:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	220f      	movs	r2, #15
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a46      	ldr	r2, [pc, #280]	; (8004c78 <HAL_GPIO_DeInit+0x164>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <HAL_GPIO_DeInit+0x78>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a45      	ldr	r2, [pc, #276]	; (8004c7c <HAL_GPIO_DeInit+0x168>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00d      	beq.n	8004b88 <HAL_GPIO_DeInit+0x74>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a44      	ldr	r2, [pc, #272]	; (8004c80 <HAL_GPIO_DeInit+0x16c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <HAL_GPIO_DeInit+0x70>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a43      	ldr	r2, [pc, #268]	; (8004c84 <HAL_GPIO_DeInit+0x170>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <HAL_GPIO_DeInit+0x6c>
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e006      	b.n	8004b8e <HAL_GPIO_DeInit+0x7a>
 8004b80:	2304      	movs	r3, #4
 8004b82:	e004      	b.n	8004b8e <HAL_GPIO_DeInit+0x7a>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e002      	b.n	8004b8e <HAL_GPIO_DeInit+0x7a>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <HAL_GPIO_DeInit+0x7a>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	f002 0203 	and.w	r2, r2, #3
 8004b94:	0092      	lsls	r2, r2, #2
 8004b96:	4093      	lsls	r3, r2
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d132      	bne.n	8004c04 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004bae:	4a31      	ldr	r2, [pc, #196]	; (8004c74 <HAL_GPIO_DeInit+0x160>)
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	482d      	ldr	r0, [pc, #180]	; (8004c74 <HAL_GPIO_DeInit+0x160>)
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004bcc:	4b2e      	ldr	r3, [pc, #184]	; (8004c88 <HAL_GPIO_DeInit+0x174>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	492c      	ldr	r1, [pc, #176]	; (8004c88 <HAL_GPIO_DeInit+0x174>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004bda:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <HAL_GPIO_DeInit+0x174>)
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	4929      	ldr	r1, [pc, #164]	; (8004c88 <HAL_GPIO_DeInit+0x174>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004be8:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <HAL_GPIO_DeInit+0x174>)
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	4925      	ldr	r1, [pc, #148]	; (8004c88 <HAL_GPIO_DeInit+0x174>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <HAL_GPIO_DeInit+0x174>)
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	4922      	ldr	r1, [pc, #136]	; (8004c88 <HAL_GPIO_DeInit+0x174>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2bff      	cmp	r3, #255	; 0xff
 8004c08:	d801      	bhi.n	8004c0e <HAL_GPIO_DeInit+0xfa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	e001      	b.n	8004c12 <HAL_GPIO_DeInit+0xfe>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3304      	adds	r3, #4
 8004c12:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2bff      	cmp	r3, #255	; 0xff
 8004c18:	d802      	bhi.n	8004c20 <HAL_GPIO_DeInit+0x10c>
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	e002      	b.n	8004c26 <HAL_GPIO_DeInit+0x112>
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	3b08      	subs	r3, #8
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	210f      	movs	r1, #15
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	401a      	ands	r2, r3
 8004c38:	2104      	movs	r1, #4
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c40:	431a      	orrs	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	401a      	ands	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f47f af5e 	bne.w	8004b24 <HAL_GPIO_DeInit+0x10>
  }
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40010800 	.word	0x40010800
 8004c7c:	40010c00 	.word	0x40010c00
 8004c80:	40011000 	.word	0x40011000
 8004c84:	40011400 	.word	0x40011400
 8004c88:	40010400 	.word	0x40010400

08004c8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e12b      	b.n	8004ef6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff f89a 	bl	8003dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2224      	movs	r2, #36	; 0x24
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f001 fbd0 	bl	8006494 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4a81      	ldr	r2, [pc, #516]	; (8004f00 <HAL_I2C_Init+0x274>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d807      	bhi.n	8004d10 <HAL_I2C_Init+0x84>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a80      	ldr	r2, [pc, #512]	; (8004f04 <HAL_I2C_Init+0x278>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bf94      	ite	ls
 8004d08:	2301      	movls	r3, #1
 8004d0a:	2300      	movhi	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	e006      	b.n	8004d1e <HAL_I2C_Init+0x92>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a7d      	ldr	r2, [pc, #500]	; (8004f08 <HAL_I2C_Init+0x27c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	bf94      	ite	ls
 8004d18:	2301      	movls	r3, #1
 8004d1a:	2300      	movhi	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0e7      	b.n	8004ef6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a78      	ldr	r2, [pc, #480]	; (8004f0c <HAL_I2C_Init+0x280>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	0c9b      	lsrs	r3, r3, #18
 8004d30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4a6a      	ldr	r2, [pc, #424]	; (8004f00 <HAL_I2C_Init+0x274>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d802      	bhi.n	8004d60 <HAL_I2C_Init+0xd4>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	e009      	b.n	8004d74 <HAL_I2C_Init+0xe8>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	4a69      	ldr	r2, [pc, #420]	; (8004f10 <HAL_I2C_Init+0x284>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	099b      	lsrs	r3, r3, #6
 8004d72:	3301      	adds	r3, #1
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	495c      	ldr	r1, [pc, #368]	; (8004f00 <HAL_I2C_Init+0x274>)
 8004d90:	428b      	cmp	r3, r1
 8004d92:	d819      	bhi.n	8004dc8 <HAL_I2C_Init+0x13c>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1e59      	subs	r1, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004da2:	1c59      	adds	r1, r3, #1
 8004da4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004da8:	400b      	ands	r3, r1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_I2C_Init+0x138>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1e59      	subs	r1, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc2:	e051      	b.n	8004e68 <HAL_I2C_Init+0x1dc>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	e04f      	b.n	8004e68 <HAL_I2C_Init+0x1dc>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d111      	bne.n	8004df4 <HAL_I2C_Init+0x168>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1e58      	subs	r0, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6859      	ldr	r1, [r3, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	440b      	add	r3, r1
 8004dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de2:	3301      	adds	r3, #1
 8004de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e012      	b.n	8004e1a <HAL_I2C_Init+0x18e>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	1e58      	subs	r0, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6859      	ldr	r1, [r3, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	0099      	lsls	r1, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_I2C_Init+0x196>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e022      	b.n	8004e68 <HAL_I2C_Init+0x1dc>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10e      	bne.n	8004e48 <HAL_I2C_Init+0x1bc>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1e58      	subs	r0, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	440b      	add	r3, r1
 8004e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e46:	e00f      	b.n	8004e68 <HAL_I2C_Init+0x1dc>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1e58      	subs	r0, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	0099      	lsls	r1, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	6809      	ldr	r1, [r1, #0]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6911      	ldr	r1, [r2, #16]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68d2      	ldr	r2, [r2, #12]
 8004ea2:	4311      	orrs	r1, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	000186a0 	.word	0x000186a0
 8004f04:	001e847f 	.word	0x001e847f
 8004f08:	003d08ff 	.word	0x003d08ff
 8004f0c:	431bde83 	.word	0x431bde83
 8004f10:	10624dd3 	.word	0x10624dd3

08004f14 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e021      	b.n	8004f6a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2224      	movs	r2, #36	; 0x24
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fe ff92 	bl	8003e68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	4611      	mov	r1, r2
 8004f80:	461a      	mov	r2, r3
 8004f82:	4603      	mov	r3, r0
 8004f84:	817b      	strh	r3, [r7, #10]
 8004f86:	460b      	mov	r3, r1
 8004f88:	813b      	strh	r3, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f8e:	f7ff fa51 	bl	8004434 <HAL_GetTick>
 8004f92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	f040 80d9 	bne.w	8005154 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2319      	movs	r3, #25
 8004fa8:	2201      	movs	r2, #1
 8004faa:	496d      	ldr	r1, [pc, #436]	; (8005160 <HAL_I2C_Mem_Write+0x1ec>)
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fcc1 	bl	8005934 <I2C_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0cc      	b.n	8005156 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_I2C_Mem_Write+0x56>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e0c5      	b.n	8005156 <HAL_I2C_Mem_Write+0x1e2>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d007      	beq.n	8004ff0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ffe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2221      	movs	r2, #33	; 0x21
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005020:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4a4d      	ldr	r2, [pc, #308]	; (8005164 <HAL_I2C_Mem_Write+0x1f0>)
 8005030:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005032:	88f8      	ldrh	r0, [r7, #6]
 8005034:	893a      	ldrh	r2, [r7, #8]
 8005036:	8979      	ldrh	r1, [r7, #10]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	4603      	mov	r3, r0
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 faf8 	bl	8005638 <I2C_RequestMemoryWrite>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d052      	beq.n	80050f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e081      	b.n	8005156 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fd42 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	2b04      	cmp	r3, #4
 8005068:	d107      	bne.n	800507a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005078:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e06b      	b.n	8005156 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d11b      	bne.n	80050f4 <HAL_I2C_Mem_Write+0x180>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d017      	beq.n	80050f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	781a      	ldrb	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1aa      	bne.n	8005052 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fd2e 	bl	8005b62 <I2C_WaitOnBTFFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	2b04      	cmp	r3, #4
 8005112:	d107      	bne.n	8005124 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005122:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e016      	b.n	8005156 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	00100002 	.word	0x00100002
 8005164:	ffff0000 	.word	0xffff0000

08005168 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	; 0x30
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	4603      	mov	r3, r0
 8005178:	817b      	strh	r3, [r7, #10]
 800517a:	460b      	mov	r3, r1
 800517c:	813b      	strh	r3, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005186:	f7ff f955 	bl	8004434 <HAL_GetTick>
 800518a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b20      	cmp	r3, #32
 8005196:	f040 8244 	bne.w	8005622 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	2319      	movs	r3, #25
 80051a0:	2201      	movs	r2, #1
 80051a2:	4982      	ldr	r1, [pc, #520]	; (80053ac <HAL_I2C_Mem_Read+0x244>)
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fbc5 	bl	8005934 <I2C_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80051b0:	2302      	movs	r3, #2
 80051b2:	e237      	b.n	8005624 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_I2C_Mem_Read+0x5a>
 80051be:	2302      	movs	r3, #2
 80051c0:	e230      	b.n	8005624 <HAL_I2C_Mem_Read+0x4bc>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d007      	beq.n	80051e8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2222      	movs	r2, #34	; 0x22
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2240      	movs	r2, #64	; 0x40
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4a62      	ldr	r2, [pc, #392]	; (80053b0 <HAL_I2C_Mem_Read+0x248>)
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800522a:	88f8      	ldrh	r0, [r7, #6]
 800522c:	893a      	ldrh	r2, [r7, #8]
 800522e:	8979      	ldrh	r1, [r7, #10]
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4603      	mov	r3, r0
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fa92 	bl	8005764 <I2C_RequestMemoryRead>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e1ec      	b.n	8005624 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d113      	bne.n	800527a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e1c0      	b.n	80055fc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527e:	2b01      	cmp	r3, #1
 8005280:	d11e      	bne.n	80052c0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005290:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005292:	b672      	cpsid	i
}
 8005294:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	61bb      	str	r3, [r7, #24]
 80052aa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80052bc:	b662      	cpsie	i
}
 80052be:	e035      	b.n	800532c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d11e      	bne.n	8005306 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80052d8:	b672      	cpsid	i
}
 80052da:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005300:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005302:	b662      	cpsie	i
}
 8005304:	e012      	b.n	800532c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005314:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800532c:	e166      	b.n	80055fc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	2b03      	cmp	r3, #3
 8005334:	f200 811f 	bhi.w	8005576 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	2b01      	cmp	r3, #1
 800533e:	d123      	bne.n	8005388 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005342:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fc4d 	bl	8005be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e167      	b.n	8005624 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005386:	e139      	b.n	80055fc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538c:	2b02      	cmp	r3, #2
 800538e:	d152      	bne.n	8005436 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	2200      	movs	r2, #0
 8005398:	4906      	ldr	r1, [pc, #24]	; (80053b4 <HAL_I2C_Mem_Read+0x24c>)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 faca 	bl	8005934 <I2C_WaitOnFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e13c      	b.n	8005624 <HAL_I2C_Mem_Read+0x4bc>
 80053aa:	bf00      	nop
 80053ac:	00100002 	.word	0x00100002
 80053b0:	ffff0000 	.word	0xffff0000
 80053b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80053b8:	b672      	cpsid	i
}
 80053ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80053fe:	b662      	cpsie	i
}
 8005400:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005434:	e0e2      	b.n	80055fc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	2200      	movs	r2, #0
 800543e:	497b      	ldr	r1, [pc, #492]	; (800562c <HAL_I2C_Mem_Read+0x4c4>)
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fa77 	bl	8005934 <I2C_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0e9      	b.n	8005624 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005460:	b672      	cpsid	i
}
 8005462:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005496:	4b66      	ldr	r3, [pc, #408]	; (8005630 <HAL_I2C_Mem_Read+0x4c8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	08db      	lsrs	r3, r3, #3
 800549c:	4a65      	ldr	r2, [pc, #404]	; (8005634 <HAL_I2C_Mem_Read+0x4cc>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	0a1a      	lsrs	r2, r3, #8
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	00da      	lsls	r2, r3, #3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d118      	bne.n	80054ee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80054de:	b662      	cpsie	i
}
 80054e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e09a      	b.n	8005624 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d1d9      	bne.n	80054b0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800553e:	b662      	cpsie	i
}
 8005540:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005574:	e042      	b.n	80055fc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005578:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fb32 	bl	8005be4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e04c      	b.n	8005624 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	b2d2      	uxtb	r2, r2
 8005596:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d118      	bne.n	80055fc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005600:	2b00      	cmp	r3, #0
 8005602:	f47f ae94 	bne.w	800532e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e000      	b.n	8005624 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
  }
}
 8005624:	4618      	mov	r0, r3
 8005626:	3728      	adds	r7, #40	; 0x28
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	00010004 	.word	0x00010004
 8005630:	200000a0 	.word	0x200000a0
 8005634:	14f8b589 	.word	0x14f8b589

08005638 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	4608      	mov	r0, r1
 8005642:	4611      	mov	r1, r2
 8005644:	461a      	mov	r2, r3
 8005646:	4603      	mov	r3, r0
 8005648:	817b      	strh	r3, [r7, #10]
 800564a:	460b      	mov	r3, r1
 800564c:	813b      	strh	r3, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005660:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	2200      	movs	r2, #0
 800566a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f960 	bl	8005934 <I2C_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005688:	d103      	bne.n	8005692 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e05f      	b.n	8005756 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005696:	897b      	ldrh	r3, [r7, #10]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	492d      	ldr	r1, [pc, #180]	; (8005760 <I2C_RequestMemoryWrite+0x128>)
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f998 	bl	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e04c      	b.n	8005756 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d4:	6a39      	ldr	r1, [r7, #32]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fa02 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00d      	beq.n	80056fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d107      	bne.n	80056fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e02b      	b.n	8005756 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005704:	893b      	ldrh	r3, [r7, #8]
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	611a      	str	r2, [r3, #16]
 800570e:	e021      	b.n	8005754 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005710:	893b      	ldrh	r3, [r7, #8]
 8005712:	0a1b      	lsrs	r3, r3, #8
 8005714:	b29b      	uxth	r3, r3
 8005716:	b2da      	uxtb	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005720:	6a39      	ldr	r1, [r7, #32]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f9dc 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00d      	beq.n	800574a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	2b04      	cmp	r3, #4
 8005734:	d107      	bne.n	8005746 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005744:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e005      	b.n	8005756 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800574a:	893b      	ldrh	r3, [r7, #8]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	00010002 	.word	0x00010002

08005764 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	4608      	mov	r0, r1
 800576e:	4611      	mov	r1, r2
 8005770:	461a      	mov	r2, r3
 8005772:	4603      	mov	r3, r0
 8005774:	817b      	strh	r3, [r7, #10]
 8005776:	460b      	mov	r3, r1
 8005778:	813b      	strh	r3, [r7, #8]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800578c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800579c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f8c2 	bl	8005934 <I2C_WaitOnFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00d      	beq.n	80057d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c4:	d103      	bne.n	80057ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e0aa      	b.n	8005928 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057d2:	897b      	ldrh	r3, [r7, #10]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	4952      	ldr	r1, [pc, #328]	; (8005930 <I2C_RequestMemoryRead+0x1cc>)
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f8fa 	bl	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e097      	b.n	8005928 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800580e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005810:	6a39      	ldr	r1, [r7, #32]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f964 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00d      	beq.n	800583a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	2b04      	cmp	r3, #4
 8005824:	d107      	bne.n	8005836 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005834:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e076      	b.n	8005928 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d105      	bne.n	800584c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005840:	893b      	ldrh	r3, [r7, #8]
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	611a      	str	r2, [r3, #16]
 800584a:	e021      	b.n	8005890 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800584c:	893b      	ldrh	r3, [r7, #8]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	b29b      	uxth	r3, r3
 8005852:	b2da      	uxtb	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	6a39      	ldr	r1, [r7, #32]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f93e 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00d      	beq.n	8005886 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b04      	cmp	r3, #4
 8005870:	d107      	bne.n	8005882 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005880:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e050      	b.n	8005928 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005886:	893b      	ldrh	r3, [r7, #8]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	6a39      	ldr	r1, [r7, #32]
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f923 	bl	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d107      	bne.n	80058b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e035      	b.n	8005928 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 f82b 	bl	8005934 <I2C_WaitOnFlagUntilTimeout>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00d      	beq.n	8005900 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f2:	d103      	bne.n	80058fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e013      	b.n	8005928 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005900:	897b      	ldrh	r3, [r7, #10]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	4906      	ldr	r1, [pc, #24]	; (8005930 <I2C_RequestMemoryRead+0x1cc>)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f863 	bl	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	00010002 	.word	0x00010002

08005934 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005944:	e025      	b.n	8005992 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800594c:	d021      	beq.n	8005992 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594e:	f7fe fd71 	bl	8004434 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <I2C_WaitOnFlagUntilTimeout+0x30>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d116      	bne.n	8005992 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f043 0220 	orr.w	r2, r3, #32
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e023      	b.n	80059da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	0c1b      	lsrs	r3, r3, #16
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	d10d      	bne.n	80059b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	43da      	mvns	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4013      	ands	r3, r2
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2300      	movne	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	e00c      	b.n	80059d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	43da      	mvns	r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4013      	ands	r3, r2
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bf0c      	ite	eq
 80059ca:	2301      	moveq	r3, #1
 80059cc:	2300      	movne	r3, #0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	461a      	mov	r2, r3
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d0b6      	beq.n	8005946 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059f0:	e051      	b.n	8005a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a00:	d123      	bne.n	8005a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f043 0204 	orr.w	r2, r3, #4
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e046      	b.n	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a50:	d021      	beq.n	8005a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a52:	f7fe fcef 	bl	8004434 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d116      	bne.n	8005a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f043 0220 	orr.w	r2, r3, #32
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e020      	b.n	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	0c1b      	lsrs	r3, r3, #16
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10c      	bne.n	8005aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	43da      	mvns	r2, r3
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	e00b      	b.n	8005ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	43da      	mvns	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d18d      	bne.n	80059f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aec:	e02d      	b.n	8005b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 f8ce 	bl	8005c90 <I2C_IsAcknowledgeFailed>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e02d      	b.n	8005b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b04:	d021      	beq.n	8005b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b06:	f7fe fc95 	bl	8004434 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d302      	bcc.n	8005b1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d116      	bne.n	8005b4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f043 0220 	orr.w	r2, r3, #32
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e007      	b.n	8005b5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b54:	2b80      	cmp	r3, #128	; 0x80
 8005b56:	d1ca      	bne.n	8005aee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b6e:	e02d      	b.n	8005bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f88d 	bl	8005c90 <I2C_IsAcknowledgeFailed>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e02d      	b.n	8005bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b86:	d021      	beq.n	8005bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b88:	f7fe fc54 	bl	8004434 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d116      	bne.n	8005bcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	f043 0220 	orr.w	r2, r3, #32
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e007      	b.n	8005bdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d1ca      	bne.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bf0:	e042      	b.n	8005c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d119      	bne.n	8005c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0210 	mvn.w	r2, #16
 8005c08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e029      	b.n	8005c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c34:	f7fe fbfe 	bl	8004434 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d302      	bcc.n	8005c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d116      	bne.n	8005c78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e007      	b.n	8005c88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d1b5      	bne.n	8005bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca6:	d11b      	bne.n	8005ce0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f043 0204 	orr.w	r2, r3, #4
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bc80      	pop	{r7}
 8005cea:	4770      	bx	lr

08005cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e26c      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 8087 	beq.w	8005e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d0c:	4b92      	ldr	r3, [pc, #584]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 030c 	and.w	r3, r3, #12
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d00c      	beq.n	8005d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d18:	4b8f      	ldr	r3, [pc, #572]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 030c 	and.w	r3, r3, #12
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d112      	bne.n	8005d4a <HAL_RCC_OscConfig+0x5e>
 8005d24:	4b8c      	ldr	r3, [pc, #560]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d30:	d10b      	bne.n	8005d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d32:	4b89      	ldr	r3, [pc, #548]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d06c      	beq.n	8005e18 <HAL_RCC_OscConfig+0x12c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d168      	bne.n	8005e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e246      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d52:	d106      	bne.n	8005d62 <HAL_RCC_OscConfig+0x76>
 8005d54:	4b80      	ldr	r3, [pc, #512]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a7f      	ldr	r2, [pc, #508]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	e02e      	b.n	8005dc0 <HAL_RCC_OscConfig+0xd4>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10c      	bne.n	8005d84 <HAL_RCC_OscConfig+0x98>
 8005d6a:	4b7b      	ldr	r3, [pc, #492]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a7a      	ldr	r2, [pc, #488]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	4b78      	ldr	r3, [pc, #480]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a77      	ldr	r2, [pc, #476]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	e01d      	b.n	8005dc0 <HAL_RCC_OscConfig+0xd4>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d8c:	d10c      	bne.n	8005da8 <HAL_RCC_OscConfig+0xbc>
 8005d8e:	4b72      	ldr	r3, [pc, #456]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a71      	ldr	r2, [pc, #452]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	4b6f      	ldr	r3, [pc, #444]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a6e      	ldr	r2, [pc, #440]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e00b      	b.n	8005dc0 <HAL_RCC_OscConfig+0xd4>
 8005da8:	4b6b      	ldr	r3, [pc, #428]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a6a      	ldr	r2, [pc, #424]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	4b68      	ldr	r3, [pc, #416]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a67      	ldr	r2, [pc, #412]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d013      	beq.n	8005df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc8:	f7fe fb34 	bl	8004434 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd0:	f7fe fb30 	bl	8004434 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b64      	cmp	r3, #100	; 0x64
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e1fa      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de2:	4b5d      	ldr	r3, [pc, #372]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0f0      	beq.n	8005dd0 <HAL_RCC_OscConfig+0xe4>
 8005dee:	e014      	b.n	8005e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df0:	f7fe fb20 	bl	8004434 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df8:	f7fe fb1c 	bl	8004434 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b64      	cmp	r3, #100	; 0x64
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e1e6      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0a:	4b53      	ldr	r3, [pc, #332]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x10c>
 8005e16:	e000      	b.n	8005e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d063      	beq.n	8005eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e26:	4b4c      	ldr	r3, [pc, #304]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f003 030c 	and.w	r3, r3, #12
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e32:	4b49      	ldr	r3, [pc, #292]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 030c 	and.w	r3, r3, #12
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d11c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x18c>
 8005e3e:	4b46      	ldr	r3, [pc, #280]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d116      	bne.n	8005e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e4a:	4b43      	ldr	r3, [pc, #268]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_RCC_OscConfig+0x176>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d001      	beq.n	8005e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e1ba      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e62:	4b3d      	ldr	r3, [pc, #244]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4939      	ldr	r1, [pc, #228]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e76:	e03a      	b.n	8005eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d020      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e80:	4b36      	ldr	r3, [pc, #216]	; (8005f5c <HAL_RCC_OscConfig+0x270>)
 8005e82:	2201      	movs	r2, #1
 8005e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e86:	f7fe fad5 	bl	8004434 <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e8e:	f7fe fad1 	bl	8004434 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e19b      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea0:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0f0      	beq.n	8005e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eac:	4b2a      	ldr	r3, [pc, #168]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	4927      	ldr	r1, [pc, #156]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]
 8005ec0:	e015      	b.n	8005eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ec2:	4b26      	ldr	r3, [pc, #152]	; (8005f5c <HAL_RCC_OscConfig+0x270>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec8:	f7fe fab4 	bl	8004434 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ed0:	f7fe fab0 	bl	8004434 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e17a      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ee2:	4b1d      	ldr	r3, [pc, #116]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f0      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d03a      	beq.n	8005f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d019      	beq.n	8005f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f02:	4b17      	ldr	r3, [pc, #92]	; (8005f60 <HAL_RCC_OscConfig+0x274>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f08:	f7fe fa94 	bl	8004434 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f10:	f7fe fa90 	bl	8004434 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e15a      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f22:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <HAL_RCC_OscConfig+0x26c>)
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f2e:	2001      	movs	r0, #1
 8005f30:	f000 fad8 	bl	80064e4 <RCC_Delay>
 8005f34:	e01c      	b.n	8005f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <HAL_RCC_OscConfig+0x274>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f3c:	f7fe fa7a 	bl	8004434 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f42:	e00f      	b.n	8005f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f44:	f7fe fa76 	bl	8004434 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d908      	bls.n	8005f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e140      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	42420000 	.word	0x42420000
 8005f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f64:	4b9e      	ldr	r3, [pc, #632]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e9      	bne.n	8005f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80a6 	beq.w	80060ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f82:	4b97      	ldr	r3, [pc, #604]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8e:	4b94      	ldr	r3, [pc, #592]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	4a93      	ldr	r2, [pc, #588]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8005f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f98:	61d3      	str	r3, [r2, #28]
 8005f9a:	4b91      	ldr	r3, [pc, #580]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	60bb      	str	r3, [r7, #8]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005faa:	4b8e      	ldr	r3, [pc, #568]	; (80061e4 <HAL_RCC_OscConfig+0x4f8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d118      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fb6:	4b8b      	ldr	r3, [pc, #556]	; (80061e4 <HAL_RCC_OscConfig+0x4f8>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a8a      	ldr	r2, [pc, #552]	; (80061e4 <HAL_RCC_OscConfig+0x4f8>)
 8005fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fc2:	f7fe fa37 	bl	8004434 <HAL_GetTick>
 8005fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fca:	f7fe fa33 	bl	8004434 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b64      	cmp	r3, #100	; 0x64
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e0fd      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fdc:	4b81      	ldr	r3, [pc, #516]	; (80061e4 <HAL_RCC_OscConfig+0x4f8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0f0      	beq.n	8005fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d106      	bne.n	8005ffe <HAL_RCC_OscConfig+0x312>
 8005ff0:	4b7b      	ldr	r3, [pc, #492]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	4a7a      	ldr	r2, [pc, #488]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	6213      	str	r3, [r2, #32]
 8005ffc:	e02d      	b.n	800605a <HAL_RCC_OscConfig+0x36e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10c      	bne.n	8006020 <HAL_RCC_OscConfig+0x334>
 8006006:	4b76      	ldr	r3, [pc, #472]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	4a75      	ldr	r2, [pc, #468]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	6213      	str	r3, [r2, #32]
 8006012:	4b73      	ldr	r3, [pc, #460]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	4a72      	ldr	r2, [pc, #456]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	6213      	str	r3, [r2, #32]
 800601e:	e01c      	b.n	800605a <HAL_RCC_OscConfig+0x36e>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b05      	cmp	r3, #5
 8006026:	d10c      	bne.n	8006042 <HAL_RCC_OscConfig+0x356>
 8006028:	4b6d      	ldr	r3, [pc, #436]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	4a6c      	ldr	r2, [pc, #432]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 800602e:	f043 0304 	orr.w	r3, r3, #4
 8006032:	6213      	str	r3, [r2, #32]
 8006034:	4b6a      	ldr	r3, [pc, #424]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	4a69      	ldr	r2, [pc, #420]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	6213      	str	r3, [r2, #32]
 8006040:	e00b      	b.n	800605a <HAL_RCC_OscConfig+0x36e>
 8006042:	4b67      	ldr	r3, [pc, #412]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	4a66      	ldr	r2, [pc, #408]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006048:	f023 0301 	bic.w	r3, r3, #1
 800604c:	6213      	str	r3, [r2, #32]
 800604e:	4b64      	ldr	r3, [pc, #400]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	4a63      	ldr	r2, [pc, #396]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006054:	f023 0304 	bic.w	r3, r3, #4
 8006058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d015      	beq.n	800608e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006062:	f7fe f9e7 	bl	8004434 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006068:	e00a      	b.n	8006080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800606a:	f7fe f9e3 	bl	8004434 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f241 3288 	movw	r2, #5000	; 0x1388
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e0ab      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006080:	4b57      	ldr	r3, [pc, #348]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0ee      	beq.n	800606a <HAL_RCC_OscConfig+0x37e>
 800608c:	e014      	b.n	80060b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800608e:	f7fe f9d1 	bl	8004434 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006094:	e00a      	b.n	80060ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006096:	f7fe f9cd 	bl	8004434 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e095      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ac:	4b4c      	ldr	r3, [pc, #304]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1ee      	bne.n	8006096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d105      	bne.n	80060ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060be:	4b48      	ldr	r3, [pc, #288]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	4a47      	ldr	r2, [pc, #284]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 80060c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 8081 	beq.w	80061d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060d4:	4b42      	ldr	r3, [pc, #264]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f003 030c 	and.w	r3, r3, #12
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d061      	beq.n	80061a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d146      	bne.n	8006176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e8:	4b3f      	ldr	r3, [pc, #252]	; (80061e8 <HAL_RCC_OscConfig+0x4fc>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ee:	f7fe f9a1 	bl	8004434 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f6:	f7fe f99d 	bl	8004434 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e067      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006108:	4b35      	ldr	r3, [pc, #212]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f0      	bne.n	80060f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d108      	bne.n	8006130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800611e:	4b30      	ldr	r3, [pc, #192]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	492d      	ldr	r1, [pc, #180]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006130:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a19      	ldr	r1, [r3, #32]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	430b      	orrs	r3, r1
 8006142:	4927      	ldr	r1, [pc, #156]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006144:	4313      	orrs	r3, r2
 8006146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006148:	4b27      	ldr	r3, [pc, #156]	; (80061e8 <HAL_RCC_OscConfig+0x4fc>)
 800614a:	2201      	movs	r2, #1
 800614c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614e:	f7fe f971 	bl	8004434 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006156:	f7fe f96d 	bl	8004434 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e037      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006168:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCC_OscConfig+0x46a>
 8006174:	e02f      	b.n	80061d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006176:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <HAL_RCC_OscConfig+0x4fc>)
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617c:	f7fe f95a 	bl	8004434 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006184:	f7fe f956 	bl	8004434 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b02      	cmp	r3, #2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e020      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006196:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f0      	bne.n	8006184 <HAL_RCC_OscConfig+0x498>
 80061a2:	e018      	b.n	80061d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e013      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <HAL_RCC_OscConfig+0x4f4>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d106      	bne.n	80061d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d001      	beq.n	80061d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40021000 	.word	0x40021000
 80061e4:	40007000 	.word	0x40007000
 80061e8:	42420060 	.word	0x42420060

080061ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0d0      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006200:	4b6a      	ldr	r3, [pc, #424]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d910      	bls.n	8006230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620e:	4b67      	ldr	r3, [pc, #412]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 0207 	bic.w	r2, r3, #7
 8006216:	4965      	ldr	r1, [pc, #404]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800621e:	4b63      	ldr	r3, [pc, #396]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0b8      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d020      	beq.n	800627e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006248:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a58      	ldr	r2, [pc, #352]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800624e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006260:	4b53      	ldr	r3, [pc, #332]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a52      	ldr	r2, [pc, #328]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800626a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800626c:	4b50      	ldr	r3, [pc, #320]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	494d      	ldr	r1, [pc, #308]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800627a:	4313      	orrs	r3, r2
 800627c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d040      	beq.n	800630c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d107      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	4b47      	ldr	r3, [pc, #284]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d115      	bne.n	80062ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e07f      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062aa:	4b41      	ldr	r3, [pc, #260]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e073      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ba:	4b3d      	ldr	r3, [pc, #244]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e06b      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ca:	4b39      	ldr	r3, [pc, #228]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f023 0203 	bic.w	r2, r3, #3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	4936      	ldr	r1, [pc, #216]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062dc:	f7fe f8aa 	bl	8004434 <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	e00a      	b.n	80062fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e4:	f7fe f8a6 	bl	8004434 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e053      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fa:	4b2d      	ldr	r3, [pc, #180]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f003 020c 	and.w	r2, r3, #12
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	429a      	cmp	r2, r3
 800630a:	d1eb      	bne.n	80062e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800630c:	4b27      	ldr	r3, [pc, #156]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d210      	bcs.n	800633c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631a:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 0207 	bic.w	r2, r3, #7
 8006322:	4922      	ldr	r1, [pc, #136]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800632a:	4b20      	ldr	r3, [pc, #128]	; (80063ac <HAL_RCC_ClockConfig+0x1c0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e032      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4916      	ldr	r1, [pc, #88]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006356:	4313      	orrs	r3, r2
 8006358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	490e      	ldr	r1, [pc, #56]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006376:	4313      	orrs	r3, r2
 8006378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800637a:	f000 f821 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 800637e:	4602      	mov	r2, r0
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	091b      	lsrs	r3, r3, #4
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	490a      	ldr	r1, [pc, #40]	; (80063b4 <HAL_RCC_ClockConfig+0x1c8>)
 800638c:	5ccb      	ldrb	r3, [r1, r3]
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <HAL_RCC_ClockConfig+0x1cc>)
 8006394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_ClockConfig+0x1d0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe f808 	bl	80043b0 <HAL_InitTick>

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40022000 	.word	0x40022000
 80063b0:	40021000 	.word	0x40021000
 80063b4:	0800bf20 	.word	0x0800bf20
 80063b8:	200000a0 	.word	0x200000a0
 80063bc:	200000a4 	.word	0x200000a4

080063c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c0:	b490      	push	{r4, r7}
 80063c2:	b08a      	sub	sp, #40	; 0x28
 80063c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80063c6:	4b2a      	ldr	r3, [pc, #168]	; (8006470 <HAL_RCC_GetSysClockFreq+0xb0>)
 80063c8:	1d3c      	adds	r4, r7, #4
 80063ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80063d0:	f240 2301 	movw	r3, #513	; 0x201
 80063d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
 80063da:	2300      	movs	r3, #0
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	2300      	movs	r3, #0
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80063ea:	4b22      	ldr	r3, [pc, #136]	; (8006474 <HAL_RCC_GetSysClockFreq+0xb4>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f003 030c 	and.w	r3, r3, #12
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d002      	beq.n	8006400 <HAL_RCC_GetSysClockFreq+0x40>
 80063fa:	2b08      	cmp	r3, #8
 80063fc:	d003      	beq.n	8006406 <HAL_RCC_GetSysClockFreq+0x46>
 80063fe:	e02d      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006400:	4b1d      	ldr	r3, [pc, #116]	; (8006478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006402:	623b      	str	r3, [r7, #32]
      break;
 8006404:	e02d      	b.n	8006462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	0c9b      	lsrs	r3, r3, #18
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006412:	4413      	add	r3, r2
 8006414:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006418:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d013      	beq.n	800644c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	0c5b      	lsrs	r3, r3, #17
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006432:	4413      	add	r3, r2
 8006434:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006438:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	4a0e      	ldr	r2, [pc, #56]	; (8006478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800643e:	fb02 f203 	mul.w	r2, r2, r3
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
 800644a:	e004      	b.n	8006456 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4a0b      	ldr	r2, [pc, #44]	; (800647c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006450:	fb02 f303 	mul.w	r3, r2, r3
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	623b      	str	r3, [r7, #32]
      break;
 800645a:	e002      	b.n	8006462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800645e:	623b      	str	r3, [r7, #32]
      break;
 8006460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006462:	6a3b      	ldr	r3, [r7, #32]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3728      	adds	r7, #40	; 0x28
 8006468:	46bd      	mov	sp, r7
 800646a:	bc90      	pop	{r4, r7}
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	0800bf10 	.word	0x0800bf10
 8006474:	40021000 	.word	0x40021000
 8006478:	007a1200 	.word	0x007a1200
 800647c:	003d0900 	.word	0x003d0900

08006480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006484:	4b02      	ldr	r3, [pc, #8]	; (8006490 <HAL_RCC_GetHCLKFreq+0x10>)
 8006486:	681b      	ldr	r3, [r3, #0]
}
 8006488:	4618      	mov	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr
 8006490:	200000a0 	.word	0x200000a0

08006494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006498:	f7ff fff2 	bl	8006480 <HAL_RCC_GetHCLKFreq>
 800649c:	4602      	mov	r2, r0
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	0a1b      	lsrs	r3, r3, #8
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	4903      	ldr	r1, [pc, #12]	; (80064b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064aa:	5ccb      	ldrb	r3, [r1, r3]
 80064ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40021000 	.word	0x40021000
 80064b8:	0800bf30 	.word	0x0800bf30

080064bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064c0:	f7ff ffde 	bl	8006480 <HAL_RCC_GetHCLKFreq>
 80064c4:	4602      	mov	r2, r0
 80064c6:	4b05      	ldr	r3, [pc, #20]	; (80064dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	0adb      	lsrs	r3, r3, #11
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	4903      	ldr	r1, [pc, #12]	; (80064e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064d2:	5ccb      	ldrb	r3, [r1, r3]
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d8:	4618      	mov	r0, r3
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40021000 	.word	0x40021000
 80064e0:	0800bf30 	.word	0x0800bf30

080064e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80064ec:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <RCC_Delay+0x34>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a0a      	ldr	r2, [pc, #40]	; (800651c <RCC_Delay+0x38>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	0a5b      	lsrs	r3, r3, #9
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	fb02 f303 	mul.w	r3, r2, r3
 80064fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006500:	bf00      	nop
  }
  while (Delay --);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1e5a      	subs	r2, r3, #1
 8006506:	60fa      	str	r2, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f9      	bne.n	8006500 <RCC_Delay+0x1c>
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr
 8006518:	200000a0 	.word	0x200000a0
 800651c:	10624dd3 	.word	0x10624dd3

08006520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e041      	b.n	80065b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fd fcb0 	bl	8003eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f000 faaa 	bl	8006ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e041      	b.n	8006654 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f839 	bl	800665c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f000 fa5b 	bl	8006ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr
	...

08006670 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d109      	bne.n	8006694 <HAL_TIM_PWM_Start+0x24>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	bf14      	ite	ne
 800668c:	2301      	movne	r3, #1
 800668e:	2300      	moveq	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	e022      	b.n	80066da <HAL_TIM_PWM_Start+0x6a>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b04      	cmp	r3, #4
 8006698:	d109      	bne.n	80066ae <HAL_TIM_PWM_Start+0x3e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	bf14      	ite	ne
 80066a6:	2301      	movne	r3, #1
 80066a8:	2300      	moveq	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	e015      	b.n	80066da <HAL_TIM_PWM_Start+0x6a>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d109      	bne.n	80066c8 <HAL_TIM_PWM_Start+0x58>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	bf14      	ite	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	2300      	moveq	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e008      	b.n	80066da <HAL_TIM_PWM_Start+0x6a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	bf14      	ite	ne
 80066d4:	2301      	movne	r3, #1
 80066d6:	2300      	moveq	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e05e      	b.n	80067a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_PWM_Start+0x82>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f0:	e013      	b.n	800671a <HAL_TIM_PWM_Start+0xaa>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_PWM_Start+0x92>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006700:	e00b      	b.n	800671a <HAL_TIM_PWM_Start+0xaa>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d104      	bne.n	8006712 <HAL_TIM_PWM_Start+0xa2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006710:	e003      	b.n	800671a <HAL_TIM_PWM_Start+0xaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2201      	movs	r2, #1
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fc48 	bl	8006fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_TIM_PWM_Start+0x138>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d107      	bne.n	8006742 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <HAL_TIM_PWM_Start+0x138>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00e      	beq.n	800676a <HAL_TIM_PWM_Start+0xfa>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006754:	d009      	beq.n	800676a <HAL_TIM_PWM_Start+0xfa>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a14      	ldr	r2, [pc, #80]	; (80067ac <HAL_TIM_PWM_Start+0x13c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_TIM_PWM_Start+0xfa>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a12      	ldr	r2, [pc, #72]	; (80067b0 <HAL_TIM_PWM_Start+0x140>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d111      	bne.n	800678e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b06      	cmp	r3, #6
 800677a:	d010      	beq.n	800679e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678c:	e007      	b.n	800679e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0201 	orr.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800

080067b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e0ac      	b.n	8006928 <HAL_TIM_PWM_ConfigChannel+0x174>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b0c      	cmp	r3, #12
 80067da:	f200 809f 	bhi.w	800691c <HAL_TIM_PWM_ConfigChannel+0x168>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	08006819 	.word	0x08006819
 80067e8:	0800691d 	.word	0x0800691d
 80067ec:	0800691d 	.word	0x0800691d
 80067f0:	0800691d 	.word	0x0800691d
 80067f4:	08006859 	.word	0x08006859
 80067f8:	0800691d 	.word	0x0800691d
 80067fc:	0800691d 	.word	0x0800691d
 8006800:	0800691d 	.word	0x0800691d
 8006804:	0800689b 	.word	0x0800689b
 8006808:	0800691d 	.word	0x0800691d
 800680c:	0800691d 	.word	0x0800691d
 8006810:	0800691d 	.word	0x0800691d
 8006814:	080068db 	.word	0x080068db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f9ac 	bl	8006b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0208 	orr.w	r2, r2, #8
 8006832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0204 	bic.w	r2, r2, #4
 8006842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6999      	ldr	r1, [r3, #24]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	619a      	str	r2, [r3, #24]
      break;
 8006856:	e062      	b.n	800691e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68b9      	ldr	r1, [r7, #8]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 f9f2 	bl	8006c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699a      	ldr	r2, [r3, #24]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6999      	ldr	r1, [r3, #24]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	021a      	lsls	r2, r3, #8
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	619a      	str	r2, [r3, #24]
      break;
 8006898:	e041      	b.n	800691e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fa3b 	bl	8006d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69da      	ldr	r2, [r3, #28]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0208 	orr.w	r2, r2, #8
 80068b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0204 	bic.w	r2, r2, #4
 80068c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69d9      	ldr	r1, [r3, #28]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	61da      	str	r2, [r3, #28]
      break;
 80068d8:	e021      	b.n	800691e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fa85 	bl	8006df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69da      	ldr	r2, [r3, #28]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69d9      	ldr	r1, [r3, #28]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	021a      	lsls	r2, r3, #8
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	61da      	str	r2, [r3, #28]
      break;
 800691a:	e000      	b.n	800691e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800691c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_TIM_ConfigClockSource+0x18>
 8006944:	2302      	movs	r3, #2
 8006946:	e0b3      	b.n	8006ab0 <HAL_TIM_ConfigClockSource+0x180>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006966:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800696e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006980:	d03e      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0xd0>
 8006982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006986:	f200 8087 	bhi.w	8006a98 <HAL_TIM_ConfigClockSource+0x168>
 800698a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698e:	f000 8085 	beq.w	8006a9c <HAL_TIM_ConfigClockSource+0x16c>
 8006992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006996:	d87f      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x168>
 8006998:	2b70      	cmp	r3, #112	; 0x70
 800699a:	d01a      	beq.n	80069d2 <HAL_TIM_ConfigClockSource+0xa2>
 800699c:	2b70      	cmp	r3, #112	; 0x70
 800699e:	d87b      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x168>
 80069a0:	2b60      	cmp	r3, #96	; 0x60
 80069a2:	d050      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x116>
 80069a4:	2b60      	cmp	r3, #96	; 0x60
 80069a6:	d877      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x168>
 80069a8:	2b50      	cmp	r3, #80	; 0x50
 80069aa:	d03c      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0xf6>
 80069ac:	2b50      	cmp	r3, #80	; 0x50
 80069ae:	d873      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x168>
 80069b0:	2b40      	cmp	r3, #64	; 0x40
 80069b2:	d058      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x136>
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d86f      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x168>
 80069b8:	2b30      	cmp	r3, #48	; 0x30
 80069ba:	d064      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x156>
 80069bc:	2b30      	cmp	r3, #48	; 0x30
 80069be:	d86b      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x168>
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d060      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x156>
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d867      	bhi.n	8006a98 <HAL_TIM_ConfigClockSource+0x168>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d05c      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x156>
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d05a      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80069d0:	e062      	b.n	8006a98 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	6899      	ldr	r1, [r3, #8]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f000 faca 	bl	8006f7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	609a      	str	r2, [r3, #8]
      break;
 80069fe:	e04e      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	6899      	ldr	r1, [r3, #8]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f000 fab3 	bl	8006f7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a22:	609a      	str	r2, [r3, #8]
      break;
 8006a24:	e03b      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6859      	ldr	r1, [r3, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f000 fa2a 	bl	8006e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2150      	movs	r1, #80	; 0x50
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fa81 	bl	8006f46 <TIM_ITRx_SetConfig>
      break;
 8006a44:	e02b      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6859      	ldr	r1, [r3, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f000 fa48 	bl	8006ee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2160      	movs	r1, #96	; 0x60
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fa71 	bl	8006f46 <TIM_ITRx_SetConfig>
      break;
 8006a64:	e01b      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f000 fa0a 	bl	8006e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2140      	movs	r1, #64	; 0x40
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fa61 	bl	8006f46 <TIM_ITRx_SetConfig>
      break;
 8006a84:	e00b      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f000 fa58 	bl	8006f46 <TIM_ITRx_SetConfig>
        break;
 8006a96:	e002      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a98:	bf00      	nop
 8006a9a:	e000      	b.n	8006a9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a29      	ldr	r2, [pc, #164]	; (8006b70 <TIM_Base_SetConfig+0xb8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00b      	beq.n	8006ae8 <TIM_Base_SetConfig+0x30>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad6:	d007      	beq.n	8006ae8 <TIM_Base_SetConfig+0x30>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a26      	ldr	r2, [pc, #152]	; (8006b74 <TIM_Base_SetConfig+0xbc>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_Base_SetConfig+0x30>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a25      	ldr	r2, [pc, #148]	; (8006b78 <TIM_Base_SetConfig+0xc0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d108      	bne.n	8006afa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a1c      	ldr	r2, [pc, #112]	; (8006b70 <TIM_Base_SetConfig+0xb8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00b      	beq.n	8006b1a <TIM_Base_SetConfig+0x62>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b08:	d007      	beq.n	8006b1a <TIM_Base_SetConfig+0x62>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <TIM_Base_SetConfig+0xbc>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_Base_SetConfig+0x62>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <TIM_Base_SetConfig+0xc0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d108      	bne.n	8006b2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a07      	ldr	r2, [pc, #28]	; (8006b70 <TIM_Base_SetConfig+0xb8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d103      	bne.n	8006b60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	615a      	str	r2, [r3, #20]
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr
 8006b70:	40012c00 	.word	0x40012c00
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800

08006b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	f023 0201 	bic.w	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0303 	bic.w	r3, r3, #3
 8006bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f023 0302 	bic.w	r3, r3, #2
 8006bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <TIM_OC1_SetConfig+0xc8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d10c      	bne.n	8006bf2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f023 0308 	bic.w	r3, r3, #8
 8006bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 0304 	bic.w	r3, r3, #4
 8006bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a13      	ldr	r2, [pc, #76]	; (8006c44 <TIM_OC1_SetConfig+0xc8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d111      	bne.n	8006c1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	621a      	str	r2, [r3, #32]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40012c00 	.word	0x40012c00

08006c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f023 0210 	bic.w	r2, r3, #16
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f023 0320 	bic.w	r3, r3, #32
 8006c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <TIM_OC2_SetConfig+0xd0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d10d      	bne.n	8006cc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a14      	ldr	r2, [pc, #80]	; (8006d18 <TIM_OC2_SetConfig+0xd0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d113      	bne.n	8006cf4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	621a      	str	r2, [r3, #32]
}
 8006d0e:	bf00      	nop
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr
 8006d18:	40012c00 	.word	0x40012c00

08006d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <TIM_OC3_SetConfig+0xd0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d10d      	bne.n	8006d96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a14      	ldr	r2, [pc, #80]	; (8006dec <TIM_OC3_SetConfig+0xd0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d113      	bne.n	8006dc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	621a      	str	r2, [r3, #32]
}
 8006de0:	bf00      	nop
 8006de2:	371c      	adds	r7, #28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40012c00 	.word	0x40012c00

08006df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	031b      	lsls	r3, r3, #12
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a0f      	ldr	r2, [pc, #60]	; (8006e88 <TIM_OC4_SetConfig+0x98>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d109      	bne.n	8006e64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	019b      	lsls	r3, r3, #6
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr
 8006e88:	40012c00 	.word	0x40012c00

08006e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f023 030a 	bic.w	r3, r3, #10
 8006ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	621a      	str	r2, [r3, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f023 0210 	bic.w	r2, r3, #16
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	031b      	lsls	r3, r3, #12
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	621a      	str	r2, [r3, #32]
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f043 0307 	orr.w	r3, r3, #7
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	609a      	str	r2, [r3, #8]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr

08006f7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b087      	sub	sp, #28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
 8006f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	021a      	lsls	r2, r3, #8
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	609a      	str	r2, [r3, #8]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	2201      	movs	r2, #1
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1a      	ldr	r2, [r3, #32]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	401a      	ands	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007014:	2302      	movs	r3, #2
 8007016:	e046      	b.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00e      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007064:	d009      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d004      	beq.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a10      	ldr	r2, [pc, #64]	; (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d10c      	bne.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	4313      	orrs	r3, r2
 800708a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800

080070bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e03d      	b.n	8007154 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e03f      	b.n	80071f0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7fc ff8d 	bl	80040a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2224      	movs	r2, #36	; 0x24
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071a0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fba0 	bl	80078e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071b6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	695a      	ldr	r2, [r3, #20]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071c6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071d6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b20      	cmp	r3, #32
 8007210:	d11d      	bne.n	800724e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <HAL_UART_Receive_IT+0x26>
 8007218:	88fb      	ldrh	r3, [r7, #6]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e016      	b.n	8007250 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_UART_Receive_IT+0x38>
 800722c:	2302      	movs	r3, #2
 800722e:	e00f      	b.n	8007250 <HAL_UART_Receive_IT+0x58>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	461a      	mov	r2, r3
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f9c5 	bl	80075d4 <UART_Start_Receive_IT>
 800724a:	4603      	mov	r3, r0
 800724c:	e000      	b.n	8007250 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800724e:	2302      	movs	r3, #2
  }
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	; 0x28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007278:	2300      	movs	r3, #0
 800727a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	f003 0320 	and.w	r3, r3, #32
 8007294:	2b00      	cmp	r3, #0
 8007296:	d008      	beq.n	80072aa <HAL_UART_IRQHandler+0x52>
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa76 	bl	8007794 <UART_Receive_IT>
      return;
 80072a8:	e17b      	b.n	80075a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 80b1 	beq.w	8007414 <HAL_UART_IRQHandler+0x1bc>
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d105      	bne.n	80072c8 <HAL_UART_IRQHandler+0x70>
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 80a6 	beq.w	8007414 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <HAL_UART_IRQHandler+0x90>
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	f043 0201 	orr.w	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <HAL_UART_IRQHandler+0xb0>
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007300:	f043 0202 	orr.w	r2, r3, #2
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <HAL_UART_IRQHandler+0xd0>
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	f043 0204 	orr.w	r2, r3, #4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	f003 0308 	and.w	r3, r3, #8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00f      	beq.n	8007352 <HAL_UART_IRQHandler+0xfa>
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <HAL_UART_IRQHandler+0xee>
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	f043 0208 	orr.w	r2, r3, #8
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 811e 	beq.w	8007598 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	f003 0320 	and.w	r3, r3, #32
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <HAL_UART_IRQHandler+0x11e>
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fa0f 	bl	8007794 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf14      	ite	ne
 8007384:	2301      	movne	r3, #1
 8007386:	2300      	moveq	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <HAL_UART_IRQHandler+0x146>
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d031      	beq.n	8007402 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f951 	bl	8007646 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d023      	beq.n	80073fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	695a      	ldr	r2, [r3, #20]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d013      	beq.n	80073f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	4a76      	ldr	r2, [pc, #472]	; (80075a8 <HAL_UART_IRQHandler+0x350>)
 80073d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fd f9a2 	bl	8004720 <HAL_DMA_Abort_IT>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d016      	beq.n	8007410 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073ec:	4610      	mov	r0, r2
 80073ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f0:	e00e      	b.n	8007410 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f8da 	bl	80075ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f8:	e00a      	b.n	8007410 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f8d6 	bl	80075ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007400:	e006      	b.n	8007410 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f8d2 	bl	80075ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800740e:	e0c3      	b.n	8007598 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007410:	bf00      	nop
    return;
 8007412:	e0c1      	b.n	8007598 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	2b01      	cmp	r3, #1
 800741a:	f040 80a1 	bne.w	8007560 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 809b 	beq.w	8007560 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 8095 	beq.w	8007560 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	d04e      	beq.n	80074f8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007464:	8a3b      	ldrh	r3, [r7, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 8098 	beq.w	800759c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007470:	8a3a      	ldrh	r2, [r7, #16]
 8007472:	429a      	cmp	r2, r3
 8007474:	f080 8092 	bcs.w	800759c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8a3a      	ldrh	r2, [r7, #16]
 800747c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	2b20      	cmp	r3, #32
 8007486:	d02b      	beq.n	80074e0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007496:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695a      	ldr	r2, [r3, #20]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0201 	bic.w	r2, r2, #1
 80074a6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695a      	ldr	r2, [r3, #20]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0210 	bic.w	r2, r2, #16
 80074d4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fd f8e5 	bl	80046aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f864 	bl	80075be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80074f6:	e051      	b.n	800759c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007500:	b29b      	uxth	r3, r3
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d047      	beq.n	80075a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007510:	8a7b      	ldrh	r3, [r7, #18]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d044      	beq.n	80075a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007524:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695a      	ldr	r2, [r3, #20]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0201 	bic.w	r2, r2, #1
 8007534:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0210 	bic.w	r2, r2, #16
 8007552:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007554:	8a7b      	ldrh	r3, [r7, #18]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f830 	bl	80075be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800755e:	e01f      	b.n	80075a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007566:	2b00      	cmp	r3, #0
 8007568:	d008      	beq.n	800757c <HAL_UART_IRQHandler+0x324>
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f8a6 	bl	80076c6 <UART_Transmit_IT>
    return;
 800757a:	e012      	b.n	80075a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00d      	beq.n	80075a2 <HAL_UART_IRQHandler+0x34a>
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d008      	beq.n	80075a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f8e7 	bl	8007764 <UART_EndTransmit_IT>
    return;
 8007596:	e004      	b.n	80075a2 <HAL_UART_IRQHandler+0x34a>
    return;
 8007598:	bf00      	nop
 800759a:	e002      	b.n	80075a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800759c:	bf00      	nop
 800759e:	e000      	b.n	80075a2 <HAL_UART_IRQHandler+0x34a>
      return;
 80075a0:	bf00      	nop
  }
}
 80075a2:	3728      	adds	r7, #40	; 0x28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	0800769f 	.word	0x0800769f

080075ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr

080075be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr

080075d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	88fa      	ldrh	r2, [r7, #6]
 80075f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2222      	movs	r2, #34	; 0x22
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007618:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0201 	orr.w	r2, r2, #1
 8007628:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0220 	orr.w	r2, r2, #32
 8007638:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	bc80      	pop	{r7}
 8007644:	4770      	bx	lr

08007646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800765c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695a      	ldr	r2, [r3, #20]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	2b01      	cmp	r3, #1
 8007674:	d107      	bne.n	8007686 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0210 	bic.w	r2, r2, #16
 8007684:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	bc80      	pop	{r7}
 800769c:	4770      	bx	lr

0800769e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff ff77 	bl	80075ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b21      	cmp	r3, #33	; 0x21
 80076d8:	d13e      	bne.n	8007758 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e2:	d114      	bne.n	800770e <UART_Transmit_IT+0x48>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d110      	bne.n	800770e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007700:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	1c9a      	adds	r2, r3, #2
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	621a      	str	r2, [r3, #32]
 800770c:	e008      	b.n	8007720 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	1c59      	adds	r1, r3, #1
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6211      	str	r1, [r2, #32]
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29b      	uxth	r3, r3
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	4619      	mov	r1, r3
 800772e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10f      	bne.n	8007754 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007742:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007752:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	e000      	b.n	800775a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007758:	2302      	movs	r3, #2
  }
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr

08007764 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800777a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7fc faef 	bl	8003d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b22      	cmp	r3, #34	; 0x22
 80077a6:	f040 8099 	bne.w	80078dc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b2:	d117      	bne.n	80077e4 <UART_Receive_IT+0x50>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d113      	bne.n	80077e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	1c9a      	adds	r2, r3, #2
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	629a      	str	r2, [r3, #40]	; 0x28
 80077e2:	e026      	b.n	8007832 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f6:	d007      	beq.n	8007808 <UART_Receive_IT+0x74>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <UART_Receive_IT+0x82>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d106      	bne.n	8007816 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e008      	b.n	8007828 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007822:	b2da      	uxtb	r2, r3
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29b      	uxth	r3, r3
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	4619      	mov	r1, r3
 8007840:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007842:	2b00      	cmp	r3, #0
 8007844:	d148      	bne.n	80078d8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0220 	bic.w	r2, r2, #32
 8007854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	2b01      	cmp	r3, #1
 8007884:	d123      	bne.n	80078ce <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0210 	bic.w	r2, r2, #16
 800789a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	2b10      	cmp	r3, #16
 80078a8:	d10a      	bne.n	80078c0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff fe79 	bl	80075be <HAL_UARTEx_RxEventCallback>
 80078cc:	e002      	b.n	80078d4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fc fa38 	bl	8003d44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e002      	b.n	80078de <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	e000      	b.n	80078de <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80078dc:	2302      	movs	r3, #2
  }
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68da      	ldr	r2, [r3, #12]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007922:	f023 030c 	bic.w	r3, r3, #12
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	430b      	orrs	r3, r1
 800792e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699a      	ldr	r2, [r3, #24]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a2c      	ldr	r2, [pc, #176]	; (80079fc <UART_SetConfig+0x114>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d103      	bne.n	8007958 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007950:	f7fe fdb4 	bl	80064bc <HAL_RCC_GetPCLK2Freq>
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	e002      	b.n	800795e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007958:	f7fe fd9c 	bl	8006494 <HAL_RCC_GetPCLK1Freq>
 800795c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4613      	mov	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	009a      	lsls	r2, r3, #2
 8007968:	441a      	add	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	fbb2 f3f3 	udiv	r3, r2, r3
 8007974:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <UART_SetConfig+0x118>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	0119      	lsls	r1, r3, #4
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	4613      	mov	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	009a      	lsls	r2, r3, #2
 8007988:	441a      	add	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	fbb2 f2f3 	udiv	r2, r2, r3
 8007994:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <UART_SetConfig+0x118>)
 8007996:	fba3 0302 	umull	r0, r3, r3, r2
 800799a:	095b      	lsrs	r3, r3, #5
 800799c:	2064      	movs	r0, #100	; 0x64
 800799e:	fb00 f303 	mul.w	r3, r0, r3
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	3332      	adds	r3, #50	; 0x32
 80079a8:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <UART_SetConfig+0x118>)
 80079aa:	fba2 2303 	umull	r2, r3, r2, r3
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079b4:	4419      	add	r1, r3
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009a      	lsls	r2, r3, #2
 80079c0:	441a      	add	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80079cc:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <UART_SetConfig+0x118>)
 80079ce:	fba3 0302 	umull	r0, r3, r3, r2
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	2064      	movs	r0, #100	; 0x64
 80079d6:	fb00 f303 	mul.w	r3, r0, r3
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	3332      	adds	r3, #50	; 0x32
 80079e0:	4a07      	ldr	r2, [pc, #28]	; (8007a00 <UART_SetConfig+0x118>)
 80079e2:	fba2 2303 	umull	r2, r3, r2, r3
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	440a      	add	r2, r1
 80079f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80079f4:	bf00      	nop
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	40013800 	.word	0x40013800
 8007a00:	51eb851f 	.word	0x51eb851f

08007a04 <atof>:
 8007a04:	2100      	movs	r1, #0
 8007a06:	f000 be4b 	b.w	80086a0 <strtod>
	...

08007a0c <__errno>:
 8007a0c:	4b01      	ldr	r3, [pc, #4]	; (8007a14 <__errno+0x8>)
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	200000ac 	.word	0x200000ac

08007a18 <__libc_init_array>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	2600      	movs	r6, #0
 8007a1c:	4d0c      	ldr	r5, [pc, #48]	; (8007a50 <__libc_init_array+0x38>)
 8007a1e:	4c0d      	ldr	r4, [pc, #52]	; (8007a54 <__libc_init_array+0x3c>)
 8007a20:	1b64      	subs	r4, r4, r5
 8007a22:	10a4      	asrs	r4, r4, #2
 8007a24:	42a6      	cmp	r6, r4
 8007a26:	d109      	bne.n	8007a3c <__libc_init_array+0x24>
 8007a28:	f004 fa48 	bl	800bebc <_init>
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	4d0a      	ldr	r5, [pc, #40]	; (8007a58 <__libc_init_array+0x40>)
 8007a30:	4c0a      	ldr	r4, [pc, #40]	; (8007a5c <__libc_init_array+0x44>)
 8007a32:	1b64      	subs	r4, r4, r5
 8007a34:	10a4      	asrs	r4, r4, #2
 8007a36:	42a6      	cmp	r6, r4
 8007a38:	d105      	bne.n	8007a46 <__libc_init_array+0x2e>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a40:	4798      	blx	r3
 8007a42:	3601      	adds	r6, #1
 8007a44:	e7ee      	b.n	8007a24 <__libc_init_array+0xc>
 8007a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a4a:	4798      	blx	r3
 8007a4c:	3601      	adds	r6, #1
 8007a4e:	e7f2      	b.n	8007a36 <__libc_init_array+0x1e>
 8007a50:	0800c5b8 	.word	0x0800c5b8
 8007a54:	0800c5b8 	.word	0x0800c5b8
 8007a58:	0800c5b8 	.word	0x0800c5b8
 8007a5c:	0800c5bc 	.word	0x0800c5bc

08007a60 <memset>:
 8007a60:	4603      	mov	r3, r0
 8007a62:	4402      	add	r2, r0
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d100      	bne.n	8007a6a <memset+0xa>
 8007a68:	4770      	bx	lr
 8007a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6e:	e7f9      	b.n	8007a64 <memset+0x4>

08007a70 <sulp>:
 8007a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a74:	460f      	mov	r7, r1
 8007a76:	4690      	mov	r8, r2
 8007a78:	f001 fd14 	bl	80094a4 <__ulp>
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	460d      	mov	r5, r1
 8007a80:	f1b8 0f00 	cmp.w	r8, #0
 8007a84:	d011      	beq.n	8007aaa <sulp+0x3a>
 8007a86:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd0b      	ble.n	8007aaa <sulp+0x3a>
 8007a92:	2400      	movs	r4, #0
 8007a94:	051b      	lsls	r3, r3, #20
 8007a96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	f7f8 fd19 	bl	80004d8 <__aeabi_dmul>
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	460d      	mov	r5, r1
 8007aaa:	4620      	mov	r0, r4
 8007aac:	4629      	mov	r1, r5
 8007aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab2:	0000      	movs	r0, r0
 8007ab4:	0000      	movs	r0, r0
	...

08007ab8 <_strtod_l>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	469b      	mov	fp, r3
 8007abe:	2300      	movs	r3, #0
 8007ac0:	b0a1      	sub	sp, #132	; 0x84
 8007ac2:	931c      	str	r3, [sp, #112]	; 0x70
 8007ac4:	4ba1      	ldr	r3, [pc, #644]	; (8007d4c <_strtod_l+0x294>)
 8007ac6:	4682      	mov	sl, r0
 8007ac8:	681f      	ldr	r7, [r3, #0]
 8007aca:	460e      	mov	r6, r1
 8007acc:	4638      	mov	r0, r7
 8007ace:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ad0:	f7f8 fb3e 	bl	8000150 <strlen>
 8007ad4:	f04f 0800 	mov.w	r8, #0
 8007ad8:	4604      	mov	r4, r0
 8007ada:	f04f 0900 	mov.w	r9, #0
 8007ade:	961b      	str	r6, [sp, #108]	; 0x6c
 8007ae0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ae2:	781a      	ldrb	r2, [r3, #0]
 8007ae4:	2a2b      	cmp	r2, #43	; 0x2b
 8007ae6:	d04c      	beq.n	8007b82 <_strtod_l+0xca>
 8007ae8:	d83a      	bhi.n	8007b60 <_strtod_l+0xa8>
 8007aea:	2a0d      	cmp	r2, #13
 8007aec:	d833      	bhi.n	8007b56 <_strtod_l+0x9e>
 8007aee:	2a08      	cmp	r2, #8
 8007af0:	d833      	bhi.n	8007b5a <_strtod_l+0xa2>
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d03d      	beq.n	8007b72 <_strtod_l+0xba>
 8007af6:	2300      	movs	r3, #0
 8007af8:	930c      	str	r3, [sp, #48]	; 0x30
 8007afa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007afc:	782b      	ldrb	r3, [r5, #0]
 8007afe:	2b30      	cmp	r3, #48	; 0x30
 8007b00:	f040 80af 	bne.w	8007c62 <_strtod_l+0x1aa>
 8007b04:	786b      	ldrb	r3, [r5, #1]
 8007b06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b0a:	2b58      	cmp	r3, #88	; 0x58
 8007b0c:	d16c      	bne.n	8007be8 <_strtod_l+0x130>
 8007b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b10:	4650      	mov	r0, sl
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	ab1c      	add	r3, sp, #112	; 0x70
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4a8d      	ldr	r2, [pc, #564]	; (8007d50 <_strtod_l+0x298>)
 8007b1a:	f8cd b008 	str.w	fp, [sp, #8]
 8007b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b20:	a91b      	add	r1, sp, #108	; 0x6c
 8007b22:	f000 fe31 	bl	8008788 <__gethex>
 8007b26:	f010 0607 	ands.w	r6, r0, #7
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	d005      	beq.n	8007b3a <_strtod_l+0x82>
 8007b2e:	2e06      	cmp	r6, #6
 8007b30:	d129      	bne.n	8007b86 <_strtod_l+0xce>
 8007b32:	2300      	movs	r3, #0
 8007b34:	3501      	adds	r5, #1
 8007b36:	951b      	str	r5, [sp, #108]	; 0x6c
 8007b38:	930c      	str	r3, [sp, #48]	; 0x30
 8007b3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f040 8596 	bne.w	800866e <_strtod_l+0xbb6>
 8007b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b44:	b1d3      	cbz	r3, 8007b7c <_strtod_l+0xc4>
 8007b46:	4642      	mov	r2, r8
 8007b48:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4619      	mov	r1, r3
 8007b50:	b021      	add	sp, #132	; 0x84
 8007b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b56:	2a20      	cmp	r2, #32
 8007b58:	d1cd      	bne.n	8007af6 <_strtod_l+0x3e>
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b5e:	e7bf      	b.n	8007ae0 <_strtod_l+0x28>
 8007b60:	2a2d      	cmp	r2, #45	; 0x2d
 8007b62:	d1c8      	bne.n	8007af6 <_strtod_l+0x3e>
 8007b64:	2201      	movs	r2, #1
 8007b66:	920c      	str	r2, [sp, #48]	; 0x30
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1c3      	bne.n	8007afa <_strtod_l+0x42>
 8007b72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b74:	961b      	str	r6, [sp, #108]	; 0x6c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f040 8577 	bne.w	800866a <_strtod_l+0xbb2>
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	e7e4      	b.n	8007b4c <_strtod_l+0x94>
 8007b82:	2200      	movs	r2, #0
 8007b84:	e7ef      	b.n	8007b66 <_strtod_l+0xae>
 8007b86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007b88:	b13a      	cbz	r2, 8007b9a <_strtod_l+0xe2>
 8007b8a:	2135      	movs	r1, #53	; 0x35
 8007b8c:	a81e      	add	r0, sp, #120	; 0x78
 8007b8e:	f001 fd8d 	bl	80096ac <__copybits>
 8007b92:	4650      	mov	r0, sl
 8007b94:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b96:	f001 f955 	bl	8008e44 <_Bfree>
 8007b9a:	3e01      	subs	r6, #1
 8007b9c:	2e05      	cmp	r6, #5
 8007b9e:	d807      	bhi.n	8007bb0 <_strtod_l+0xf8>
 8007ba0:	e8df f006 	tbb	[pc, r6]
 8007ba4:	1d180b0e 	.word	0x1d180b0e
 8007ba8:	030e      	.short	0x030e
 8007baa:	f04f 0900 	mov.w	r9, #0
 8007bae:	46c8      	mov	r8, r9
 8007bb0:	0721      	lsls	r1, r4, #28
 8007bb2:	d5c2      	bpl.n	8007b3a <_strtod_l+0x82>
 8007bb4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007bb8:	e7bf      	b.n	8007b3a <_strtod_l+0x82>
 8007bba:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8007bbe:	e7f7      	b.n	8007bb0 <_strtod_l+0xf8>
 8007bc0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007bc2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8007bc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007bca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007bce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007bd2:	e7ed      	b.n	8007bb0 <_strtod_l+0xf8>
 8007bd4:	f04f 0800 	mov.w	r8, #0
 8007bd8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007d54 <_strtod_l+0x29c>
 8007bdc:	e7e8      	b.n	8007bb0 <_strtod_l+0xf8>
 8007bde:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007be2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007be6:	e7e3      	b.n	8007bb0 <_strtod_l+0xf8>
 8007be8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	921b      	str	r2, [sp, #108]	; 0x6c
 8007bee:	785b      	ldrb	r3, [r3, #1]
 8007bf0:	2b30      	cmp	r3, #48	; 0x30
 8007bf2:	d0f9      	beq.n	8007be8 <_strtod_l+0x130>
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0a0      	beq.n	8007b3a <_strtod_l+0x82>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	9307      	str	r3, [sp, #28]
 8007bfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bfe:	220a      	movs	r2, #10
 8007c00:	9308      	str	r3, [sp, #32]
 8007c02:	2300      	movs	r3, #0
 8007c04:	469b      	mov	fp, r3
 8007c06:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007c0a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007c0c:	7805      	ldrb	r5, [r0, #0]
 8007c0e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007c12:	b2d9      	uxtb	r1, r3
 8007c14:	2909      	cmp	r1, #9
 8007c16:	d926      	bls.n	8007c66 <_strtod_l+0x1ae>
 8007c18:	4622      	mov	r2, r4
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f001 fe08 	bl	8009830 <strncmp>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d032      	beq.n	8007c8a <_strtod_l+0x1d2>
 8007c24:	2000      	movs	r0, #0
 8007c26:	462b      	mov	r3, r5
 8007c28:	465c      	mov	r4, fp
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	9004      	str	r0, [sp, #16]
 8007c2e:	2b65      	cmp	r3, #101	; 0x65
 8007c30:	d001      	beq.n	8007c36 <_strtod_l+0x17e>
 8007c32:	2b45      	cmp	r3, #69	; 0x45
 8007c34:	d113      	bne.n	8007c5e <_strtod_l+0x1a6>
 8007c36:	b91c      	cbnz	r4, 8007c40 <_strtod_l+0x188>
 8007c38:	9b07      	ldr	r3, [sp, #28]
 8007c3a:	4303      	orrs	r3, r0
 8007c3c:	d099      	beq.n	8007b72 <_strtod_l+0xba>
 8007c3e:	2400      	movs	r4, #0
 8007c40:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007c42:	1c73      	adds	r3, r6, #1
 8007c44:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c46:	7873      	ldrb	r3, [r6, #1]
 8007c48:	2b2b      	cmp	r3, #43	; 0x2b
 8007c4a:	d078      	beq.n	8007d3e <_strtod_l+0x286>
 8007c4c:	2b2d      	cmp	r3, #45	; 0x2d
 8007c4e:	d07b      	beq.n	8007d48 <_strtod_l+0x290>
 8007c50:	2700      	movs	r7, #0
 8007c52:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007c56:	2909      	cmp	r1, #9
 8007c58:	f240 8082 	bls.w	8007d60 <_strtod_l+0x2a8>
 8007c5c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007c5e:	2500      	movs	r5, #0
 8007c60:	e09e      	b.n	8007da0 <_strtod_l+0x2e8>
 8007c62:	2300      	movs	r3, #0
 8007c64:	e7c9      	b.n	8007bfa <_strtod_l+0x142>
 8007c66:	f1bb 0f08 	cmp.w	fp, #8
 8007c6a:	bfd5      	itete	le
 8007c6c:	9906      	ldrle	r1, [sp, #24]
 8007c6e:	9905      	ldrgt	r1, [sp, #20]
 8007c70:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c74:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c78:	f100 0001 	add.w	r0, r0, #1
 8007c7c:	bfd4      	ite	le
 8007c7e:	9306      	strle	r3, [sp, #24]
 8007c80:	9305      	strgt	r3, [sp, #20]
 8007c82:	f10b 0b01 	add.w	fp, fp, #1
 8007c86:	901b      	str	r0, [sp, #108]	; 0x6c
 8007c88:	e7bf      	b.n	8007c0a <_strtod_l+0x152>
 8007c8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c8c:	191a      	adds	r2, r3, r4
 8007c8e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c90:	5d1b      	ldrb	r3, [r3, r4]
 8007c92:	f1bb 0f00 	cmp.w	fp, #0
 8007c96:	d036      	beq.n	8007d06 <_strtod_l+0x24e>
 8007c98:	465c      	mov	r4, fp
 8007c9a:	9004      	str	r0, [sp, #16]
 8007c9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007ca0:	2a09      	cmp	r2, #9
 8007ca2:	d912      	bls.n	8007cca <_strtod_l+0x212>
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	e7c2      	b.n	8007c2e <_strtod_l+0x176>
 8007ca8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007caa:	3001      	adds	r0, #1
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	921b      	str	r2, [sp, #108]	; 0x6c
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	2b30      	cmp	r3, #48	; 0x30
 8007cb4:	d0f8      	beq.n	8007ca8 <_strtod_l+0x1f0>
 8007cb6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007cba:	2a08      	cmp	r2, #8
 8007cbc:	f200 84dc 	bhi.w	8008678 <_strtod_l+0xbc0>
 8007cc0:	9004      	str	r0, [sp, #16]
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007cc8:	9208      	str	r2, [sp, #32]
 8007cca:	3b30      	subs	r3, #48	; 0x30
 8007ccc:	f100 0201 	add.w	r2, r0, #1
 8007cd0:	d013      	beq.n	8007cfa <_strtod_l+0x242>
 8007cd2:	9904      	ldr	r1, [sp, #16]
 8007cd4:	1905      	adds	r5, r0, r4
 8007cd6:	4411      	add	r1, r2
 8007cd8:	9104      	str	r1, [sp, #16]
 8007cda:	4622      	mov	r2, r4
 8007cdc:	210a      	movs	r1, #10
 8007cde:	42aa      	cmp	r2, r5
 8007ce0:	d113      	bne.n	8007d0a <_strtod_l+0x252>
 8007ce2:	1822      	adds	r2, r4, r0
 8007ce4:	2a08      	cmp	r2, #8
 8007ce6:	f104 0401 	add.w	r4, r4, #1
 8007cea:	4404      	add	r4, r0
 8007cec:	dc1b      	bgt.n	8007d26 <_strtod_l+0x26e>
 8007cee:	220a      	movs	r2, #10
 8007cf0:	9906      	ldr	r1, [sp, #24]
 8007cf2:	fb02 3301 	mla	r3, r2, r1, r3
 8007cf6:	9306      	str	r3, [sp, #24]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	1c59      	adds	r1, r3, #1
 8007d00:	911b      	str	r1, [sp, #108]	; 0x6c
 8007d02:	785b      	ldrb	r3, [r3, #1]
 8007d04:	e7ca      	b.n	8007c9c <_strtod_l+0x1e4>
 8007d06:	4658      	mov	r0, fp
 8007d08:	e7d3      	b.n	8007cb2 <_strtod_l+0x1fa>
 8007d0a:	2a08      	cmp	r2, #8
 8007d0c:	dc04      	bgt.n	8007d18 <_strtod_l+0x260>
 8007d0e:	9f06      	ldr	r7, [sp, #24]
 8007d10:	434f      	muls	r7, r1
 8007d12:	9706      	str	r7, [sp, #24]
 8007d14:	3201      	adds	r2, #1
 8007d16:	e7e2      	b.n	8007cde <_strtod_l+0x226>
 8007d18:	1c57      	adds	r7, r2, #1
 8007d1a:	2f10      	cmp	r7, #16
 8007d1c:	bfde      	ittt	le
 8007d1e:	9f05      	ldrle	r7, [sp, #20]
 8007d20:	434f      	mulle	r7, r1
 8007d22:	9705      	strle	r7, [sp, #20]
 8007d24:	e7f6      	b.n	8007d14 <_strtod_l+0x25c>
 8007d26:	2c10      	cmp	r4, #16
 8007d28:	bfdf      	itttt	le
 8007d2a:	220a      	movle	r2, #10
 8007d2c:	9905      	ldrle	r1, [sp, #20]
 8007d2e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d32:	9305      	strle	r3, [sp, #20]
 8007d34:	e7e0      	b.n	8007cf8 <_strtod_l+0x240>
 8007d36:	2300      	movs	r3, #0
 8007d38:	2201      	movs	r2, #1
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	e77c      	b.n	8007c38 <_strtod_l+0x180>
 8007d3e:	2700      	movs	r7, #0
 8007d40:	1cb3      	adds	r3, r6, #2
 8007d42:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d44:	78b3      	ldrb	r3, [r6, #2]
 8007d46:	e784      	b.n	8007c52 <_strtod_l+0x19a>
 8007d48:	2701      	movs	r7, #1
 8007d4a:	e7f9      	b.n	8007d40 <_strtod_l+0x288>
 8007d4c:	0800c014 	.word	0x0800c014
 8007d50:	0800bf48 	.word	0x0800bf48
 8007d54:	7ff00000 	.word	0x7ff00000
 8007d58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d5a:	1c59      	adds	r1, r3, #1
 8007d5c:	911b      	str	r1, [sp, #108]	; 0x6c
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b30      	cmp	r3, #48	; 0x30
 8007d62:	d0f9      	beq.n	8007d58 <_strtod_l+0x2a0>
 8007d64:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007d68:	2908      	cmp	r1, #8
 8007d6a:	f63f af78 	bhi.w	8007c5e <_strtod_l+0x1a6>
 8007d6e:	f04f 0e0a 	mov.w	lr, #10
 8007d72:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007d76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d78:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d7c:	1c59      	adds	r1, r3, #1
 8007d7e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007d86:	2d09      	cmp	r5, #9
 8007d88:	d935      	bls.n	8007df6 <_strtod_l+0x33e>
 8007d8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007d8c:	1b49      	subs	r1, r1, r5
 8007d8e:	2908      	cmp	r1, #8
 8007d90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007d94:	dc02      	bgt.n	8007d9c <_strtod_l+0x2e4>
 8007d96:	4565      	cmp	r5, ip
 8007d98:	bfa8      	it	ge
 8007d9a:	4665      	movge	r5, ip
 8007d9c:	b107      	cbz	r7, 8007da0 <_strtod_l+0x2e8>
 8007d9e:	426d      	negs	r5, r5
 8007da0:	2c00      	cmp	r4, #0
 8007da2:	d14c      	bne.n	8007e3e <_strtod_l+0x386>
 8007da4:	9907      	ldr	r1, [sp, #28]
 8007da6:	4301      	orrs	r1, r0
 8007da8:	f47f aec7 	bne.w	8007b3a <_strtod_l+0x82>
 8007dac:	2a00      	cmp	r2, #0
 8007dae:	f47f aee0 	bne.w	8007b72 <_strtod_l+0xba>
 8007db2:	2b69      	cmp	r3, #105	; 0x69
 8007db4:	d026      	beq.n	8007e04 <_strtod_l+0x34c>
 8007db6:	dc23      	bgt.n	8007e00 <_strtod_l+0x348>
 8007db8:	2b49      	cmp	r3, #73	; 0x49
 8007dba:	d023      	beq.n	8007e04 <_strtod_l+0x34c>
 8007dbc:	2b4e      	cmp	r3, #78	; 0x4e
 8007dbe:	f47f aed8 	bne.w	8007b72 <_strtod_l+0xba>
 8007dc2:	499c      	ldr	r1, [pc, #624]	; (8008034 <_strtod_l+0x57c>)
 8007dc4:	a81b      	add	r0, sp, #108	; 0x6c
 8007dc6:	f000 ff2d 	bl	8008c24 <__match>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	f43f aed1 	beq.w	8007b72 <_strtod_l+0xba>
 8007dd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b28      	cmp	r3, #40	; 0x28
 8007dd6:	d12c      	bne.n	8007e32 <_strtod_l+0x37a>
 8007dd8:	4997      	ldr	r1, [pc, #604]	; (8008038 <_strtod_l+0x580>)
 8007dda:	aa1e      	add	r2, sp, #120	; 0x78
 8007ddc:	a81b      	add	r0, sp, #108	; 0x6c
 8007dde:	f000 ff35 	bl	8008c4c <__hexnan>
 8007de2:	2805      	cmp	r0, #5
 8007de4:	d125      	bne.n	8007e32 <_strtod_l+0x37a>
 8007de6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007de8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007dec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007df0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007df4:	e6a1      	b.n	8007b3a <_strtod_l+0x82>
 8007df6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8007dfa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007dfe:	e7bc      	b.n	8007d7a <_strtod_l+0x2c2>
 8007e00:	2b6e      	cmp	r3, #110	; 0x6e
 8007e02:	e7dc      	b.n	8007dbe <_strtod_l+0x306>
 8007e04:	498d      	ldr	r1, [pc, #564]	; (800803c <_strtod_l+0x584>)
 8007e06:	a81b      	add	r0, sp, #108	; 0x6c
 8007e08:	f000 ff0c 	bl	8008c24 <__match>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f43f aeb0 	beq.w	8007b72 <_strtod_l+0xba>
 8007e12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e14:	498a      	ldr	r1, [pc, #552]	; (8008040 <_strtod_l+0x588>)
 8007e16:	3b01      	subs	r3, #1
 8007e18:	a81b      	add	r0, sp, #108	; 0x6c
 8007e1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e1c:	f000 ff02 	bl	8008c24 <__match>
 8007e20:	b910      	cbnz	r0, 8007e28 <_strtod_l+0x370>
 8007e22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e24:	3301      	adds	r3, #1
 8007e26:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e28:	f04f 0800 	mov.w	r8, #0
 8007e2c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8008050 <_strtod_l+0x598>
 8007e30:	e683      	b.n	8007b3a <_strtod_l+0x82>
 8007e32:	4884      	ldr	r0, [pc, #528]	; (8008044 <_strtod_l+0x58c>)
 8007e34:	f001 fce6 	bl	8009804 <nan>
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4689      	mov	r9, r1
 8007e3c:	e67d      	b.n	8007b3a <_strtod_l+0x82>
 8007e3e:	9b04      	ldr	r3, [sp, #16]
 8007e40:	f1bb 0f00 	cmp.w	fp, #0
 8007e44:	bf08      	it	eq
 8007e46:	46a3      	moveq	fp, r4
 8007e48:	1aeb      	subs	r3, r5, r3
 8007e4a:	2c10      	cmp	r4, #16
 8007e4c:	9806      	ldr	r0, [sp, #24]
 8007e4e:	4626      	mov	r6, r4
 8007e50:	9307      	str	r3, [sp, #28]
 8007e52:	bfa8      	it	ge
 8007e54:	2610      	movge	r6, #16
 8007e56:	f7f8 fac5 	bl	80003e4 <__aeabi_ui2d>
 8007e5a:	2c09      	cmp	r4, #9
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	4689      	mov	r9, r1
 8007e60:	dd13      	ble.n	8007e8a <_strtod_l+0x3d2>
 8007e62:	4b79      	ldr	r3, [pc, #484]	; (8008048 <_strtod_l+0x590>)
 8007e64:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e68:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e6c:	f7f8 fb34 	bl	80004d8 <__aeabi_dmul>
 8007e70:	4680      	mov	r8, r0
 8007e72:	9805      	ldr	r0, [sp, #20]
 8007e74:	4689      	mov	r9, r1
 8007e76:	f7f8 fab5 	bl	80003e4 <__aeabi_ui2d>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 f973 	bl	800016c <__adddf3>
 8007e86:	4680      	mov	r8, r0
 8007e88:	4689      	mov	r9, r1
 8007e8a:	2c0f      	cmp	r4, #15
 8007e8c:	dc36      	bgt.n	8007efc <_strtod_l+0x444>
 8007e8e:	9b07      	ldr	r3, [sp, #28]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f43f ae52 	beq.w	8007b3a <_strtod_l+0x82>
 8007e96:	dd22      	ble.n	8007ede <_strtod_l+0x426>
 8007e98:	2b16      	cmp	r3, #22
 8007e9a:	dc09      	bgt.n	8007eb0 <_strtod_l+0x3f8>
 8007e9c:	4c6a      	ldr	r4, [pc, #424]	; (8008048 <_strtod_l+0x590>)
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007eaa:	f7f8 fb15 	bl	80004d8 <__aeabi_dmul>
 8007eae:	e7c3      	b.n	8007e38 <_strtod_l+0x380>
 8007eb0:	9a07      	ldr	r2, [sp, #28]
 8007eb2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	db20      	blt.n	8007efc <_strtod_l+0x444>
 8007eba:	4d63      	ldr	r5, [pc, #396]	; (8008048 <_strtod_l+0x590>)
 8007ebc:	f1c4 040f 	rsb	r4, r4, #15
 8007ec0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eca:	464b      	mov	r3, r9
 8007ecc:	f7f8 fb04 	bl	80004d8 <__aeabi_dmul>
 8007ed0:	9b07      	ldr	r3, [sp, #28]
 8007ed2:	1b1c      	subs	r4, r3, r4
 8007ed4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007ed8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007edc:	e7e5      	b.n	8007eaa <_strtod_l+0x3f2>
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	3316      	adds	r3, #22
 8007ee2:	db0b      	blt.n	8007efc <_strtod_l+0x444>
 8007ee4:	9b04      	ldr	r3, [sp, #16]
 8007ee6:	4a58      	ldr	r2, [pc, #352]	; (8008048 <_strtod_l+0x590>)
 8007ee8:	1b5d      	subs	r5, r3, r5
 8007eea:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007eee:	4640      	mov	r0, r8
 8007ef0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	f7f8 fc19 	bl	800072c <__aeabi_ddiv>
 8007efa:	e79d      	b.n	8007e38 <_strtod_l+0x380>
 8007efc:	9b07      	ldr	r3, [sp, #28]
 8007efe:	1ba6      	subs	r6, r4, r6
 8007f00:	441e      	add	r6, r3
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	dd71      	ble.n	8007fea <_strtod_l+0x532>
 8007f06:	f016 030f 	ands.w	r3, r6, #15
 8007f0a:	d00a      	beq.n	8007f22 <_strtod_l+0x46a>
 8007f0c:	494e      	ldr	r1, [pc, #312]	; (8008048 <_strtod_l+0x590>)
 8007f0e:	4642      	mov	r2, r8
 8007f10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f18:	464b      	mov	r3, r9
 8007f1a:	f7f8 fadd 	bl	80004d8 <__aeabi_dmul>
 8007f1e:	4680      	mov	r8, r0
 8007f20:	4689      	mov	r9, r1
 8007f22:	f036 060f 	bics.w	r6, r6, #15
 8007f26:	d050      	beq.n	8007fca <_strtod_l+0x512>
 8007f28:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007f2c:	dd27      	ble.n	8007f7e <_strtod_l+0x4c6>
 8007f2e:	f04f 0b00 	mov.w	fp, #0
 8007f32:	f8cd b010 	str.w	fp, [sp, #16]
 8007f36:	f8cd b020 	str.w	fp, [sp, #32]
 8007f3a:	f8cd b018 	str.w	fp, [sp, #24]
 8007f3e:	2322      	movs	r3, #34	; 0x22
 8007f40:	f04f 0800 	mov.w	r8, #0
 8007f44:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008050 <_strtod_l+0x598>
 8007f48:	f8ca 3000 	str.w	r3, [sl]
 8007f4c:	9b08      	ldr	r3, [sp, #32]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f43f adf3 	beq.w	8007b3a <_strtod_l+0x82>
 8007f54:	4650      	mov	r0, sl
 8007f56:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f58:	f000 ff74 	bl	8008e44 <_Bfree>
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	9906      	ldr	r1, [sp, #24]
 8007f60:	f000 ff70 	bl	8008e44 <_Bfree>
 8007f64:	4650      	mov	r0, sl
 8007f66:	9904      	ldr	r1, [sp, #16]
 8007f68:	f000 ff6c 	bl	8008e44 <_Bfree>
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	9908      	ldr	r1, [sp, #32]
 8007f70:	f000 ff68 	bl	8008e44 <_Bfree>
 8007f74:	4659      	mov	r1, fp
 8007f76:	4650      	mov	r0, sl
 8007f78:	f000 ff64 	bl	8008e44 <_Bfree>
 8007f7c:	e5dd      	b.n	8007b3a <_strtod_l+0x82>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4640      	mov	r0, r8
 8007f82:	4649      	mov	r1, r9
 8007f84:	461f      	mov	r7, r3
 8007f86:	1136      	asrs	r6, r6, #4
 8007f88:	2e01      	cmp	r6, #1
 8007f8a:	dc21      	bgt.n	8007fd0 <_strtod_l+0x518>
 8007f8c:	b10b      	cbz	r3, 8007f92 <_strtod_l+0x4da>
 8007f8e:	4680      	mov	r8, r0
 8007f90:	4689      	mov	r9, r1
 8007f92:	4b2e      	ldr	r3, [pc, #184]	; (800804c <_strtod_l+0x594>)
 8007f94:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007f98:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	f7f8 fa98 	bl	80004d8 <__aeabi_dmul>
 8007fa8:	4b29      	ldr	r3, [pc, #164]	; (8008050 <_strtod_l+0x598>)
 8007faa:	460a      	mov	r2, r1
 8007fac:	400b      	ands	r3, r1
 8007fae:	4929      	ldr	r1, [pc, #164]	; (8008054 <_strtod_l+0x59c>)
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	428b      	cmp	r3, r1
 8007fb4:	d8bb      	bhi.n	8007f2e <_strtod_l+0x476>
 8007fb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007fba:	428b      	cmp	r3, r1
 8007fbc:	bf86      	itte	hi
 8007fbe:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8007fc2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008058 <_strtod_l+0x5a0>
 8007fc6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9305      	str	r3, [sp, #20]
 8007fce:	e07e      	b.n	80080ce <_strtod_l+0x616>
 8007fd0:	07f2      	lsls	r2, r6, #31
 8007fd2:	d507      	bpl.n	8007fe4 <_strtod_l+0x52c>
 8007fd4:	4b1d      	ldr	r3, [pc, #116]	; (800804c <_strtod_l+0x594>)
 8007fd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 fa7b 	bl	80004d8 <__aeabi_dmul>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	3701      	adds	r7, #1
 8007fe6:	1076      	asrs	r6, r6, #1
 8007fe8:	e7ce      	b.n	8007f88 <_strtod_l+0x4d0>
 8007fea:	d0ee      	beq.n	8007fca <_strtod_l+0x512>
 8007fec:	4276      	negs	r6, r6
 8007fee:	f016 020f 	ands.w	r2, r6, #15
 8007ff2:	d00a      	beq.n	800800a <_strtod_l+0x552>
 8007ff4:	4b14      	ldr	r3, [pc, #80]	; (8008048 <_strtod_l+0x590>)
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 fb93 	bl	800072c <__aeabi_ddiv>
 8008006:	4680      	mov	r8, r0
 8008008:	4689      	mov	r9, r1
 800800a:	1136      	asrs	r6, r6, #4
 800800c:	d0dd      	beq.n	8007fca <_strtod_l+0x512>
 800800e:	2e1f      	cmp	r6, #31
 8008010:	dd24      	ble.n	800805c <_strtod_l+0x5a4>
 8008012:	f04f 0b00 	mov.w	fp, #0
 8008016:	f8cd b010 	str.w	fp, [sp, #16]
 800801a:	f8cd b020 	str.w	fp, [sp, #32]
 800801e:	f8cd b018 	str.w	fp, [sp, #24]
 8008022:	2322      	movs	r3, #34	; 0x22
 8008024:	f04f 0800 	mov.w	r8, #0
 8008028:	f04f 0900 	mov.w	r9, #0
 800802c:	f8ca 3000 	str.w	r3, [sl]
 8008030:	e78c      	b.n	8007f4c <_strtod_l+0x494>
 8008032:	bf00      	nop
 8008034:	0800bf45 	.word	0x0800bf45
 8008038:	0800bf5c 	.word	0x0800bf5c
 800803c:	0800bf3c 	.word	0x0800bf3c
 8008040:	0800bf3f 	.word	0x0800bf3f
 8008044:	0800c1d7 	.word	0x0800c1d7
 8008048:	0800c0c8 	.word	0x0800c0c8
 800804c:	0800c0a0 	.word	0x0800c0a0
 8008050:	7ff00000 	.word	0x7ff00000
 8008054:	7ca00000 	.word	0x7ca00000
 8008058:	7fefffff 	.word	0x7fefffff
 800805c:	f016 0310 	ands.w	r3, r6, #16
 8008060:	bf18      	it	ne
 8008062:	236a      	movne	r3, #106	; 0x6a
 8008064:	4640      	mov	r0, r8
 8008066:	9305      	str	r3, [sp, #20]
 8008068:	4649      	mov	r1, r9
 800806a:	2300      	movs	r3, #0
 800806c:	4fb2      	ldr	r7, [pc, #712]	; (8008338 <_strtod_l+0x880>)
 800806e:	07f2      	lsls	r2, r6, #31
 8008070:	d504      	bpl.n	800807c <_strtod_l+0x5c4>
 8008072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008076:	f7f8 fa2f 	bl	80004d8 <__aeabi_dmul>
 800807a:	2301      	movs	r3, #1
 800807c:	1076      	asrs	r6, r6, #1
 800807e:	f107 0708 	add.w	r7, r7, #8
 8008082:	d1f4      	bne.n	800806e <_strtod_l+0x5b6>
 8008084:	b10b      	cbz	r3, 800808a <_strtod_l+0x5d2>
 8008086:	4680      	mov	r8, r0
 8008088:	4689      	mov	r9, r1
 800808a:	9b05      	ldr	r3, [sp, #20]
 800808c:	b1bb      	cbz	r3, 80080be <_strtod_l+0x606>
 800808e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8008092:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008096:	2b00      	cmp	r3, #0
 8008098:	4649      	mov	r1, r9
 800809a:	dd10      	ble.n	80080be <_strtod_l+0x606>
 800809c:	2b1f      	cmp	r3, #31
 800809e:	f340 812b 	ble.w	80082f8 <_strtod_l+0x840>
 80080a2:	2b34      	cmp	r3, #52	; 0x34
 80080a4:	bfd8      	it	le
 80080a6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80080aa:	f04f 0800 	mov.w	r8, #0
 80080ae:	bfcf      	iteee	gt
 80080b0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80080b4:	3b20      	suble	r3, #32
 80080b6:	fa02 f303 	lslle.w	r3, r2, r3
 80080ba:	ea03 0901 	andle.w	r9, r3, r1
 80080be:	2200      	movs	r2, #0
 80080c0:	2300      	movs	r3, #0
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	f7f8 fc6f 	bl	80009a8 <__aeabi_dcmpeq>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d1a1      	bne.n	8008012 <_strtod_l+0x55a>
 80080ce:	9b06      	ldr	r3, [sp, #24]
 80080d0:	465a      	mov	r2, fp
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4650      	mov	r0, sl
 80080d6:	4623      	mov	r3, r4
 80080d8:	9908      	ldr	r1, [sp, #32]
 80080da:	f000 ff1f 	bl	8008f1c <__s2b>
 80080de:	9008      	str	r0, [sp, #32]
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f43f af24 	beq.w	8007f2e <_strtod_l+0x476>
 80080e6:	9b04      	ldr	r3, [sp, #16]
 80080e8:	f04f 0b00 	mov.w	fp, #0
 80080ec:	1b5d      	subs	r5, r3, r5
 80080ee:	9b07      	ldr	r3, [sp, #28]
 80080f0:	f8cd b010 	str.w	fp, [sp, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	bfb4      	ite	lt
 80080f8:	462b      	movlt	r3, r5
 80080fa:	2300      	movge	r3, #0
 80080fc:	930e      	str	r3, [sp, #56]	; 0x38
 80080fe:	9b07      	ldr	r3, [sp, #28]
 8008100:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008104:	9316      	str	r3, [sp, #88]	; 0x58
 8008106:	9b08      	ldr	r3, [sp, #32]
 8008108:	4650      	mov	r0, sl
 800810a:	6859      	ldr	r1, [r3, #4]
 800810c:	f000 fe5a 	bl	8008dc4 <_Balloc>
 8008110:	9006      	str	r0, [sp, #24]
 8008112:	2800      	cmp	r0, #0
 8008114:	f43f af13 	beq.w	8007f3e <_strtod_l+0x486>
 8008118:	9b08      	ldr	r3, [sp, #32]
 800811a:	300c      	adds	r0, #12
 800811c:	691a      	ldr	r2, [r3, #16]
 800811e:	f103 010c 	add.w	r1, r3, #12
 8008122:	3202      	adds	r2, #2
 8008124:	0092      	lsls	r2, r2, #2
 8008126:	f000 fe3f 	bl	8008da8 <memcpy>
 800812a:	ab1e      	add	r3, sp, #120	; 0x78
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	ab1d      	add	r3, sp, #116	; 0x74
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	4642      	mov	r2, r8
 8008134:	464b      	mov	r3, r9
 8008136:	4650      	mov	r0, sl
 8008138:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800813c:	f001 fa2c 	bl	8009598 <__d2b>
 8008140:	901c      	str	r0, [sp, #112]	; 0x70
 8008142:	2800      	cmp	r0, #0
 8008144:	f43f aefb 	beq.w	8007f3e <_strtod_l+0x486>
 8008148:	2101      	movs	r1, #1
 800814a:	4650      	mov	r0, sl
 800814c:	f000 ff7e 	bl	800904c <__i2b>
 8008150:	4603      	mov	r3, r0
 8008152:	9004      	str	r0, [sp, #16]
 8008154:	2800      	cmp	r0, #0
 8008156:	f43f aef2 	beq.w	8007f3e <_strtod_l+0x486>
 800815a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800815c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800815e:	2d00      	cmp	r5, #0
 8008160:	bfab      	itete	ge
 8008162:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008164:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008166:	18ee      	addge	r6, r5, r3
 8008168:	1b5c      	sublt	r4, r3, r5
 800816a:	9b05      	ldr	r3, [sp, #20]
 800816c:	bfa8      	it	ge
 800816e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008170:	eba5 0503 	sub.w	r5, r5, r3
 8008174:	4415      	add	r5, r2
 8008176:	4b71      	ldr	r3, [pc, #452]	; (800833c <_strtod_l+0x884>)
 8008178:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800817c:	bfb8      	it	lt
 800817e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008180:	429d      	cmp	r5, r3
 8008182:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008186:	f280 80c9 	bge.w	800831c <_strtod_l+0x864>
 800818a:	1b5b      	subs	r3, r3, r5
 800818c:	2b1f      	cmp	r3, #31
 800818e:	f04f 0701 	mov.w	r7, #1
 8008192:	eba2 0203 	sub.w	r2, r2, r3
 8008196:	f300 80b6 	bgt.w	8008306 <_strtod_l+0x84e>
 800819a:	2500      	movs	r5, #0
 800819c:	fa07 f303 	lsl.w	r3, r7, r3
 80081a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80081a2:	18b7      	adds	r7, r6, r2
 80081a4:	9b05      	ldr	r3, [sp, #20]
 80081a6:	42be      	cmp	r6, r7
 80081a8:	4414      	add	r4, r2
 80081aa:	441c      	add	r4, r3
 80081ac:	4633      	mov	r3, r6
 80081ae:	bfa8      	it	ge
 80081b0:	463b      	movge	r3, r7
 80081b2:	42a3      	cmp	r3, r4
 80081b4:	bfa8      	it	ge
 80081b6:	4623      	movge	r3, r4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	bfc2      	ittt	gt
 80081bc:	1aff      	subgt	r7, r7, r3
 80081be:	1ae4      	subgt	r4, r4, r3
 80081c0:	1af6      	subgt	r6, r6, r3
 80081c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dd17      	ble.n	80081f8 <_strtod_l+0x740>
 80081c8:	461a      	mov	r2, r3
 80081ca:	4650      	mov	r0, sl
 80081cc:	9904      	ldr	r1, [sp, #16]
 80081ce:	f000 fff7 	bl	80091c0 <__pow5mult>
 80081d2:	9004      	str	r0, [sp, #16]
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f43f aeb2 	beq.w	8007f3e <_strtod_l+0x486>
 80081da:	4601      	mov	r1, r0
 80081dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80081de:	4650      	mov	r0, sl
 80081e0:	f000 ff4a 	bl	8009078 <__multiply>
 80081e4:	9009      	str	r0, [sp, #36]	; 0x24
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f43f aea9 	beq.w	8007f3e <_strtod_l+0x486>
 80081ec:	4650      	mov	r0, sl
 80081ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081f0:	f000 fe28 	bl	8008e44 <_Bfree>
 80081f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f6:	931c      	str	r3, [sp, #112]	; 0x70
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	f300 8093 	bgt.w	8008324 <_strtod_l+0x86c>
 80081fe:	9b07      	ldr	r3, [sp, #28]
 8008200:	2b00      	cmp	r3, #0
 8008202:	dd08      	ble.n	8008216 <_strtod_l+0x75e>
 8008204:	4650      	mov	r0, sl
 8008206:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008208:	9906      	ldr	r1, [sp, #24]
 800820a:	f000 ffd9 	bl	80091c0 <__pow5mult>
 800820e:	9006      	str	r0, [sp, #24]
 8008210:	2800      	cmp	r0, #0
 8008212:	f43f ae94 	beq.w	8007f3e <_strtod_l+0x486>
 8008216:	2c00      	cmp	r4, #0
 8008218:	dd08      	ble.n	800822c <_strtod_l+0x774>
 800821a:	4622      	mov	r2, r4
 800821c:	4650      	mov	r0, sl
 800821e:	9906      	ldr	r1, [sp, #24]
 8008220:	f001 f828 	bl	8009274 <__lshift>
 8008224:	9006      	str	r0, [sp, #24]
 8008226:	2800      	cmp	r0, #0
 8008228:	f43f ae89 	beq.w	8007f3e <_strtod_l+0x486>
 800822c:	2e00      	cmp	r6, #0
 800822e:	dd08      	ble.n	8008242 <_strtod_l+0x78a>
 8008230:	4632      	mov	r2, r6
 8008232:	4650      	mov	r0, sl
 8008234:	9904      	ldr	r1, [sp, #16]
 8008236:	f001 f81d 	bl	8009274 <__lshift>
 800823a:	9004      	str	r0, [sp, #16]
 800823c:	2800      	cmp	r0, #0
 800823e:	f43f ae7e 	beq.w	8007f3e <_strtod_l+0x486>
 8008242:	4650      	mov	r0, sl
 8008244:	9a06      	ldr	r2, [sp, #24]
 8008246:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008248:	f001 f89c 	bl	8009384 <__mdiff>
 800824c:	4683      	mov	fp, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	f43f ae75 	beq.w	8007f3e <_strtod_l+0x486>
 8008254:	2400      	movs	r4, #0
 8008256:	68c3      	ldr	r3, [r0, #12]
 8008258:	9904      	ldr	r1, [sp, #16]
 800825a:	60c4      	str	r4, [r0, #12]
 800825c:	930d      	str	r3, [sp, #52]	; 0x34
 800825e:	f001 f875 	bl	800934c <__mcmp>
 8008262:	42a0      	cmp	r0, r4
 8008264:	da70      	bge.n	8008348 <_strtod_l+0x890>
 8008266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008268:	ea53 0308 	orrs.w	r3, r3, r8
 800826c:	f040 8096 	bne.w	800839c <_strtod_l+0x8e4>
 8008270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 8091 	bne.w	800839c <_strtod_l+0x8e4>
 800827a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800827e:	0d1b      	lsrs	r3, r3, #20
 8008280:	051b      	lsls	r3, r3, #20
 8008282:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008286:	f240 8089 	bls.w	800839c <_strtod_l+0x8e4>
 800828a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800828e:	b923      	cbnz	r3, 800829a <_strtod_l+0x7e2>
 8008290:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008294:	2b01      	cmp	r3, #1
 8008296:	f340 8081 	ble.w	800839c <_strtod_l+0x8e4>
 800829a:	4659      	mov	r1, fp
 800829c:	2201      	movs	r2, #1
 800829e:	4650      	mov	r0, sl
 80082a0:	f000 ffe8 	bl	8009274 <__lshift>
 80082a4:	9904      	ldr	r1, [sp, #16]
 80082a6:	4683      	mov	fp, r0
 80082a8:	f001 f850 	bl	800934c <__mcmp>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	dd75      	ble.n	800839c <_strtod_l+0x8e4>
 80082b0:	9905      	ldr	r1, [sp, #20]
 80082b2:	464b      	mov	r3, r9
 80082b4:	4a22      	ldr	r2, [pc, #136]	; (8008340 <_strtod_l+0x888>)
 80082b6:	2900      	cmp	r1, #0
 80082b8:	f000 8091 	beq.w	80083de <_strtod_l+0x926>
 80082bc:	ea02 0109 	and.w	r1, r2, r9
 80082c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082c4:	f300 808b 	bgt.w	80083de <_strtod_l+0x926>
 80082c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082cc:	f77f aea9 	ble.w	8008022 <_strtod_l+0x56a>
 80082d0:	2300      	movs	r3, #0
 80082d2:	4a1c      	ldr	r2, [pc, #112]	; (8008344 <_strtod_l+0x88c>)
 80082d4:	4640      	mov	r0, r8
 80082d6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80082da:	4649      	mov	r1, r9
 80082dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80082e0:	f7f8 f8fa 	bl	80004d8 <__aeabi_dmul>
 80082e4:	460b      	mov	r3, r1
 80082e6:	4303      	orrs	r3, r0
 80082e8:	bf08      	it	eq
 80082ea:	2322      	moveq	r3, #34	; 0x22
 80082ec:	4680      	mov	r8, r0
 80082ee:	4689      	mov	r9, r1
 80082f0:	bf08      	it	eq
 80082f2:	f8ca 3000 	streq.w	r3, [sl]
 80082f6:	e62d      	b.n	8007f54 <_strtod_l+0x49c>
 80082f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008300:	ea03 0808 	and.w	r8, r3, r8
 8008304:	e6db      	b.n	80080be <_strtod_l+0x606>
 8008306:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800830a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800830e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008312:	35e2      	adds	r5, #226	; 0xe2
 8008314:	fa07 f505 	lsl.w	r5, r7, r5
 8008318:	970f      	str	r7, [sp, #60]	; 0x3c
 800831a:	e742      	b.n	80081a2 <_strtod_l+0x6ea>
 800831c:	2301      	movs	r3, #1
 800831e:	2500      	movs	r5, #0
 8008320:	930f      	str	r3, [sp, #60]	; 0x3c
 8008322:	e73e      	b.n	80081a2 <_strtod_l+0x6ea>
 8008324:	463a      	mov	r2, r7
 8008326:	4650      	mov	r0, sl
 8008328:	991c      	ldr	r1, [sp, #112]	; 0x70
 800832a:	f000 ffa3 	bl	8009274 <__lshift>
 800832e:	901c      	str	r0, [sp, #112]	; 0x70
 8008330:	2800      	cmp	r0, #0
 8008332:	f47f af64 	bne.w	80081fe <_strtod_l+0x746>
 8008336:	e602      	b.n	8007f3e <_strtod_l+0x486>
 8008338:	0800bf70 	.word	0x0800bf70
 800833c:	fffffc02 	.word	0xfffffc02
 8008340:	7ff00000 	.word	0x7ff00000
 8008344:	39500000 	.word	0x39500000
 8008348:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800834c:	d166      	bne.n	800841c <_strtod_l+0x964>
 800834e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008354:	b35a      	cbz	r2, 80083ae <_strtod_l+0x8f6>
 8008356:	4a9c      	ldr	r2, [pc, #624]	; (80085c8 <_strtod_l+0xb10>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d12c      	bne.n	80083b6 <_strtod_l+0x8fe>
 800835c:	9b05      	ldr	r3, [sp, #20]
 800835e:	4640      	mov	r0, r8
 8008360:	b303      	cbz	r3, 80083a4 <_strtod_l+0x8ec>
 8008362:	464b      	mov	r3, r9
 8008364:	4a99      	ldr	r2, [pc, #612]	; (80085cc <_strtod_l+0xb14>)
 8008366:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800836a:	401a      	ands	r2, r3
 800836c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008370:	d81b      	bhi.n	80083aa <_strtod_l+0x8f2>
 8008372:	0d12      	lsrs	r2, r2, #20
 8008374:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008378:	fa01 f303 	lsl.w	r3, r1, r3
 800837c:	4298      	cmp	r0, r3
 800837e:	d11a      	bne.n	80083b6 <_strtod_l+0x8fe>
 8008380:	4b93      	ldr	r3, [pc, #588]	; (80085d0 <_strtod_l+0xb18>)
 8008382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008384:	429a      	cmp	r2, r3
 8008386:	d102      	bne.n	800838e <_strtod_l+0x8d6>
 8008388:	3001      	adds	r0, #1
 800838a:	f43f add8 	beq.w	8007f3e <_strtod_l+0x486>
 800838e:	f04f 0800 	mov.w	r8, #0
 8008392:	4b8e      	ldr	r3, [pc, #568]	; (80085cc <_strtod_l+0xb14>)
 8008394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008396:	401a      	ands	r2, r3
 8008398:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800839c:	9b05      	ldr	r3, [sp, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d196      	bne.n	80082d0 <_strtod_l+0x818>
 80083a2:	e5d7      	b.n	8007f54 <_strtod_l+0x49c>
 80083a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083a8:	e7e8      	b.n	800837c <_strtod_l+0x8c4>
 80083aa:	460b      	mov	r3, r1
 80083ac:	e7e6      	b.n	800837c <_strtod_l+0x8c4>
 80083ae:	ea53 0308 	orrs.w	r3, r3, r8
 80083b2:	f43f af7d 	beq.w	80082b0 <_strtod_l+0x7f8>
 80083b6:	b1e5      	cbz	r5, 80083f2 <_strtod_l+0x93a>
 80083b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ba:	421d      	tst	r5, r3
 80083bc:	d0ee      	beq.n	800839c <_strtod_l+0x8e4>
 80083be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c0:	4640      	mov	r0, r8
 80083c2:	4649      	mov	r1, r9
 80083c4:	9a05      	ldr	r2, [sp, #20]
 80083c6:	b1c3      	cbz	r3, 80083fa <_strtod_l+0x942>
 80083c8:	f7ff fb52 	bl	8007a70 <sulp>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083d4:	f7f7 feca 	bl	800016c <__adddf3>
 80083d8:	4680      	mov	r8, r0
 80083da:	4689      	mov	r9, r1
 80083dc:	e7de      	b.n	800839c <_strtod_l+0x8e4>
 80083de:	4013      	ands	r3, r2
 80083e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083e4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80083e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80083ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80083f0:	e7d4      	b.n	800839c <_strtod_l+0x8e4>
 80083f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083f4:	ea13 0f08 	tst.w	r3, r8
 80083f8:	e7e0      	b.n	80083bc <_strtod_l+0x904>
 80083fa:	f7ff fb39 	bl	8007a70 <sulp>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008406:	f7f7 feaf 	bl	8000168 <__aeabi_dsub>
 800840a:	2200      	movs	r2, #0
 800840c:	2300      	movs	r3, #0
 800840e:	4680      	mov	r8, r0
 8008410:	4689      	mov	r9, r1
 8008412:	f7f8 fac9 	bl	80009a8 <__aeabi_dcmpeq>
 8008416:	2800      	cmp	r0, #0
 8008418:	d0c0      	beq.n	800839c <_strtod_l+0x8e4>
 800841a:	e602      	b.n	8008022 <_strtod_l+0x56a>
 800841c:	4658      	mov	r0, fp
 800841e:	9904      	ldr	r1, [sp, #16]
 8008420:	f001 f916 	bl	8009650 <__ratio>
 8008424:	2200      	movs	r2, #0
 8008426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800842a:	4606      	mov	r6, r0
 800842c:	460f      	mov	r7, r1
 800842e:	f7f8 facf 	bl	80009d0 <__aeabi_dcmple>
 8008432:	2800      	cmp	r0, #0
 8008434:	d075      	beq.n	8008522 <_strtod_l+0xa6a>
 8008436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008438:	2b00      	cmp	r3, #0
 800843a:	d047      	beq.n	80084cc <_strtod_l+0xa14>
 800843c:	2600      	movs	r6, #0
 800843e:	4f65      	ldr	r7, [pc, #404]	; (80085d4 <_strtod_l+0xb1c>)
 8008440:	4d64      	ldr	r5, [pc, #400]	; (80085d4 <_strtod_l+0xb1c>)
 8008442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008448:	0d1b      	lsrs	r3, r3, #20
 800844a:	051b      	lsls	r3, r3, #20
 800844c:	930f      	str	r3, [sp, #60]	; 0x3c
 800844e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008450:	4b61      	ldr	r3, [pc, #388]	; (80085d8 <_strtod_l+0xb20>)
 8008452:	429a      	cmp	r2, r3
 8008454:	f040 80c8 	bne.w	80085e8 <_strtod_l+0xb30>
 8008458:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800845c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008462:	4640      	mov	r0, r8
 8008464:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008468:	4649      	mov	r1, r9
 800846a:	f001 f81b 	bl	80094a4 <__ulp>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4630      	mov	r0, r6
 8008474:	4639      	mov	r1, r7
 8008476:	f7f8 f82f 	bl	80004d8 <__aeabi_dmul>
 800847a:	4642      	mov	r2, r8
 800847c:	464b      	mov	r3, r9
 800847e:	f7f7 fe75 	bl	800016c <__adddf3>
 8008482:	460b      	mov	r3, r1
 8008484:	4951      	ldr	r1, [pc, #324]	; (80085cc <_strtod_l+0xb14>)
 8008486:	4a55      	ldr	r2, [pc, #340]	; (80085dc <_strtod_l+0xb24>)
 8008488:	4019      	ands	r1, r3
 800848a:	4291      	cmp	r1, r2
 800848c:	4680      	mov	r8, r0
 800848e:	d95e      	bls.n	800854e <_strtod_l+0xa96>
 8008490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008492:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008496:	4293      	cmp	r3, r2
 8008498:	d103      	bne.n	80084a2 <_strtod_l+0x9ea>
 800849a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800849c:	3301      	adds	r3, #1
 800849e:	f43f ad4e 	beq.w	8007f3e <_strtod_l+0x486>
 80084a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80084a6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80085d0 <_strtod_l+0xb18>
 80084aa:	4650      	mov	r0, sl
 80084ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084ae:	f000 fcc9 	bl	8008e44 <_Bfree>
 80084b2:	4650      	mov	r0, sl
 80084b4:	9906      	ldr	r1, [sp, #24]
 80084b6:	f000 fcc5 	bl	8008e44 <_Bfree>
 80084ba:	4650      	mov	r0, sl
 80084bc:	9904      	ldr	r1, [sp, #16]
 80084be:	f000 fcc1 	bl	8008e44 <_Bfree>
 80084c2:	4659      	mov	r1, fp
 80084c4:	4650      	mov	r0, sl
 80084c6:	f000 fcbd 	bl	8008e44 <_Bfree>
 80084ca:	e61c      	b.n	8008106 <_strtod_l+0x64e>
 80084cc:	f1b8 0f00 	cmp.w	r8, #0
 80084d0:	d119      	bne.n	8008506 <_strtod_l+0xa4e>
 80084d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d8:	b9e3      	cbnz	r3, 8008514 <_strtod_l+0xa5c>
 80084da:	2200      	movs	r2, #0
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	4b3c      	ldr	r3, [pc, #240]	; (80085d4 <_strtod_l+0xb1c>)
 80084e2:	f7f8 fa6b 	bl	80009bc <__aeabi_dcmplt>
 80084e6:	b9c8      	cbnz	r0, 800851c <_strtod_l+0xa64>
 80084e8:	2200      	movs	r2, #0
 80084ea:	4630      	mov	r0, r6
 80084ec:	4639      	mov	r1, r7
 80084ee:	4b3c      	ldr	r3, [pc, #240]	; (80085e0 <_strtod_l+0xb28>)
 80084f0:	f7f7 fff2 	bl	80004d8 <__aeabi_dmul>
 80084f4:	4604      	mov	r4, r0
 80084f6:	460d      	mov	r5, r1
 80084f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80084fc:	9418      	str	r4, [sp, #96]	; 0x60
 80084fe:	9319      	str	r3, [sp, #100]	; 0x64
 8008500:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008504:	e79d      	b.n	8008442 <_strtod_l+0x98a>
 8008506:	f1b8 0f01 	cmp.w	r8, #1
 800850a:	d103      	bne.n	8008514 <_strtod_l+0xa5c>
 800850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	f43f ad87 	beq.w	8008022 <_strtod_l+0x56a>
 8008514:	2600      	movs	r6, #0
 8008516:	2400      	movs	r4, #0
 8008518:	4f32      	ldr	r7, [pc, #200]	; (80085e4 <_strtod_l+0xb2c>)
 800851a:	e791      	b.n	8008440 <_strtod_l+0x988>
 800851c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800851e:	4d30      	ldr	r5, [pc, #192]	; (80085e0 <_strtod_l+0xb28>)
 8008520:	e7ea      	b.n	80084f8 <_strtod_l+0xa40>
 8008522:	4b2f      	ldr	r3, [pc, #188]	; (80085e0 <_strtod_l+0xb28>)
 8008524:	2200      	movs	r2, #0
 8008526:	4630      	mov	r0, r6
 8008528:	4639      	mov	r1, r7
 800852a:	f7f7 ffd5 	bl	80004d8 <__aeabi_dmul>
 800852e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008530:	4604      	mov	r4, r0
 8008532:	460d      	mov	r5, r1
 8008534:	b933      	cbnz	r3, 8008544 <_strtod_l+0xa8c>
 8008536:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800853a:	9010      	str	r0, [sp, #64]	; 0x40
 800853c:	9311      	str	r3, [sp, #68]	; 0x44
 800853e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008542:	e77e      	b.n	8008442 <_strtod_l+0x98a>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800854c:	e7f7      	b.n	800853e <_strtod_l+0xa86>
 800854e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008552:	9b05      	ldr	r3, [sp, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1a8      	bne.n	80084aa <_strtod_l+0x9f2>
 8008558:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800855c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800855e:	0d1b      	lsrs	r3, r3, #20
 8008560:	051b      	lsls	r3, r3, #20
 8008562:	429a      	cmp	r2, r3
 8008564:	d1a1      	bne.n	80084aa <_strtod_l+0x9f2>
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f8 fdd1 	bl	8001110 <__aeabi_d2lz>
 800856e:	f7f7 ff85 	bl	800047c <__aeabi_l2d>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4620      	mov	r0, r4
 8008578:	4629      	mov	r1, r5
 800857a:	f7f7 fdf5 	bl	8000168 <__aeabi_dsub>
 800857e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008584:	ea43 0308 	orr.w	r3, r3, r8
 8008588:	4313      	orrs	r3, r2
 800858a:	4604      	mov	r4, r0
 800858c:	460d      	mov	r5, r1
 800858e:	d066      	beq.n	800865e <_strtod_l+0xba6>
 8008590:	a309      	add	r3, pc, #36	; (adr r3, 80085b8 <_strtod_l+0xb00>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	f7f8 fa11 	bl	80009bc <__aeabi_dcmplt>
 800859a:	2800      	cmp	r0, #0
 800859c:	f47f acda 	bne.w	8007f54 <_strtod_l+0x49c>
 80085a0:	a307      	add	r3, pc, #28	; (adr r3, 80085c0 <_strtod_l+0xb08>)
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	4620      	mov	r0, r4
 80085a8:	4629      	mov	r1, r5
 80085aa:	f7f8 fa25 	bl	80009f8 <__aeabi_dcmpgt>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f43f af7b 	beq.w	80084aa <_strtod_l+0x9f2>
 80085b4:	e4ce      	b.n	8007f54 <_strtod_l+0x49c>
 80085b6:	bf00      	nop
 80085b8:	94a03595 	.word	0x94a03595
 80085bc:	3fdfffff 	.word	0x3fdfffff
 80085c0:	35afe535 	.word	0x35afe535
 80085c4:	3fe00000 	.word	0x3fe00000
 80085c8:	000fffff 	.word	0x000fffff
 80085cc:	7ff00000 	.word	0x7ff00000
 80085d0:	7fefffff 	.word	0x7fefffff
 80085d4:	3ff00000 	.word	0x3ff00000
 80085d8:	7fe00000 	.word	0x7fe00000
 80085dc:	7c9fffff 	.word	0x7c9fffff
 80085e0:	3fe00000 	.word	0x3fe00000
 80085e4:	bff00000 	.word	0xbff00000
 80085e8:	9b05      	ldr	r3, [sp, #20]
 80085ea:	b313      	cbz	r3, 8008632 <_strtod_l+0xb7a>
 80085ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085f2:	d81e      	bhi.n	8008632 <_strtod_l+0xb7a>
 80085f4:	a326      	add	r3, pc, #152	; (adr r3, 8008690 <_strtod_l+0xbd8>)
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	4620      	mov	r0, r4
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7f8 f9e7 	bl	80009d0 <__aeabi_dcmple>
 8008602:	b190      	cbz	r0, 800862a <_strtod_l+0xb72>
 8008604:	4629      	mov	r1, r5
 8008606:	4620      	mov	r0, r4
 8008608:	f7f8 fa3e 	bl	8000a88 <__aeabi_d2uiz>
 800860c:	2801      	cmp	r0, #1
 800860e:	bf38      	it	cc
 8008610:	2001      	movcc	r0, #1
 8008612:	f7f7 fee7 	bl	80003e4 <__aeabi_ui2d>
 8008616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008618:	4604      	mov	r4, r0
 800861a:	460d      	mov	r5, r1
 800861c:	b9d3      	cbnz	r3, 8008654 <_strtod_l+0xb9c>
 800861e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008622:	9012      	str	r0, [sp, #72]	; 0x48
 8008624:	9313      	str	r3, [sp, #76]	; 0x4c
 8008626:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800862a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800862c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008630:	1a9f      	subs	r7, r3, r2
 8008632:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008636:	f000 ff35 	bl	80094a4 <__ulp>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4630      	mov	r0, r6
 8008640:	4639      	mov	r1, r7
 8008642:	f7f7 ff49 	bl	80004d8 <__aeabi_dmul>
 8008646:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800864a:	f7f7 fd8f 	bl	800016c <__adddf3>
 800864e:	4680      	mov	r8, r0
 8008650:	4689      	mov	r9, r1
 8008652:	e77e      	b.n	8008552 <_strtod_l+0xa9a>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800865c:	e7e3      	b.n	8008626 <_strtod_l+0xb6e>
 800865e:	a30e      	add	r3, pc, #56	; (adr r3, 8008698 <_strtod_l+0xbe0>)
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f7f8 f9aa 	bl	80009bc <__aeabi_dcmplt>
 8008668:	e7a1      	b.n	80085ae <_strtod_l+0xaf6>
 800866a:	2300      	movs	r3, #0
 800866c:	930c      	str	r3, [sp, #48]	; 0x30
 800866e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008670:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	f7ff ba65 	b.w	8007b42 <_strtod_l+0x8a>
 8008678:	2b65      	cmp	r3, #101	; 0x65
 800867a:	f43f ab5c 	beq.w	8007d36 <_strtod_l+0x27e>
 800867e:	2b45      	cmp	r3, #69	; 0x45
 8008680:	f43f ab59 	beq.w	8007d36 <_strtod_l+0x27e>
 8008684:	2201      	movs	r2, #1
 8008686:	f7ff bb8d 	b.w	8007da4 <_strtod_l+0x2ec>
 800868a:	bf00      	nop
 800868c:	f3af 8000 	nop.w
 8008690:	ffc00000 	.word	0xffc00000
 8008694:	41dfffff 	.word	0x41dfffff
 8008698:	94a03595 	.word	0x94a03595
 800869c:	3fcfffff 	.word	0x3fcfffff

080086a0 <strtod>:
 80086a0:	460a      	mov	r2, r1
 80086a2:	4601      	mov	r1, r0
 80086a4:	4802      	ldr	r0, [pc, #8]	; (80086b0 <strtod+0x10>)
 80086a6:	4b03      	ldr	r3, [pc, #12]	; (80086b4 <strtod+0x14>)
 80086a8:	6800      	ldr	r0, [r0, #0]
 80086aa:	f7ff ba05 	b.w	8007ab8 <_strtod_l>
 80086ae:	bf00      	nop
 80086b0:	200000ac 	.word	0x200000ac
 80086b4:	20000114 	.word	0x20000114

080086b8 <rshift>:
 80086b8:	6903      	ldr	r3, [r0, #16]
 80086ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086c2:	f100 0414 	add.w	r4, r0, #20
 80086c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80086ca:	dd46      	ble.n	800875a <rshift+0xa2>
 80086cc:	f011 011f 	ands.w	r1, r1, #31
 80086d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80086d8:	d10c      	bne.n	80086f4 <rshift+0x3c>
 80086da:	4629      	mov	r1, r5
 80086dc:	f100 0710 	add.w	r7, r0, #16
 80086e0:	42b1      	cmp	r1, r6
 80086e2:	d335      	bcc.n	8008750 <rshift+0x98>
 80086e4:	1a9b      	subs	r3, r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	1eea      	subs	r2, r5, #3
 80086ea:	4296      	cmp	r6, r2
 80086ec:	bf38      	it	cc
 80086ee:	2300      	movcc	r3, #0
 80086f0:	4423      	add	r3, r4
 80086f2:	e015      	b.n	8008720 <rshift+0x68>
 80086f4:	46a1      	mov	r9, r4
 80086f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80086fa:	f1c1 0820 	rsb	r8, r1, #32
 80086fe:	40cf      	lsrs	r7, r1
 8008700:	f105 0e04 	add.w	lr, r5, #4
 8008704:	4576      	cmp	r6, lr
 8008706:	46f4      	mov	ip, lr
 8008708:	d816      	bhi.n	8008738 <rshift+0x80>
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	009a      	lsls	r2, r3, #2
 800870e:	3a04      	subs	r2, #4
 8008710:	3501      	adds	r5, #1
 8008712:	42ae      	cmp	r6, r5
 8008714:	bf38      	it	cc
 8008716:	2200      	movcc	r2, #0
 8008718:	18a3      	adds	r3, r4, r2
 800871a:	50a7      	str	r7, [r4, r2]
 800871c:	b107      	cbz	r7, 8008720 <rshift+0x68>
 800871e:	3304      	adds	r3, #4
 8008720:	42a3      	cmp	r3, r4
 8008722:	eba3 0204 	sub.w	r2, r3, r4
 8008726:	bf08      	it	eq
 8008728:	2300      	moveq	r3, #0
 800872a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800872e:	6102      	str	r2, [r0, #16]
 8008730:	bf08      	it	eq
 8008732:	6143      	streq	r3, [r0, #20]
 8008734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008738:	f8dc c000 	ldr.w	ip, [ip]
 800873c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008740:	ea4c 0707 	orr.w	r7, ip, r7
 8008744:	f849 7b04 	str.w	r7, [r9], #4
 8008748:	f85e 7b04 	ldr.w	r7, [lr], #4
 800874c:	40cf      	lsrs	r7, r1
 800874e:	e7d9      	b.n	8008704 <rshift+0x4c>
 8008750:	f851 cb04 	ldr.w	ip, [r1], #4
 8008754:	f847 cf04 	str.w	ip, [r7, #4]!
 8008758:	e7c2      	b.n	80086e0 <rshift+0x28>
 800875a:	4623      	mov	r3, r4
 800875c:	e7e0      	b.n	8008720 <rshift+0x68>

0800875e <__hexdig_fun>:
 800875e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008762:	2b09      	cmp	r3, #9
 8008764:	d802      	bhi.n	800876c <__hexdig_fun+0xe>
 8008766:	3820      	subs	r0, #32
 8008768:	b2c0      	uxtb	r0, r0
 800876a:	4770      	bx	lr
 800876c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008770:	2b05      	cmp	r3, #5
 8008772:	d801      	bhi.n	8008778 <__hexdig_fun+0x1a>
 8008774:	3847      	subs	r0, #71	; 0x47
 8008776:	e7f7      	b.n	8008768 <__hexdig_fun+0xa>
 8008778:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800877c:	2b05      	cmp	r3, #5
 800877e:	d801      	bhi.n	8008784 <__hexdig_fun+0x26>
 8008780:	3827      	subs	r0, #39	; 0x27
 8008782:	e7f1      	b.n	8008768 <__hexdig_fun+0xa>
 8008784:	2000      	movs	r0, #0
 8008786:	4770      	bx	lr

08008788 <__gethex>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	b08b      	sub	sp, #44	; 0x2c
 800878e:	9306      	str	r3, [sp, #24]
 8008790:	4bb9      	ldr	r3, [pc, #740]	; (8008a78 <__gethex+0x2f0>)
 8008792:	9002      	str	r0, [sp, #8]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	468b      	mov	fp, r1
 8008798:	4618      	mov	r0, r3
 800879a:	4690      	mov	r8, r2
 800879c:	9303      	str	r3, [sp, #12]
 800879e:	f7f7 fcd7 	bl	8000150 <strlen>
 80087a2:	4682      	mov	sl, r0
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	f8db 2000 	ldr.w	r2, [fp]
 80087aa:	4403      	add	r3, r0
 80087ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80087b0:	9307      	str	r3, [sp, #28]
 80087b2:	1c93      	adds	r3, r2, #2
 80087b4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80087b8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80087bc:	32fe      	adds	r2, #254	; 0xfe
 80087be:	18d1      	adds	r1, r2, r3
 80087c0:	461f      	mov	r7, r3
 80087c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80087c6:	9101      	str	r1, [sp, #4]
 80087c8:	2830      	cmp	r0, #48	; 0x30
 80087ca:	d0f8      	beq.n	80087be <__gethex+0x36>
 80087cc:	f7ff ffc7 	bl	800875e <__hexdig_fun>
 80087d0:	4604      	mov	r4, r0
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d13a      	bne.n	800884c <__gethex+0xc4>
 80087d6:	4652      	mov	r2, sl
 80087d8:	4638      	mov	r0, r7
 80087da:	9903      	ldr	r1, [sp, #12]
 80087dc:	f001 f828 	bl	8009830 <strncmp>
 80087e0:	4605      	mov	r5, r0
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d166      	bne.n	80088b4 <__gethex+0x12c>
 80087e6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80087ea:	eb07 060a 	add.w	r6, r7, sl
 80087ee:	f7ff ffb6 	bl	800875e <__hexdig_fun>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d060      	beq.n	80088b8 <__gethex+0x130>
 80087f6:	4633      	mov	r3, r6
 80087f8:	7818      	ldrb	r0, [r3, #0]
 80087fa:	461f      	mov	r7, r3
 80087fc:	2830      	cmp	r0, #48	; 0x30
 80087fe:	f103 0301 	add.w	r3, r3, #1
 8008802:	d0f9      	beq.n	80087f8 <__gethex+0x70>
 8008804:	f7ff ffab 	bl	800875e <__hexdig_fun>
 8008808:	2301      	movs	r3, #1
 800880a:	fab0 f480 	clz	r4, r0
 800880e:	4635      	mov	r5, r6
 8008810:	0964      	lsrs	r4, r4, #5
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	463a      	mov	r2, r7
 8008816:	4616      	mov	r6, r2
 8008818:	7830      	ldrb	r0, [r6, #0]
 800881a:	3201      	adds	r2, #1
 800881c:	f7ff ff9f 	bl	800875e <__hexdig_fun>
 8008820:	2800      	cmp	r0, #0
 8008822:	d1f8      	bne.n	8008816 <__gethex+0x8e>
 8008824:	4652      	mov	r2, sl
 8008826:	4630      	mov	r0, r6
 8008828:	9903      	ldr	r1, [sp, #12]
 800882a:	f001 f801 	bl	8009830 <strncmp>
 800882e:	b980      	cbnz	r0, 8008852 <__gethex+0xca>
 8008830:	b94d      	cbnz	r5, 8008846 <__gethex+0xbe>
 8008832:	eb06 050a 	add.w	r5, r6, sl
 8008836:	462a      	mov	r2, r5
 8008838:	4616      	mov	r6, r2
 800883a:	7830      	ldrb	r0, [r6, #0]
 800883c:	3201      	adds	r2, #1
 800883e:	f7ff ff8e 	bl	800875e <__hexdig_fun>
 8008842:	2800      	cmp	r0, #0
 8008844:	d1f8      	bne.n	8008838 <__gethex+0xb0>
 8008846:	1bad      	subs	r5, r5, r6
 8008848:	00ad      	lsls	r5, r5, #2
 800884a:	e004      	b.n	8008856 <__gethex+0xce>
 800884c:	2400      	movs	r4, #0
 800884e:	4625      	mov	r5, r4
 8008850:	e7e0      	b.n	8008814 <__gethex+0x8c>
 8008852:	2d00      	cmp	r5, #0
 8008854:	d1f7      	bne.n	8008846 <__gethex+0xbe>
 8008856:	7833      	ldrb	r3, [r6, #0]
 8008858:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800885c:	2b50      	cmp	r3, #80	; 0x50
 800885e:	d139      	bne.n	80088d4 <__gethex+0x14c>
 8008860:	7873      	ldrb	r3, [r6, #1]
 8008862:	2b2b      	cmp	r3, #43	; 0x2b
 8008864:	d02a      	beq.n	80088bc <__gethex+0x134>
 8008866:	2b2d      	cmp	r3, #45	; 0x2d
 8008868:	d02c      	beq.n	80088c4 <__gethex+0x13c>
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	1c71      	adds	r1, r6, #1
 8008870:	7808      	ldrb	r0, [r1, #0]
 8008872:	f7ff ff74 	bl	800875e <__hexdig_fun>
 8008876:	1e43      	subs	r3, r0, #1
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b18      	cmp	r3, #24
 800887c:	d82a      	bhi.n	80088d4 <__gethex+0x14c>
 800887e:	f1a0 0210 	sub.w	r2, r0, #16
 8008882:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008886:	f7ff ff6a 	bl	800875e <__hexdig_fun>
 800888a:	1e43      	subs	r3, r0, #1
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b18      	cmp	r3, #24
 8008890:	d91b      	bls.n	80088ca <__gethex+0x142>
 8008892:	f1b9 0f00 	cmp.w	r9, #0
 8008896:	d000      	beq.n	800889a <__gethex+0x112>
 8008898:	4252      	negs	r2, r2
 800889a:	4415      	add	r5, r2
 800889c:	f8cb 1000 	str.w	r1, [fp]
 80088a0:	b1d4      	cbz	r4, 80088d8 <__gethex+0x150>
 80088a2:	9b01      	ldr	r3, [sp, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	bf14      	ite	ne
 80088a8:	2700      	movne	r7, #0
 80088aa:	2706      	moveq	r7, #6
 80088ac:	4638      	mov	r0, r7
 80088ae:	b00b      	add	sp, #44	; 0x2c
 80088b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b4:	463e      	mov	r6, r7
 80088b6:	4625      	mov	r5, r4
 80088b8:	2401      	movs	r4, #1
 80088ba:	e7cc      	b.n	8008856 <__gethex+0xce>
 80088bc:	f04f 0900 	mov.w	r9, #0
 80088c0:	1cb1      	adds	r1, r6, #2
 80088c2:	e7d5      	b.n	8008870 <__gethex+0xe8>
 80088c4:	f04f 0901 	mov.w	r9, #1
 80088c8:	e7fa      	b.n	80088c0 <__gethex+0x138>
 80088ca:	230a      	movs	r3, #10
 80088cc:	fb03 0202 	mla	r2, r3, r2, r0
 80088d0:	3a10      	subs	r2, #16
 80088d2:	e7d6      	b.n	8008882 <__gethex+0xfa>
 80088d4:	4631      	mov	r1, r6
 80088d6:	e7e1      	b.n	800889c <__gethex+0x114>
 80088d8:	4621      	mov	r1, r4
 80088da:	1bf3      	subs	r3, r6, r7
 80088dc:	3b01      	subs	r3, #1
 80088de:	2b07      	cmp	r3, #7
 80088e0:	dc0a      	bgt.n	80088f8 <__gethex+0x170>
 80088e2:	9802      	ldr	r0, [sp, #8]
 80088e4:	f000 fa6e 	bl	8008dc4 <_Balloc>
 80088e8:	4604      	mov	r4, r0
 80088ea:	b940      	cbnz	r0, 80088fe <__gethex+0x176>
 80088ec:	4602      	mov	r2, r0
 80088ee:	21de      	movs	r1, #222	; 0xde
 80088f0:	4b62      	ldr	r3, [pc, #392]	; (8008a7c <__gethex+0x2f4>)
 80088f2:	4863      	ldr	r0, [pc, #396]	; (8008a80 <__gethex+0x2f8>)
 80088f4:	f000 ffbc 	bl	8009870 <__assert_func>
 80088f8:	3101      	adds	r1, #1
 80088fa:	105b      	asrs	r3, r3, #1
 80088fc:	e7ef      	b.n	80088de <__gethex+0x156>
 80088fe:	f04f 0b00 	mov.w	fp, #0
 8008902:	f100 0914 	add.w	r9, r0, #20
 8008906:	f1ca 0301 	rsb	r3, sl, #1
 800890a:	f8cd 9010 	str.w	r9, [sp, #16]
 800890e:	f8cd b004 	str.w	fp, [sp, #4]
 8008912:	9308      	str	r3, [sp, #32]
 8008914:	42b7      	cmp	r7, r6
 8008916:	d33f      	bcc.n	8008998 <__gethex+0x210>
 8008918:	9f04      	ldr	r7, [sp, #16]
 800891a:	9b01      	ldr	r3, [sp, #4]
 800891c:	f847 3b04 	str.w	r3, [r7], #4
 8008920:	eba7 0709 	sub.w	r7, r7, r9
 8008924:	10bf      	asrs	r7, r7, #2
 8008926:	6127      	str	r7, [r4, #16]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fb41 	bl	8008fb0 <__hi0bits>
 800892e:	017f      	lsls	r7, r7, #5
 8008930:	f8d8 6000 	ldr.w	r6, [r8]
 8008934:	1a3f      	subs	r7, r7, r0
 8008936:	42b7      	cmp	r7, r6
 8008938:	dd62      	ble.n	8008a00 <__gethex+0x278>
 800893a:	1bbf      	subs	r7, r7, r6
 800893c:	4639      	mov	r1, r7
 800893e:	4620      	mov	r0, r4
 8008940:	f000 fed7 	bl	80096f2 <__any_on>
 8008944:	4682      	mov	sl, r0
 8008946:	b1a8      	cbz	r0, 8008974 <__gethex+0x1ec>
 8008948:	f04f 0a01 	mov.w	sl, #1
 800894c:	1e7b      	subs	r3, r7, #1
 800894e:	1159      	asrs	r1, r3, #5
 8008950:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008954:	f003 021f 	and.w	r2, r3, #31
 8008958:	fa0a f202 	lsl.w	r2, sl, r2
 800895c:	420a      	tst	r2, r1
 800895e:	d009      	beq.n	8008974 <__gethex+0x1ec>
 8008960:	4553      	cmp	r3, sl
 8008962:	dd05      	ble.n	8008970 <__gethex+0x1e8>
 8008964:	4620      	mov	r0, r4
 8008966:	1eb9      	subs	r1, r7, #2
 8008968:	f000 fec3 	bl	80096f2 <__any_on>
 800896c:	2800      	cmp	r0, #0
 800896e:	d144      	bne.n	80089fa <__gethex+0x272>
 8008970:	f04f 0a02 	mov.w	sl, #2
 8008974:	4639      	mov	r1, r7
 8008976:	4620      	mov	r0, r4
 8008978:	f7ff fe9e 	bl	80086b8 <rshift>
 800897c:	443d      	add	r5, r7
 800897e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008982:	42ab      	cmp	r3, r5
 8008984:	da4a      	bge.n	8008a1c <__gethex+0x294>
 8008986:	4621      	mov	r1, r4
 8008988:	9802      	ldr	r0, [sp, #8]
 800898a:	f000 fa5b 	bl	8008e44 <_Bfree>
 800898e:	2300      	movs	r3, #0
 8008990:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008992:	27a3      	movs	r7, #163	; 0xa3
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	e789      	b.n	80088ac <__gethex+0x124>
 8008998:	1e73      	subs	r3, r6, #1
 800899a:	9a07      	ldr	r2, [sp, #28]
 800899c:	9305      	str	r3, [sp, #20]
 800899e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d019      	beq.n	80089da <__gethex+0x252>
 80089a6:	f1bb 0f20 	cmp.w	fp, #32
 80089aa:	d107      	bne.n	80089bc <__gethex+0x234>
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	9a01      	ldr	r2, [sp, #4]
 80089b0:	f843 2b04 	str.w	r2, [r3], #4
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	2300      	movs	r3, #0
 80089b8:	469b      	mov	fp, r3
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80089c0:	f7ff fecd 	bl	800875e <__hexdig_fun>
 80089c4:	9b01      	ldr	r3, [sp, #4]
 80089c6:	f000 000f 	and.w	r0, r0, #15
 80089ca:	fa00 f00b 	lsl.w	r0, r0, fp
 80089ce:	4303      	orrs	r3, r0
 80089d0:	9301      	str	r3, [sp, #4]
 80089d2:	f10b 0b04 	add.w	fp, fp, #4
 80089d6:	9b05      	ldr	r3, [sp, #20]
 80089d8:	e00d      	b.n	80089f6 <__gethex+0x26e>
 80089da:	9b05      	ldr	r3, [sp, #20]
 80089dc:	9a08      	ldr	r2, [sp, #32]
 80089de:	4413      	add	r3, r2
 80089e0:	42bb      	cmp	r3, r7
 80089e2:	d3e0      	bcc.n	80089a6 <__gethex+0x21e>
 80089e4:	4618      	mov	r0, r3
 80089e6:	4652      	mov	r2, sl
 80089e8:	9903      	ldr	r1, [sp, #12]
 80089ea:	9309      	str	r3, [sp, #36]	; 0x24
 80089ec:	f000 ff20 	bl	8009830 <strncmp>
 80089f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d1d7      	bne.n	80089a6 <__gethex+0x21e>
 80089f6:	461e      	mov	r6, r3
 80089f8:	e78c      	b.n	8008914 <__gethex+0x18c>
 80089fa:	f04f 0a03 	mov.w	sl, #3
 80089fe:	e7b9      	b.n	8008974 <__gethex+0x1ec>
 8008a00:	da09      	bge.n	8008a16 <__gethex+0x28e>
 8008a02:	1bf7      	subs	r7, r6, r7
 8008a04:	4621      	mov	r1, r4
 8008a06:	463a      	mov	r2, r7
 8008a08:	9802      	ldr	r0, [sp, #8]
 8008a0a:	f000 fc33 	bl	8009274 <__lshift>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	1bed      	subs	r5, r5, r7
 8008a12:	f100 0914 	add.w	r9, r0, #20
 8008a16:	f04f 0a00 	mov.w	sl, #0
 8008a1a:	e7b0      	b.n	800897e <__gethex+0x1f6>
 8008a1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a20:	42a8      	cmp	r0, r5
 8008a22:	dd71      	ble.n	8008b08 <__gethex+0x380>
 8008a24:	1b45      	subs	r5, r0, r5
 8008a26:	42ae      	cmp	r6, r5
 8008a28:	dc34      	bgt.n	8008a94 <__gethex+0x30c>
 8008a2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d028      	beq.n	8008a84 <__gethex+0x2fc>
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d02a      	beq.n	8008a8c <__gethex+0x304>
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d115      	bne.n	8008a66 <__gethex+0x2de>
 8008a3a:	42ae      	cmp	r6, r5
 8008a3c:	d113      	bne.n	8008a66 <__gethex+0x2de>
 8008a3e:	2e01      	cmp	r6, #1
 8008a40:	d10b      	bne.n	8008a5a <__gethex+0x2d2>
 8008a42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a46:	9a06      	ldr	r2, [sp, #24]
 8008a48:	2762      	movs	r7, #98	; 0x62
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	f8c9 3000 	str.w	r3, [r9]
 8008a54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a56:	601c      	str	r4, [r3, #0]
 8008a58:	e728      	b.n	80088ac <__gethex+0x124>
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	1e71      	subs	r1, r6, #1
 8008a5e:	f000 fe48 	bl	80096f2 <__any_on>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d1ed      	bne.n	8008a42 <__gethex+0x2ba>
 8008a66:	4621      	mov	r1, r4
 8008a68:	9802      	ldr	r0, [sp, #8]
 8008a6a:	f000 f9eb 	bl	8008e44 <_Bfree>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a72:	2750      	movs	r7, #80	; 0x50
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	e719      	b.n	80088ac <__gethex+0x124>
 8008a78:	0800c014 	.word	0x0800c014
 8008a7c:	0800bf98 	.word	0x0800bf98
 8008a80:	0800bfa9 	.word	0x0800bfa9
 8008a84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1ed      	bne.n	8008a66 <__gethex+0x2de>
 8008a8a:	e7da      	b.n	8008a42 <__gethex+0x2ba>
 8008a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1d7      	bne.n	8008a42 <__gethex+0x2ba>
 8008a92:	e7e8      	b.n	8008a66 <__gethex+0x2de>
 8008a94:	1e6f      	subs	r7, r5, #1
 8008a96:	f1ba 0f00 	cmp.w	sl, #0
 8008a9a:	d132      	bne.n	8008b02 <__gethex+0x37a>
 8008a9c:	b127      	cbz	r7, 8008aa8 <__gethex+0x320>
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fe26 	bl	80096f2 <__any_on>
 8008aa6:	4682      	mov	sl, r0
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	117b      	asrs	r3, r7, #5
 8008aac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ab0:	f007 071f 	and.w	r7, r7, #31
 8008ab4:	fa01 f707 	lsl.w	r7, r1, r7
 8008ab8:	421f      	tst	r7, r3
 8008aba:	f04f 0702 	mov.w	r7, #2
 8008abe:	4629      	mov	r1, r5
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	bf18      	it	ne
 8008ac4:	f04a 0a02 	orrne.w	sl, sl, #2
 8008ac8:	1b76      	subs	r6, r6, r5
 8008aca:	f7ff fdf5 	bl	80086b8 <rshift>
 8008ace:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ad2:	f1ba 0f00 	cmp.w	sl, #0
 8008ad6:	d048      	beq.n	8008b6a <__gethex+0x3e2>
 8008ad8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d015      	beq.n	8008b0c <__gethex+0x384>
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d017      	beq.n	8008b14 <__gethex+0x38c>
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d109      	bne.n	8008afc <__gethex+0x374>
 8008ae8:	f01a 0f02 	tst.w	sl, #2
 8008aec:	d006      	beq.n	8008afc <__gethex+0x374>
 8008aee:	f8d9 0000 	ldr.w	r0, [r9]
 8008af2:	ea4a 0a00 	orr.w	sl, sl, r0
 8008af6:	f01a 0f01 	tst.w	sl, #1
 8008afa:	d10e      	bne.n	8008b1a <__gethex+0x392>
 8008afc:	f047 0710 	orr.w	r7, r7, #16
 8008b00:	e033      	b.n	8008b6a <__gethex+0x3e2>
 8008b02:	f04f 0a01 	mov.w	sl, #1
 8008b06:	e7cf      	b.n	8008aa8 <__gethex+0x320>
 8008b08:	2701      	movs	r7, #1
 8008b0a:	e7e2      	b.n	8008ad2 <__gethex+0x34a>
 8008b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b0e:	f1c3 0301 	rsb	r3, r3, #1
 8008b12:	9315      	str	r3, [sp, #84]	; 0x54
 8008b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0f0      	beq.n	8008afc <__gethex+0x374>
 8008b1a:	f04f 0c00 	mov.w	ip, #0
 8008b1e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b22:	f104 0314 	add.w	r3, r4, #20
 8008b26:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b2a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b34:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008b38:	d01c      	beq.n	8008b74 <__gethex+0x3ec>
 8008b3a:	3201      	adds	r2, #1
 8008b3c:	6002      	str	r2, [r0, #0]
 8008b3e:	2f02      	cmp	r7, #2
 8008b40:	f104 0314 	add.w	r3, r4, #20
 8008b44:	d13d      	bne.n	8008bc2 <__gethex+0x43a>
 8008b46:	f8d8 2000 	ldr.w	r2, [r8]
 8008b4a:	3a01      	subs	r2, #1
 8008b4c:	42b2      	cmp	r2, r6
 8008b4e:	d10a      	bne.n	8008b66 <__gethex+0x3de>
 8008b50:	2201      	movs	r2, #1
 8008b52:	1171      	asrs	r1, r6, #5
 8008b54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b58:	f006 061f 	and.w	r6, r6, #31
 8008b5c:	fa02 f606 	lsl.w	r6, r2, r6
 8008b60:	421e      	tst	r6, r3
 8008b62:	bf18      	it	ne
 8008b64:	4617      	movne	r7, r2
 8008b66:	f047 0720 	orr.w	r7, r7, #32
 8008b6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b6c:	601c      	str	r4, [r3, #0]
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	601d      	str	r5, [r3, #0]
 8008b72:	e69b      	b.n	80088ac <__gethex+0x124>
 8008b74:	4299      	cmp	r1, r3
 8008b76:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b7a:	d8d8      	bhi.n	8008b2e <__gethex+0x3a6>
 8008b7c:	68a3      	ldr	r3, [r4, #8]
 8008b7e:	459b      	cmp	fp, r3
 8008b80:	db17      	blt.n	8008bb2 <__gethex+0x42a>
 8008b82:	6861      	ldr	r1, [r4, #4]
 8008b84:	9802      	ldr	r0, [sp, #8]
 8008b86:	3101      	adds	r1, #1
 8008b88:	f000 f91c 	bl	8008dc4 <_Balloc>
 8008b8c:	4681      	mov	r9, r0
 8008b8e:	b918      	cbnz	r0, 8008b98 <__gethex+0x410>
 8008b90:	4602      	mov	r2, r0
 8008b92:	2184      	movs	r1, #132	; 0x84
 8008b94:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <__gethex+0x474>)
 8008b96:	e6ac      	b.n	80088f2 <__gethex+0x16a>
 8008b98:	6922      	ldr	r2, [r4, #16]
 8008b9a:	f104 010c 	add.w	r1, r4, #12
 8008b9e:	3202      	adds	r2, #2
 8008ba0:	0092      	lsls	r2, r2, #2
 8008ba2:	300c      	adds	r0, #12
 8008ba4:	f000 f900 	bl	8008da8 <memcpy>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	9802      	ldr	r0, [sp, #8]
 8008bac:	f000 f94a 	bl	8008e44 <_Bfree>
 8008bb0:	464c      	mov	r4, r9
 8008bb2:	6923      	ldr	r3, [r4, #16]
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	6122      	str	r2, [r4, #16]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bbe:	615a      	str	r2, [r3, #20]
 8008bc0:	e7bd      	b.n	8008b3e <__gethex+0x3b6>
 8008bc2:	6922      	ldr	r2, [r4, #16]
 8008bc4:	455a      	cmp	r2, fp
 8008bc6:	dd0b      	ble.n	8008be0 <__gethex+0x458>
 8008bc8:	2101      	movs	r1, #1
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7ff fd74 	bl	80086b8 <rshift>
 8008bd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	42ab      	cmp	r3, r5
 8008bd8:	f6ff aed5 	blt.w	8008986 <__gethex+0x1fe>
 8008bdc:	2701      	movs	r7, #1
 8008bde:	e7c2      	b.n	8008b66 <__gethex+0x3de>
 8008be0:	f016 061f 	ands.w	r6, r6, #31
 8008be4:	d0fa      	beq.n	8008bdc <__gethex+0x454>
 8008be6:	449a      	add	sl, r3
 8008be8:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008bec:	f000 f9e0 	bl	8008fb0 <__hi0bits>
 8008bf0:	f1c6 0620 	rsb	r6, r6, #32
 8008bf4:	42b0      	cmp	r0, r6
 8008bf6:	dbe7      	blt.n	8008bc8 <__gethex+0x440>
 8008bf8:	e7f0      	b.n	8008bdc <__gethex+0x454>
 8008bfa:	bf00      	nop
 8008bfc:	0800bf98 	.word	0x0800bf98

08008c00 <L_shift>:
 8008c00:	f1c2 0208 	rsb	r2, r2, #8
 8008c04:	0092      	lsls	r2, r2, #2
 8008c06:	b570      	push	{r4, r5, r6, lr}
 8008c08:	f1c2 0620 	rsb	r6, r2, #32
 8008c0c:	6843      	ldr	r3, [r0, #4]
 8008c0e:	6804      	ldr	r4, [r0, #0]
 8008c10:	fa03 f506 	lsl.w	r5, r3, r6
 8008c14:	432c      	orrs	r4, r5
 8008c16:	40d3      	lsrs	r3, r2
 8008c18:	6004      	str	r4, [r0, #0]
 8008c1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c1e:	4288      	cmp	r0, r1
 8008c20:	d3f4      	bcc.n	8008c0c <L_shift+0xc>
 8008c22:	bd70      	pop	{r4, r5, r6, pc}

08008c24 <__match>:
 8008c24:	b530      	push	{r4, r5, lr}
 8008c26:	6803      	ldr	r3, [r0, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c2e:	b914      	cbnz	r4, 8008c36 <__match+0x12>
 8008c30:	6003      	str	r3, [r0, #0]
 8008c32:	2001      	movs	r0, #1
 8008c34:	bd30      	pop	{r4, r5, pc}
 8008c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c3e:	2d19      	cmp	r5, #25
 8008c40:	bf98      	it	ls
 8008c42:	3220      	addls	r2, #32
 8008c44:	42a2      	cmp	r2, r4
 8008c46:	d0f0      	beq.n	8008c2a <__match+0x6>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e7f3      	b.n	8008c34 <__match+0x10>

08008c4c <__hexnan>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	2500      	movs	r5, #0
 8008c52:	680b      	ldr	r3, [r1, #0]
 8008c54:	4682      	mov	sl, r0
 8008c56:	115e      	asrs	r6, r3, #5
 8008c58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c5c:	f013 031f 	ands.w	r3, r3, #31
 8008c60:	bf18      	it	ne
 8008c62:	3604      	addne	r6, #4
 8008c64:	1f37      	subs	r7, r6, #4
 8008c66:	4690      	mov	r8, r2
 8008c68:	46b9      	mov	r9, r7
 8008c6a:	463c      	mov	r4, r7
 8008c6c:	46ab      	mov	fp, r5
 8008c6e:	b087      	sub	sp, #28
 8008c70:	6801      	ldr	r1, [r0, #0]
 8008c72:	9301      	str	r3, [sp, #4]
 8008c74:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c78:	9502      	str	r5, [sp, #8]
 8008c7a:	784a      	ldrb	r2, [r1, #1]
 8008c7c:	1c4b      	adds	r3, r1, #1
 8008c7e:	9303      	str	r3, [sp, #12]
 8008c80:	b342      	cbz	r2, 8008cd4 <__hexnan+0x88>
 8008c82:	4610      	mov	r0, r2
 8008c84:	9105      	str	r1, [sp, #20]
 8008c86:	9204      	str	r2, [sp, #16]
 8008c88:	f7ff fd69 	bl	800875e <__hexdig_fun>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d14f      	bne.n	8008d30 <__hexnan+0xe4>
 8008c90:	9a04      	ldr	r2, [sp, #16]
 8008c92:	9905      	ldr	r1, [sp, #20]
 8008c94:	2a20      	cmp	r2, #32
 8008c96:	d818      	bhi.n	8008cca <__hexnan+0x7e>
 8008c98:	9b02      	ldr	r3, [sp, #8]
 8008c9a:	459b      	cmp	fp, r3
 8008c9c:	dd13      	ble.n	8008cc6 <__hexnan+0x7a>
 8008c9e:	454c      	cmp	r4, r9
 8008ca0:	d206      	bcs.n	8008cb0 <__hexnan+0x64>
 8008ca2:	2d07      	cmp	r5, #7
 8008ca4:	dc04      	bgt.n	8008cb0 <__hexnan+0x64>
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4649      	mov	r1, r9
 8008caa:	4620      	mov	r0, r4
 8008cac:	f7ff ffa8 	bl	8008c00 <L_shift>
 8008cb0:	4544      	cmp	r4, r8
 8008cb2:	d950      	bls.n	8008d56 <__hexnan+0x10a>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f1a4 0904 	sub.w	r9, r4, #4
 8008cba:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cbe:	461d      	mov	r5, r3
 8008cc0:	464c      	mov	r4, r9
 8008cc2:	f8cd b008 	str.w	fp, [sp, #8]
 8008cc6:	9903      	ldr	r1, [sp, #12]
 8008cc8:	e7d7      	b.n	8008c7a <__hexnan+0x2e>
 8008cca:	2a29      	cmp	r2, #41	; 0x29
 8008ccc:	d156      	bne.n	8008d7c <__hexnan+0x130>
 8008cce:	3102      	adds	r1, #2
 8008cd0:	f8ca 1000 	str.w	r1, [sl]
 8008cd4:	f1bb 0f00 	cmp.w	fp, #0
 8008cd8:	d050      	beq.n	8008d7c <__hexnan+0x130>
 8008cda:	454c      	cmp	r4, r9
 8008cdc:	d206      	bcs.n	8008cec <__hexnan+0xa0>
 8008cde:	2d07      	cmp	r5, #7
 8008ce0:	dc04      	bgt.n	8008cec <__hexnan+0xa0>
 8008ce2:	462a      	mov	r2, r5
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f7ff ff8a 	bl	8008c00 <L_shift>
 8008cec:	4544      	cmp	r4, r8
 8008cee:	d934      	bls.n	8008d5a <__hexnan+0x10e>
 8008cf0:	4623      	mov	r3, r4
 8008cf2:	f1a8 0204 	sub.w	r2, r8, #4
 8008cf6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cfa:	429f      	cmp	r7, r3
 8008cfc:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d00:	d2f9      	bcs.n	8008cf6 <__hexnan+0xaa>
 8008d02:	1b3b      	subs	r3, r7, r4
 8008d04:	f023 0303 	bic.w	r3, r3, #3
 8008d08:	3304      	adds	r3, #4
 8008d0a:	3401      	adds	r4, #1
 8008d0c:	3e03      	subs	r6, #3
 8008d0e:	42b4      	cmp	r4, r6
 8008d10:	bf88      	it	hi
 8008d12:	2304      	movhi	r3, #4
 8008d14:	2200      	movs	r2, #0
 8008d16:	4443      	add	r3, r8
 8008d18:	f843 2b04 	str.w	r2, [r3], #4
 8008d1c:	429f      	cmp	r7, r3
 8008d1e:	d2fb      	bcs.n	8008d18 <__hexnan+0xcc>
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	b91b      	cbnz	r3, 8008d2c <__hexnan+0xe0>
 8008d24:	4547      	cmp	r7, r8
 8008d26:	d127      	bne.n	8008d78 <__hexnan+0x12c>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	2005      	movs	r0, #5
 8008d2e:	e026      	b.n	8008d7e <__hexnan+0x132>
 8008d30:	3501      	adds	r5, #1
 8008d32:	2d08      	cmp	r5, #8
 8008d34:	f10b 0b01 	add.w	fp, fp, #1
 8008d38:	dd06      	ble.n	8008d48 <__hexnan+0xfc>
 8008d3a:	4544      	cmp	r4, r8
 8008d3c:	d9c3      	bls.n	8008cc6 <__hexnan+0x7a>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2501      	movs	r5, #1
 8008d42:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d46:	3c04      	subs	r4, #4
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	f000 000f 	and.w	r0, r0, #15
 8008d4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008d52:	6022      	str	r2, [r4, #0]
 8008d54:	e7b7      	b.n	8008cc6 <__hexnan+0x7a>
 8008d56:	2508      	movs	r5, #8
 8008d58:	e7b5      	b.n	8008cc6 <__hexnan+0x7a>
 8008d5a:	9b01      	ldr	r3, [sp, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0df      	beq.n	8008d20 <__hexnan+0xd4>
 8008d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d64:	f1c3 0320 	rsb	r3, r3, #32
 8008d68:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d70:	401a      	ands	r2, r3
 8008d72:	f846 2c04 	str.w	r2, [r6, #-4]
 8008d76:	e7d3      	b.n	8008d20 <__hexnan+0xd4>
 8008d78:	3f04      	subs	r7, #4
 8008d7a:	e7d1      	b.n	8008d20 <__hexnan+0xd4>
 8008d7c:	2004      	movs	r0, #4
 8008d7e:	b007      	add	sp, #28
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d84 <__ascii_mbtowc>:
 8008d84:	b082      	sub	sp, #8
 8008d86:	b901      	cbnz	r1, 8008d8a <__ascii_mbtowc+0x6>
 8008d88:	a901      	add	r1, sp, #4
 8008d8a:	b142      	cbz	r2, 8008d9e <__ascii_mbtowc+0x1a>
 8008d8c:	b14b      	cbz	r3, 8008da2 <__ascii_mbtowc+0x1e>
 8008d8e:	7813      	ldrb	r3, [r2, #0]
 8008d90:	600b      	str	r3, [r1, #0]
 8008d92:	7812      	ldrb	r2, [r2, #0]
 8008d94:	1e10      	subs	r0, r2, #0
 8008d96:	bf18      	it	ne
 8008d98:	2001      	movne	r0, #1
 8008d9a:	b002      	add	sp, #8
 8008d9c:	4770      	bx	lr
 8008d9e:	4610      	mov	r0, r2
 8008da0:	e7fb      	b.n	8008d9a <__ascii_mbtowc+0x16>
 8008da2:	f06f 0001 	mvn.w	r0, #1
 8008da6:	e7f8      	b.n	8008d9a <__ascii_mbtowc+0x16>

08008da8 <memcpy>:
 8008da8:	440a      	add	r2, r1
 8008daa:	4291      	cmp	r1, r2
 8008dac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008db0:	d100      	bne.n	8008db4 <memcpy+0xc>
 8008db2:	4770      	bx	lr
 8008db4:	b510      	push	{r4, lr}
 8008db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dba:	4291      	cmp	r1, r2
 8008dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dc0:	d1f9      	bne.n	8008db6 <memcpy+0xe>
 8008dc2:	bd10      	pop	{r4, pc}

08008dc4 <_Balloc>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dc8:	4604      	mov	r4, r0
 8008dca:	460d      	mov	r5, r1
 8008dcc:	b976      	cbnz	r6, 8008dec <_Balloc+0x28>
 8008dce:	2010      	movs	r0, #16
 8008dd0:	f000 fd7e 	bl	80098d0 <malloc>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6260      	str	r0, [r4, #36]	; 0x24
 8008dd8:	b920      	cbnz	r0, 8008de4 <_Balloc+0x20>
 8008dda:	2166      	movs	r1, #102	; 0x66
 8008ddc:	4b17      	ldr	r3, [pc, #92]	; (8008e3c <_Balloc+0x78>)
 8008dde:	4818      	ldr	r0, [pc, #96]	; (8008e40 <_Balloc+0x7c>)
 8008de0:	f000 fd46 	bl	8009870 <__assert_func>
 8008de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008de8:	6006      	str	r6, [r0, #0]
 8008dea:	60c6      	str	r6, [r0, #12]
 8008dec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008dee:	68f3      	ldr	r3, [r6, #12]
 8008df0:	b183      	cbz	r3, 8008e14 <_Balloc+0x50>
 8008df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dfa:	b9b8      	cbnz	r0, 8008e2c <_Balloc+0x68>
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	fa01 f605 	lsl.w	r6, r1, r5
 8008e02:	1d72      	adds	r2, r6, #5
 8008e04:	4620      	mov	r0, r4
 8008e06:	0092      	lsls	r2, r2, #2
 8008e08:	f000 fc94 	bl	8009734 <_calloc_r>
 8008e0c:	b160      	cbz	r0, 8008e28 <_Balloc+0x64>
 8008e0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e12:	e00e      	b.n	8008e32 <_Balloc+0x6e>
 8008e14:	2221      	movs	r2, #33	; 0x21
 8008e16:	2104      	movs	r1, #4
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 fc8b 	bl	8009734 <_calloc_r>
 8008e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e20:	60f0      	str	r0, [r6, #12]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e4      	bne.n	8008df2 <_Balloc+0x2e>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	6802      	ldr	r2, [r0, #0]
 8008e2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e32:	2300      	movs	r3, #0
 8008e34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e38:	e7f7      	b.n	8008e2a <_Balloc+0x66>
 8008e3a:	bf00      	nop
 8008e3c:	0800c028 	.word	0x0800c028
 8008e40:	0800c03f 	.word	0x0800c03f

08008e44 <_Bfree>:
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e48:	4605      	mov	r5, r0
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	b976      	cbnz	r6, 8008e6c <_Bfree+0x28>
 8008e4e:	2010      	movs	r0, #16
 8008e50:	f000 fd3e 	bl	80098d0 <malloc>
 8008e54:	4602      	mov	r2, r0
 8008e56:	6268      	str	r0, [r5, #36]	; 0x24
 8008e58:	b920      	cbnz	r0, 8008e64 <_Bfree+0x20>
 8008e5a:	218a      	movs	r1, #138	; 0x8a
 8008e5c:	4b08      	ldr	r3, [pc, #32]	; (8008e80 <_Bfree+0x3c>)
 8008e5e:	4809      	ldr	r0, [pc, #36]	; (8008e84 <_Bfree+0x40>)
 8008e60:	f000 fd06 	bl	8009870 <__assert_func>
 8008e64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e68:	6006      	str	r6, [r0, #0]
 8008e6a:	60c6      	str	r6, [r0, #12]
 8008e6c:	b13c      	cbz	r4, 8008e7e <_Bfree+0x3a>
 8008e6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e70:	6862      	ldr	r2, [r4, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e78:	6021      	str	r1, [r4, #0]
 8008e7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	0800c028 	.word	0x0800c028
 8008e84:	0800c03f 	.word	0x0800c03f

08008e88 <__multadd>:
 8008e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8c:	4698      	mov	r8, r3
 8008e8e:	460c      	mov	r4, r1
 8008e90:	2300      	movs	r3, #0
 8008e92:	690e      	ldr	r6, [r1, #16]
 8008e94:	4607      	mov	r7, r0
 8008e96:	f101 0014 	add.w	r0, r1, #20
 8008e9a:	6805      	ldr	r5, [r0, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	b2a9      	uxth	r1, r5
 8008ea0:	fb02 8101 	mla	r1, r2, r1, r8
 8008ea4:	0c2d      	lsrs	r5, r5, #16
 8008ea6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008eaa:	fb02 c505 	mla	r5, r2, r5, ip
 8008eae:	b289      	uxth	r1, r1
 8008eb0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008eb4:	429e      	cmp	r6, r3
 8008eb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008eba:	f840 1b04 	str.w	r1, [r0], #4
 8008ebe:	dcec      	bgt.n	8008e9a <__multadd+0x12>
 8008ec0:	f1b8 0f00 	cmp.w	r8, #0
 8008ec4:	d022      	beq.n	8008f0c <__multadd+0x84>
 8008ec6:	68a3      	ldr	r3, [r4, #8]
 8008ec8:	42b3      	cmp	r3, r6
 8008eca:	dc19      	bgt.n	8008f00 <__multadd+0x78>
 8008ecc:	6861      	ldr	r1, [r4, #4]
 8008ece:	4638      	mov	r0, r7
 8008ed0:	3101      	adds	r1, #1
 8008ed2:	f7ff ff77 	bl	8008dc4 <_Balloc>
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	b928      	cbnz	r0, 8008ee6 <__multadd+0x5e>
 8008eda:	4602      	mov	r2, r0
 8008edc:	21b5      	movs	r1, #181	; 0xb5
 8008ede:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <__multadd+0x8c>)
 8008ee0:	480d      	ldr	r0, [pc, #52]	; (8008f18 <__multadd+0x90>)
 8008ee2:	f000 fcc5 	bl	8009870 <__assert_func>
 8008ee6:	6922      	ldr	r2, [r4, #16]
 8008ee8:	f104 010c 	add.w	r1, r4, #12
 8008eec:	3202      	adds	r2, #2
 8008eee:	0092      	lsls	r2, r2, #2
 8008ef0:	300c      	adds	r0, #12
 8008ef2:	f7ff ff59 	bl	8008da8 <memcpy>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff ffa3 	bl	8008e44 <_Bfree>
 8008efe:	462c      	mov	r4, r5
 8008f00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008f04:	3601      	adds	r6, #1
 8008f06:	f8c3 8014 	str.w	r8, [r3, #20]
 8008f0a:	6126      	str	r6, [r4, #16]
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f12:	bf00      	nop
 8008f14:	0800bf98 	.word	0x0800bf98
 8008f18:	0800c03f 	.word	0x0800c03f

08008f1c <__s2b>:
 8008f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f20:	4615      	mov	r5, r2
 8008f22:	2209      	movs	r2, #9
 8008f24:	461f      	mov	r7, r3
 8008f26:	3308      	adds	r3, #8
 8008f28:	460c      	mov	r4, r1
 8008f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f2e:	4606      	mov	r6, r0
 8008f30:	2201      	movs	r2, #1
 8008f32:	2100      	movs	r1, #0
 8008f34:	429a      	cmp	r2, r3
 8008f36:	db09      	blt.n	8008f4c <__s2b+0x30>
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f7ff ff43 	bl	8008dc4 <_Balloc>
 8008f3e:	b940      	cbnz	r0, 8008f52 <__s2b+0x36>
 8008f40:	4602      	mov	r2, r0
 8008f42:	21ce      	movs	r1, #206	; 0xce
 8008f44:	4b18      	ldr	r3, [pc, #96]	; (8008fa8 <__s2b+0x8c>)
 8008f46:	4819      	ldr	r0, [pc, #100]	; (8008fac <__s2b+0x90>)
 8008f48:	f000 fc92 	bl	8009870 <__assert_func>
 8008f4c:	0052      	lsls	r2, r2, #1
 8008f4e:	3101      	adds	r1, #1
 8008f50:	e7f0      	b.n	8008f34 <__s2b+0x18>
 8008f52:	9b08      	ldr	r3, [sp, #32]
 8008f54:	2d09      	cmp	r5, #9
 8008f56:	6143      	str	r3, [r0, #20]
 8008f58:	f04f 0301 	mov.w	r3, #1
 8008f5c:	6103      	str	r3, [r0, #16]
 8008f5e:	dd16      	ble.n	8008f8e <__s2b+0x72>
 8008f60:	f104 0909 	add.w	r9, r4, #9
 8008f64:	46c8      	mov	r8, r9
 8008f66:	442c      	add	r4, r5
 8008f68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f6c:	4601      	mov	r1, r0
 8008f6e:	220a      	movs	r2, #10
 8008f70:	4630      	mov	r0, r6
 8008f72:	3b30      	subs	r3, #48	; 0x30
 8008f74:	f7ff ff88 	bl	8008e88 <__multadd>
 8008f78:	45a0      	cmp	r8, r4
 8008f7a:	d1f5      	bne.n	8008f68 <__s2b+0x4c>
 8008f7c:	f1a5 0408 	sub.w	r4, r5, #8
 8008f80:	444c      	add	r4, r9
 8008f82:	1b2d      	subs	r5, r5, r4
 8008f84:	1963      	adds	r3, r4, r5
 8008f86:	42bb      	cmp	r3, r7
 8008f88:	db04      	blt.n	8008f94 <__s2b+0x78>
 8008f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f8e:	2509      	movs	r5, #9
 8008f90:	340a      	adds	r4, #10
 8008f92:	e7f6      	b.n	8008f82 <__s2b+0x66>
 8008f94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f98:	4601      	mov	r1, r0
 8008f9a:	220a      	movs	r2, #10
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	3b30      	subs	r3, #48	; 0x30
 8008fa0:	f7ff ff72 	bl	8008e88 <__multadd>
 8008fa4:	e7ee      	b.n	8008f84 <__s2b+0x68>
 8008fa6:	bf00      	nop
 8008fa8:	0800bf98 	.word	0x0800bf98
 8008fac:	0800c03f 	.word	0x0800c03f

08008fb0 <__hi0bits>:
 8008fb0:	0c02      	lsrs	r2, r0, #16
 8008fb2:	0412      	lsls	r2, r2, #16
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	b9ca      	cbnz	r2, 8008fec <__hi0bits+0x3c>
 8008fb8:	0403      	lsls	r3, r0, #16
 8008fba:	2010      	movs	r0, #16
 8008fbc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008fc0:	bf04      	itt	eq
 8008fc2:	021b      	lsleq	r3, r3, #8
 8008fc4:	3008      	addeq	r0, #8
 8008fc6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008fca:	bf04      	itt	eq
 8008fcc:	011b      	lsleq	r3, r3, #4
 8008fce:	3004      	addeq	r0, #4
 8008fd0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008fd4:	bf04      	itt	eq
 8008fd6:	009b      	lsleq	r3, r3, #2
 8008fd8:	3002      	addeq	r0, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	db05      	blt.n	8008fea <__hi0bits+0x3a>
 8008fde:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008fe2:	f100 0001 	add.w	r0, r0, #1
 8008fe6:	bf08      	it	eq
 8008fe8:	2020      	moveq	r0, #32
 8008fea:	4770      	bx	lr
 8008fec:	2000      	movs	r0, #0
 8008fee:	e7e5      	b.n	8008fbc <__hi0bits+0xc>

08008ff0 <__lo0bits>:
 8008ff0:	6803      	ldr	r3, [r0, #0]
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	f013 0007 	ands.w	r0, r3, #7
 8008ff8:	d00b      	beq.n	8009012 <__lo0bits+0x22>
 8008ffa:	07d9      	lsls	r1, r3, #31
 8008ffc:	d422      	bmi.n	8009044 <__lo0bits+0x54>
 8008ffe:	0798      	lsls	r0, r3, #30
 8009000:	bf49      	itett	mi
 8009002:	085b      	lsrmi	r3, r3, #1
 8009004:	089b      	lsrpl	r3, r3, #2
 8009006:	2001      	movmi	r0, #1
 8009008:	6013      	strmi	r3, [r2, #0]
 800900a:	bf5c      	itt	pl
 800900c:	2002      	movpl	r0, #2
 800900e:	6013      	strpl	r3, [r2, #0]
 8009010:	4770      	bx	lr
 8009012:	b299      	uxth	r1, r3
 8009014:	b909      	cbnz	r1, 800901a <__lo0bits+0x2a>
 8009016:	2010      	movs	r0, #16
 8009018:	0c1b      	lsrs	r3, r3, #16
 800901a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800901e:	bf04      	itt	eq
 8009020:	0a1b      	lsreq	r3, r3, #8
 8009022:	3008      	addeq	r0, #8
 8009024:	0719      	lsls	r1, r3, #28
 8009026:	bf04      	itt	eq
 8009028:	091b      	lsreq	r3, r3, #4
 800902a:	3004      	addeq	r0, #4
 800902c:	0799      	lsls	r1, r3, #30
 800902e:	bf04      	itt	eq
 8009030:	089b      	lsreq	r3, r3, #2
 8009032:	3002      	addeq	r0, #2
 8009034:	07d9      	lsls	r1, r3, #31
 8009036:	d403      	bmi.n	8009040 <__lo0bits+0x50>
 8009038:	085b      	lsrs	r3, r3, #1
 800903a:	f100 0001 	add.w	r0, r0, #1
 800903e:	d003      	beq.n	8009048 <__lo0bits+0x58>
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	4770      	bx	lr
 8009044:	2000      	movs	r0, #0
 8009046:	4770      	bx	lr
 8009048:	2020      	movs	r0, #32
 800904a:	4770      	bx	lr

0800904c <__i2b>:
 800904c:	b510      	push	{r4, lr}
 800904e:	460c      	mov	r4, r1
 8009050:	2101      	movs	r1, #1
 8009052:	f7ff feb7 	bl	8008dc4 <_Balloc>
 8009056:	4602      	mov	r2, r0
 8009058:	b928      	cbnz	r0, 8009066 <__i2b+0x1a>
 800905a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800905e:	4b04      	ldr	r3, [pc, #16]	; (8009070 <__i2b+0x24>)
 8009060:	4804      	ldr	r0, [pc, #16]	; (8009074 <__i2b+0x28>)
 8009062:	f000 fc05 	bl	8009870 <__assert_func>
 8009066:	2301      	movs	r3, #1
 8009068:	6144      	str	r4, [r0, #20]
 800906a:	6103      	str	r3, [r0, #16]
 800906c:	bd10      	pop	{r4, pc}
 800906e:	bf00      	nop
 8009070:	0800bf98 	.word	0x0800bf98
 8009074:	0800c03f 	.word	0x0800c03f

08009078 <__multiply>:
 8009078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907c:	4614      	mov	r4, r2
 800907e:	690a      	ldr	r2, [r1, #16]
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	460d      	mov	r5, r1
 8009084:	429a      	cmp	r2, r3
 8009086:	bfbe      	ittt	lt
 8009088:	460b      	movlt	r3, r1
 800908a:	4625      	movlt	r5, r4
 800908c:	461c      	movlt	r4, r3
 800908e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009092:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009096:	68ab      	ldr	r3, [r5, #8]
 8009098:	6869      	ldr	r1, [r5, #4]
 800909a:	eb0a 0709 	add.w	r7, sl, r9
 800909e:	42bb      	cmp	r3, r7
 80090a0:	b085      	sub	sp, #20
 80090a2:	bfb8      	it	lt
 80090a4:	3101      	addlt	r1, #1
 80090a6:	f7ff fe8d 	bl	8008dc4 <_Balloc>
 80090aa:	b930      	cbnz	r0, 80090ba <__multiply+0x42>
 80090ac:	4602      	mov	r2, r0
 80090ae:	f240 115d 	movw	r1, #349	; 0x15d
 80090b2:	4b41      	ldr	r3, [pc, #260]	; (80091b8 <__multiply+0x140>)
 80090b4:	4841      	ldr	r0, [pc, #260]	; (80091bc <__multiply+0x144>)
 80090b6:	f000 fbdb 	bl	8009870 <__assert_func>
 80090ba:	f100 0614 	add.w	r6, r0, #20
 80090be:	4633      	mov	r3, r6
 80090c0:	2200      	movs	r2, #0
 80090c2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80090c6:	4543      	cmp	r3, r8
 80090c8:	d31e      	bcc.n	8009108 <__multiply+0x90>
 80090ca:	f105 0c14 	add.w	ip, r5, #20
 80090ce:	f104 0314 	add.w	r3, r4, #20
 80090d2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80090d6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80090da:	9202      	str	r2, [sp, #8]
 80090dc:	ebac 0205 	sub.w	r2, ip, r5
 80090e0:	3a15      	subs	r2, #21
 80090e2:	f022 0203 	bic.w	r2, r2, #3
 80090e6:	3204      	adds	r2, #4
 80090e8:	f105 0115 	add.w	r1, r5, #21
 80090ec:	458c      	cmp	ip, r1
 80090ee:	bf38      	it	cc
 80090f0:	2204      	movcc	r2, #4
 80090f2:	9201      	str	r2, [sp, #4]
 80090f4:	9a02      	ldr	r2, [sp, #8]
 80090f6:	9303      	str	r3, [sp, #12]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d808      	bhi.n	800910e <__multiply+0x96>
 80090fc:	2f00      	cmp	r7, #0
 80090fe:	dc55      	bgt.n	80091ac <__multiply+0x134>
 8009100:	6107      	str	r7, [r0, #16]
 8009102:	b005      	add	sp, #20
 8009104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009108:	f843 2b04 	str.w	r2, [r3], #4
 800910c:	e7db      	b.n	80090c6 <__multiply+0x4e>
 800910e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009112:	f1ba 0f00 	cmp.w	sl, #0
 8009116:	d020      	beq.n	800915a <__multiply+0xe2>
 8009118:	46b1      	mov	r9, r6
 800911a:	2200      	movs	r2, #0
 800911c:	f105 0e14 	add.w	lr, r5, #20
 8009120:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009124:	f8d9 b000 	ldr.w	fp, [r9]
 8009128:	b2a1      	uxth	r1, r4
 800912a:	fa1f fb8b 	uxth.w	fp, fp
 800912e:	fb0a b101 	mla	r1, sl, r1, fp
 8009132:	4411      	add	r1, r2
 8009134:	f8d9 2000 	ldr.w	r2, [r9]
 8009138:	0c24      	lsrs	r4, r4, #16
 800913a:	0c12      	lsrs	r2, r2, #16
 800913c:	fb0a 2404 	mla	r4, sl, r4, r2
 8009140:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009144:	b289      	uxth	r1, r1
 8009146:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800914a:	45f4      	cmp	ip, lr
 800914c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009150:	f849 1b04 	str.w	r1, [r9], #4
 8009154:	d8e4      	bhi.n	8009120 <__multiply+0xa8>
 8009156:	9901      	ldr	r1, [sp, #4]
 8009158:	5072      	str	r2, [r6, r1]
 800915a:	9a03      	ldr	r2, [sp, #12]
 800915c:	3304      	adds	r3, #4
 800915e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009162:	f1b9 0f00 	cmp.w	r9, #0
 8009166:	d01f      	beq.n	80091a8 <__multiply+0x130>
 8009168:	46b6      	mov	lr, r6
 800916a:	f04f 0a00 	mov.w	sl, #0
 800916e:	6834      	ldr	r4, [r6, #0]
 8009170:	f105 0114 	add.w	r1, r5, #20
 8009174:	880a      	ldrh	r2, [r1, #0]
 8009176:	f8be b002 	ldrh.w	fp, [lr, #2]
 800917a:	b2a4      	uxth	r4, r4
 800917c:	fb09 b202 	mla	r2, r9, r2, fp
 8009180:	4492      	add	sl, r2
 8009182:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009186:	f84e 4b04 	str.w	r4, [lr], #4
 800918a:	f851 4b04 	ldr.w	r4, [r1], #4
 800918e:	f8be 2000 	ldrh.w	r2, [lr]
 8009192:	0c24      	lsrs	r4, r4, #16
 8009194:	fb09 2404 	mla	r4, r9, r4, r2
 8009198:	458c      	cmp	ip, r1
 800919a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800919e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80091a2:	d8e7      	bhi.n	8009174 <__multiply+0xfc>
 80091a4:	9a01      	ldr	r2, [sp, #4]
 80091a6:	50b4      	str	r4, [r6, r2]
 80091a8:	3604      	adds	r6, #4
 80091aa:	e7a3      	b.n	80090f4 <__multiply+0x7c>
 80091ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1a5      	bne.n	8009100 <__multiply+0x88>
 80091b4:	3f01      	subs	r7, #1
 80091b6:	e7a1      	b.n	80090fc <__multiply+0x84>
 80091b8:	0800bf98 	.word	0x0800bf98
 80091bc:	0800c03f 	.word	0x0800c03f

080091c0 <__pow5mult>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	4615      	mov	r5, r2
 80091c6:	f012 0203 	ands.w	r2, r2, #3
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	d007      	beq.n	80091e0 <__pow5mult+0x20>
 80091d0:	4c25      	ldr	r4, [pc, #148]	; (8009268 <__pow5mult+0xa8>)
 80091d2:	3a01      	subs	r2, #1
 80091d4:	2300      	movs	r3, #0
 80091d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091da:	f7ff fe55 	bl	8008e88 <__multadd>
 80091de:	4607      	mov	r7, r0
 80091e0:	10ad      	asrs	r5, r5, #2
 80091e2:	d03d      	beq.n	8009260 <__pow5mult+0xa0>
 80091e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091e6:	b97c      	cbnz	r4, 8009208 <__pow5mult+0x48>
 80091e8:	2010      	movs	r0, #16
 80091ea:	f000 fb71 	bl	80098d0 <malloc>
 80091ee:	4602      	mov	r2, r0
 80091f0:	6270      	str	r0, [r6, #36]	; 0x24
 80091f2:	b928      	cbnz	r0, 8009200 <__pow5mult+0x40>
 80091f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091f8:	4b1c      	ldr	r3, [pc, #112]	; (800926c <__pow5mult+0xac>)
 80091fa:	481d      	ldr	r0, [pc, #116]	; (8009270 <__pow5mult+0xb0>)
 80091fc:	f000 fb38 	bl	8009870 <__assert_func>
 8009200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009204:	6004      	str	r4, [r0, #0]
 8009206:	60c4      	str	r4, [r0, #12]
 8009208:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800920c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009210:	b94c      	cbnz	r4, 8009226 <__pow5mult+0x66>
 8009212:	f240 2171 	movw	r1, #625	; 0x271
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff ff18 	bl	800904c <__i2b>
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	f8c8 0008 	str.w	r0, [r8, #8]
 8009224:	6003      	str	r3, [r0, #0]
 8009226:	f04f 0900 	mov.w	r9, #0
 800922a:	07eb      	lsls	r3, r5, #31
 800922c:	d50a      	bpl.n	8009244 <__pow5mult+0x84>
 800922e:	4639      	mov	r1, r7
 8009230:	4622      	mov	r2, r4
 8009232:	4630      	mov	r0, r6
 8009234:	f7ff ff20 	bl	8009078 <__multiply>
 8009238:	4680      	mov	r8, r0
 800923a:	4639      	mov	r1, r7
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff fe01 	bl	8008e44 <_Bfree>
 8009242:	4647      	mov	r7, r8
 8009244:	106d      	asrs	r5, r5, #1
 8009246:	d00b      	beq.n	8009260 <__pow5mult+0xa0>
 8009248:	6820      	ldr	r0, [r4, #0]
 800924a:	b938      	cbnz	r0, 800925c <__pow5mult+0x9c>
 800924c:	4622      	mov	r2, r4
 800924e:	4621      	mov	r1, r4
 8009250:	4630      	mov	r0, r6
 8009252:	f7ff ff11 	bl	8009078 <__multiply>
 8009256:	6020      	str	r0, [r4, #0]
 8009258:	f8c0 9000 	str.w	r9, [r0]
 800925c:	4604      	mov	r4, r0
 800925e:	e7e4      	b.n	800922a <__pow5mult+0x6a>
 8009260:	4638      	mov	r0, r7
 8009262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009266:	bf00      	nop
 8009268:	0800c190 	.word	0x0800c190
 800926c:	0800c028 	.word	0x0800c028
 8009270:	0800c03f 	.word	0x0800c03f

08009274 <__lshift>:
 8009274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009278:	460c      	mov	r4, r1
 800927a:	4607      	mov	r7, r0
 800927c:	4691      	mov	r9, r2
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	6849      	ldr	r1, [r1, #4]
 8009282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009286:	68a3      	ldr	r3, [r4, #8]
 8009288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800928c:	f108 0601 	add.w	r6, r8, #1
 8009290:	42b3      	cmp	r3, r6
 8009292:	db0b      	blt.n	80092ac <__lshift+0x38>
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff fd95 	bl	8008dc4 <_Balloc>
 800929a:	4605      	mov	r5, r0
 800929c:	b948      	cbnz	r0, 80092b2 <__lshift+0x3e>
 800929e:	4602      	mov	r2, r0
 80092a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092a4:	4b27      	ldr	r3, [pc, #156]	; (8009344 <__lshift+0xd0>)
 80092a6:	4828      	ldr	r0, [pc, #160]	; (8009348 <__lshift+0xd4>)
 80092a8:	f000 fae2 	bl	8009870 <__assert_func>
 80092ac:	3101      	adds	r1, #1
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	e7ee      	b.n	8009290 <__lshift+0x1c>
 80092b2:	2300      	movs	r3, #0
 80092b4:	f100 0114 	add.w	r1, r0, #20
 80092b8:	f100 0210 	add.w	r2, r0, #16
 80092bc:	4618      	mov	r0, r3
 80092be:	4553      	cmp	r3, sl
 80092c0:	db33      	blt.n	800932a <__lshift+0xb6>
 80092c2:	6920      	ldr	r0, [r4, #16]
 80092c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092c8:	f104 0314 	add.w	r3, r4, #20
 80092cc:	f019 091f 	ands.w	r9, r9, #31
 80092d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092d8:	d02b      	beq.n	8009332 <__lshift+0xbe>
 80092da:	468a      	mov	sl, r1
 80092dc:	2200      	movs	r2, #0
 80092de:	f1c9 0e20 	rsb	lr, r9, #32
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	fa00 f009 	lsl.w	r0, r0, r9
 80092e8:	4302      	orrs	r2, r0
 80092ea:	f84a 2b04 	str.w	r2, [sl], #4
 80092ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f2:	459c      	cmp	ip, r3
 80092f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80092f8:	d8f3      	bhi.n	80092e2 <__lshift+0x6e>
 80092fa:	ebac 0304 	sub.w	r3, ip, r4
 80092fe:	3b15      	subs	r3, #21
 8009300:	f023 0303 	bic.w	r3, r3, #3
 8009304:	3304      	adds	r3, #4
 8009306:	f104 0015 	add.w	r0, r4, #21
 800930a:	4584      	cmp	ip, r0
 800930c:	bf38      	it	cc
 800930e:	2304      	movcc	r3, #4
 8009310:	50ca      	str	r2, [r1, r3]
 8009312:	b10a      	cbz	r2, 8009318 <__lshift+0xa4>
 8009314:	f108 0602 	add.w	r6, r8, #2
 8009318:	3e01      	subs	r6, #1
 800931a:	4638      	mov	r0, r7
 800931c:	4621      	mov	r1, r4
 800931e:	612e      	str	r6, [r5, #16]
 8009320:	f7ff fd90 	bl	8008e44 <_Bfree>
 8009324:	4628      	mov	r0, r5
 8009326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932a:	f842 0f04 	str.w	r0, [r2, #4]!
 800932e:	3301      	adds	r3, #1
 8009330:	e7c5      	b.n	80092be <__lshift+0x4a>
 8009332:	3904      	subs	r1, #4
 8009334:	f853 2b04 	ldr.w	r2, [r3], #4
 8009338:	459c      	cmp	ip, r3
 800933a:	f841 2f04 	str.w	r2, [r1, #4]!
 800933e:	d8f9      	bhi.n	8009334 <__lshift+0xc0>
 8009340:	e7ea      	b.n	8009318 <__lshift+0xa4>
 8009342:	bf00      	nop
 8009344:	0800bf98 	.word	0x0800bf98
 8009348:	0800c03f 	.word	0x0800c03f

0800934c <__mcmp>:
 800934c:	4603      	mov	r3, r0
 800934e:	690a      	ldr	r2, [r1, #16]
 8009350:	6900      	ldr	r0, [r0, #16]
 8009352:	b530      	push	{r4, r5, lr}
 8009354:	1a80      	subs	r0, r0, r2
 8009356:	d10d      	bne.n	8009374 <__mcmp+0x28>
 8009358:	3314      	adds	r3, #20
 800935a:	3114      	adds	r1, #20
 800935c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009360:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009364:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009368:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800936c:	4295      	cmp	r5, r2
 800936e:	d002      	beq.n	8009376 <__mcmp+0x2a>
 8009370:	d304      	bcc.n	800937c <__mcmp+0x30>
 8009372:	2001      	movs	r0, #1
 8009374:	bd30      	pop	{r4, r5, pc}
 8009376:	42a3      	cmp	r3, r4
 8009378:	d3f4      	bcc.n	8009364 <__mcmp+0x18>
 800937a:	e7fb      	b.n	8009374 <__mcmp+0x28>
 800937c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009380:	e7f8      	b.n	8009374 <__mcmp+0x28>
	...

08009384 <__mdiff>:
 8009384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009388:	460c      	mov	r4, r1
 800938a:	4606      	mov	r6, r0
 800938c:	4611      	mov	r1, r2
 800938e:	4620      	mov	r0, r4
 8009390:	4692      	mov	sl, r2
 8009392:	f7ff ffdb 	bl	800934c <__mcmp>
 8009396:	1e05      	subs	r5, r0, #0
 8009398:	d111      	bne.n	80093be <__mdiff+0x3a>
 800939a:	4629      	mov	r1, r5
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff fd11 	bl	8008dc4 <_Balloc>
 80093a2:	4602      	mov	r2, r0
 80093a4:	b928      	cbnz	r0, 80093b2 <__mdiff+0x2e>
 80093a6:	f240 2132 	movw	r1, #562	; 0x232
 80093aa:	4b3c      	ldr	r3, [pc, #240]	; (800949c <__mdiff+0x118>)
 80093ac:	483c      	ldr	r0, [pc, #240]	; (80094a0 <__mdiff+0x11c>)
 80093ae:	f000 fa5f 	bl	8009870 <__assert_func>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093b8:	4610      	mov	r0, r2
 80093ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093be:	bfa4      	itt	ge
 80093c0:	4653      	movge	r3, sl
 80093c2:	46a2      	movge	sl, r4
 80093c4:	4630      	mov	r0, r6
 80093c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80093ca:	bfa6      	itte	ge
 80093cc:	461c      	movge	r4, r3
 80093ce:	2500      	movge	r5, #0
 80093d0:	2501      	movlt	r5, #1
 80093d2:	f7ff fcf7 	bl	8008dc4 <_Balloc>
 80093d6:	4602      	mov	r2, r0
 80093d8:	b918      	cbnz	r0, 80093e2 <__mdiff+0x5e>
 80093da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093de:	4b2f      	ldr	r3, [pc, #188]	; (800949c <__mdiff+0x118>)
 80093e0:	e7e4      	b.n	80093ac <__mdiff+0x28>
 80093e2:	f100 0814 	add.w	r8, r0, #20
 80093e6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80093ea:	60c5      	str	r5, [r0, #12]
 80093ec:	f04f 0c00 	mov.w	ip, #0
 80093f0:	f10a 0514 	add.w	r5, sl, #20
 80093f4:	f10a 0010 	add.w	r0, sl, #16
 80093f8:	46c2      	mov	sl, r8
 80093fa:	6926      	ldr	r6, [r4, #16]
 80093fc:	f104 0914 	add.w	r9, r4, #20
 8009400:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009404:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009408:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800940c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009410:	fa1f f18b 	uxth.w	r1, fp
 8009414:	4461      	add	r1, ip
 8009416:	fa1f fc83 	uxth.w	ip, r3
 800941a:	0c1b      	lsrs	r3, r3, #16
 800941c:	eba1 010c 	sub.w	r1, r1, ip
 8009420:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009424:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009428:	b289      	uxth	r1, r1
 800942a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800942e:	454e      	cmp	r6, r9
 8009430:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009434:	f84a 3b04 	str.w	r3, [sl], #4
 8009438:	d8e6      	bhi.n	8009408 <__mdiff+0x84>
 800943a:	1b33      	subs	r3, r6, r4
 800943c:	3b15      	subs	r3, #21
 800943e:	f023 0303 	bic.w	r3, r3, #3
 8009442:	3415      	adds	r4, #21
 8009444:	3304      	adds	r3, #4
 8009446:	42a6      	cmp	r6, r4
 8009448:	bf38      	it	cc
 800944a:	2304      	movcc	r3, #4
 800944c:	441d      	add	r5, r3
 800944e:	4443      	add	r3, r8
 8009450:	461e      	mov	r6, r3
 8009452:	462c      	mov	r4, r5
 8009454:	4574      	cmp	r4, lr
 8009456:	d30e      	bcc.n	8009476 <__mdiff+0xf2>
 8009458:	f10e 0103 	add.w	r1, lr, #3
 800945c:	1b49      	subs	r1, r1, r5
 800945e:	f021 0103 	bic.w	r1, r1, #3
 8009462:	3d03      	subs	r5, #3
 8009464:	45ae      	cmp	lr, r5
 8009466:	bf38      	it	cc
 8009468:	2100      	movcc	r1, #0
 800946a:	4419      	add	r1, r3
 800946c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009470:	b18b      	cbz	r3, 8009496 <__mdiff+0x112>
 8009472:	6117      	str	r7, [r2, #16]
 8009474:	e7a0      	b.n	80093b8 <__mdiff+0x34>
 8009476:	f854 8b04 	ldr.w	r8, [r4], #4
 800947a:	fa1f f188 	uxth.w	r1, r8
 800947e:	4461      	add	r1, ip
 8009480:	1408      	asrs	r0, r1, #16
 8009482:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009486:	b289      	uxth	r1, r1
 8009488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800948c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009490:	f846 1b04 	str.w	r1, [r6], #4
 8009494:	e7de      	b.n	8009454 <__mdiff+0xd0>
 8009496:	3f01      	subs	r7, #1
 8009498:	e7e8      	b.n	800946c <__mdiff+0xe8>
 800949a:	bf00      	nop
 800949c:	0800bf98 	.word	0x0800bf98
 80094a0:	0800c03f 	.word	0x0800c03f

080094a4 <__ulp>:
 80094a4:	4b11      	ldr	r3, [pc, #68]	; (80094ec <__ulp+0x48>)
 80094a6:	400b      	ands	r3, r1
 80094a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	dd02      	ble.n	80094b6 <__ulp+0x12>
 80094b0:	2000      	movs	r0, #0
 80094b2:	4619      	mov	r1, r3
 80094b4:	4770      	bx	lr
 80094b6:	425b      	negs	r3, r3
 80094b8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80094bc:	f04f 0000 	mov.w	r0, #0
 80094c0:	f04f 0100 	mov.w	r1, #0
 80094c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094c8:	da04      	bge.n	80094d4 <__ulp+0x30>
 80094ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094ce:	fa43 f102 	asr.w	r1, r3, r2
 80094d2:	4770      	bx	lr
 80094d4:	f1a2 0314 	sub.w	r3, r2, #20
 80094d8:	2b1e      	cmp	r3, #30
 80094da:	bfd6      	itet	le
 80094dc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80094e0:	2301      	movgt	r3, #1
 80094e2:	fa22 f303 	lsrle.w	r3, r2, r3
 80094e6:	4618      	mov	r0, r3
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	7ff00000 	.word	0x7ff00000

080094f0 <__b2d>:
 80094f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f4:	6907      	ldr	r7, [r0, #16]
 80094f6:	f100 0914 	add.w	r9, r0, #20
 80094fa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80094fe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009502:	f1a7 0804 	sub.w	r8, r7, #4
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff fd52 	bl	8008fb0 <__hi0bits>
 800950c:	f1c0 0320 	rsb	r3, r0, #32
 8009510:	280a      	cmp	r0, #10
 8009512:	600b      	str	r3, [r1, #0]
 8009514:	491f      	ldr	r1, [pc, #124]	; (8009594 <__b2d+0xa4>)
 8009516:	dc17      	bgt.n	8009548 <__b2d+0x58>
 8009518:	45c1      	cmp	r9, r8
 800951a:	bf28      	it	cs
 800951c:	2200      	movcs	r2, #0
 800951e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009522:	fa26 f30c 	lsr.w	r3, r6, ip
 8009526:	bf38      	it	cc
 8009528:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800952c:	ea43 0501 	orr.w	r5, r3, r1
 8009530:	f100 0315 	add.w	r3, r0, #21
 8009534:	fa06 f303 	lsl.w	r3, r6, r3
 8009538:	fa22 f20c 	lsr.w	r2, r2, ip
 800953c:	ea43 0402 	orr.w	r4, r3, r2
 8009540:	4620      	mov	r0, r4
 8009542:	4629      	mov	r1, r5
 8009544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009548:	45c1      	cmp	r9, r8
 800954a:	bf2e      	itee	cs
 800954c:	2200      	movcs	r2, #0
 800954e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009552:	f1a7 0808 	subcc.w	r8, r7, #8
 8009556:	f1b0 030b 	subs.w	r3, r0, #11
 800955a:	d016      	beq.n	800958a <__b2d+0x9a>
 800955c:	f1c3 0720 	rsb	r7, r3, #32
 8009560:	fa22 f107 	lsr.w	r1, r2, r7
 8009564:	45c8      	cmp	r8, r9
 8009566:	fa06 f603 	lsl.w	r6, r6, r3
 800956a:	ea46 0601 	orr.w	r6, r6, r1
 800956e:	bf94      	ite	ls
 8009570:	2100      	movls	r1, #0
 8009572:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009576:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800957a:	fa02 f003 	lsl.w	r0, r2, r3
 800957e:	40f9      	lsrs	r1, r7
 8009580:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009584:	ea40 0401 	orr.w	r4, r0, r1
 8009588:	e7da      	b.n	8009540 <__b2d+0x50>
 800958a:	4614      	mov	r4, r2
 800958c:	ea46 0501 	orr.w	r5, r6, r1
 8009590:	e7d6      	b.n	8009540 <__b2d+0x50>
 8009592:	bf00      	nop
 8009594:	3ff00000 	.word	0x3ff00000

08009598 <__d2b>:
 8009598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800959c:	2101      	movs	r1, #1
 800959e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80095a2:	4690      	mov	r8, r2
 80095a4:	461d      	mov	r5, r3
 80095a6:	f7ff fc0d 	bl	8008dc4 <_Balloc>
 80095aa:	4604      	mov	r4, r0
 80095ac:	b930      	cbnz	r0, 80095bc <__d2b+0x24>
 80095ae:	4602      	mov	r2, r0
 80095b0:	f240 310a 	movw	r1, #778	; 0x30a
 80095b4:	4b24      	ldr	r3, [pc, #144]	; (8009648 <__d2b+0xb0>)
 80095b6:	4825      	ldr	r0, [pc, #148]	; (800964c <__d2b+0xb4>)
 80095b8:	f000 f95a 	bl	8009870 <__assert_func>
 80095bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80095c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80095c4:	bb2d      	cbnz	r5, 8009612 <__d2b+0x7a>
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	f1b8 0300 	subs.w	r3, r8, #0
 80095cc:	d026      	beq.n	800961c <__d2b+0x84>
 80095ce:	4668      	mov	r0, sp
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	f7ff fd0d 	bl	8008ff0 <__lo0bits>
 80095d6:	9900      	ldr	r1, [sp, #0]
 80095d8:	b1f0      	cbz	r0, 8009618 <__d2b+0x80>
 80095da:	9a01      	ldr	r2, [sp, #4]
 80095dc:	f1c0 0320 	rsb	r3, r0, #32
 80095e0:	fa02 f303 	lsl.w	r3, r2, r3
 80095e4:	430b      	orrs	r3, r1
 80095e6:	40c2      	lsrs	r2, r0
 80095e8:	6163      	str	r3, [r4, #20]
 80095ea:	9201      	str	r2, [sp, #4]
 80095ec:	9b01      	ldr	r3, [sp, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bf14      	ite	ne
 80095f2:	2102      	movne	r1, #2
 80095f4:	2101      	moveq	r1, #1
 80095f6:	61a3      	str	r3, [r4, #24]
 80095f8:	6121      	str	r1, [r4, #16]
 80095fa:	b1c5      	cbz	r5, 800962e <__d2b+0x96>
 80095fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009600:	4405      	add	r5, r0
 8009602:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009606:	603d      	str	r5, [r7, #0]
 8009608:	6030      	str	r0, [r6, #0]
 800960a:	4620      	mov	r0, r4
 800960c:	b002      	add	sp, #8
 800960e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009616:	e7d6      	b.n	80095c6 <__d2b+0x2e>
 8009618:	6161      	str	r1, [r4, #20]
 800961a:	e7e7      	b.n	80095ec <__d2b+0x54>
 800961c:	a801      	add	r0, sp, #4
 800961e:	f7ff fce7 	bl	8008ff0 <__lo0bits>
 8009622:	2101      	movs	r1, #1
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	6121      	str	r1, [r4, #16]
 8009628:	6163      	str	r3, [r4, #20]
 800962a:	3020      	adds	r0, #32
 800962c:	e7e5      	b.n	80095fa <__d2b+0x62>
 800962e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009632:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009636:	6038      	str	r0, [r7, #0]
 8009638:	6918      	ldr	r0, [r3, #16]
 800963a:	f7ff fcb9 	bl	8008fb0 <__hi0bits>
 800963e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009642:	6031      	str	r1, [r6, #0]
 8009644:	e7e1      	b.n	800960a <__d2b+0x72>
 8009646:	bf00      	nop
 8009648:	0800bf98 	.word	0x0800bf98
 800964c:	0800c03f 	.word	0x0800c03f

08009650 <__ratio>:
 8009650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	4688      	mov	r8, r1
 8009656:	4669      	mov	r1, sp
 8009658:	4681      	mov	r9, r0
 800965a:	f7ff ff49 	bl	80094f0 <__b2d>
 800965e:	460f      	mov	r7, r1
 8009660:	4604      	mov	r4, r0
 8009662:	460d      	mov	r5, r1
 8009664:	4640      	mov	r0, r8
 8009666:	a901      	add	r1, sp, #4
 8009668:	f7ff ff42 	bl	80094f0 <__b2d>
 800966c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009670:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009674:	468b      	mov	fp, r1
 8009676:	eba3 0c02 	sub.w	ip, r3, r2
 800967a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfd5      	itete	le
 8009688:	460a      	movle	r2, r1
 800968a:	462a      	movgt	r2, r5
 800968c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009690:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009694:	bfd8      	it	le
 8009696:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800969a:	465b      	mov	r3, fp
 800969c:	4602      	mov	r2, r0
 800969e:	4639      	mov	r1, r7
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7f7 f843 	bl	800072c <__aeabi_ddiv>
 80096a6:	b003      	add	sp, #12
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096ac <__copybits>:
 80096ac:	3901      	subs	r1, #1
 80096ae:	b570      	push	{r4, r5, r6, lr}
 80096b0:	1149      	asrs	r1, r1, #5
 80096b2:	6914      	ldr	r4, [r2, #16]
 80096b4:	3101      	adds	r1, #1
 80096b6:	f102 0314 	add.w	r3, r2, #20
 80096ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096c2:	1f05      	subs	r5, r0, #4
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	d30c      	bcc.n	80096e2 <__copybits+0x36>
 80096c8:	1aa3      	subs	r3, r4, r2
 80096ca:	3b11      	subs	r3, #17
 80096cc:	f023 0303 	bic.w	r3, r3, #3
 80096d0:	3211      	adds	r2, #17
 80096d2:	42a2      	cmp	r2, r4
 80096d4:	bf88      	it	hi
 80096d6:	2300      	movhi	r3, #0
 80096d8:	4418      	add	r0, r3
 80096da:	2300      	movs	r3, #0
 80096dc:	4288      	cmp	r0, r1
 80096de:	d305      	bcc.n	80096ec <__copybits+0x40>
 80096e0:	bd70      	pop	{r4, r5, r6, pc}
 80096e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80096e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80096ea:	e7eb      	b.n	80096c4 <__copybits+0x18>
 80096ec:	f840 3b04 	str.w	r3, [r0], #4
 80096f0:	e7f4      	b.n	80096dc <__copybits+0x30>

080096f2 <__any_on>:
 80096f2:	f100 0214 	add.w	r2, r0, #20
 80096f6:	6900      	ldr	r0, [r0, #16]
 80096f8:	114b      	asrs	r3, r1, #5
 80096fa:	4298      	cmp	r0, r3
 80096fc:	b510      	push	{r4, lr}
 80096fe:	db11      	blt.n	8009724 <__any_on+0x32>
 8009700:	dd0a      	ble.n	8009718 <__any_on+0x26>
 8009702:	f011 011f 	ands.w	r1, r1, #31
 8009706:	d007      	beq.n	8009718 <__any_on+0x26>
 8009708:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800970c:	fa24 f001 	lsr.w	r0, r4, r1
 8009710:	fa00 f101 	lsl.w	r1, r0, r1
 8009714:	428c      	cmp	r4, r1
 8009716:	d10b      	bne.n	8009730 <__any_on+0x3e>
 8009718:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800971c:	4293      	cmp	r3, r2
 800971e:	d803      	bhi.n	8009728 <__any_on+0x36>
 8009720:	2000      	movs	r0, #0
 8009722:	bd10      	pop	{r4, pc}
 8009724:	4603      	mov	r3, r0
 8009726:	e7f7      	b.n	8009718 <__any_on+0x26>
 8009728:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800972c:	2900      	cmp	r1, #0
 800972e:	d0f5      	beq.n	800971c <__any_on+0x2a>
 8009730:	2001      	movs	r0, #1
 8009732:	e7f6      	b.n	8009722 <__any_on+0x30>

08009734 <_calloc_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	fb02 f501 	mul.w	r5, r2, r1
 800973a:	4629      	mov	r1, r5
 800973c:	f000 f808 	bl	8009750 <_malloc_r>
 8009740:	4604      	mov	r4, r0
 8009742:	b118      	cbz	r0, 800974c <_calloc_r+0x18>
 8009744:	462a      	mov	r2, r5
 8009746:	2100      	movs	r1, #0
 8009748:	f7fe f98a 	bl	8007a60 <memset>
 800974c:	4620      	mov	r0, r4
 800974e:	bd38      	pop	{r3, r4, r5, pc}

08009750 <_malloc_r>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	1ccd      	adds	r5, r1, #3
 8009754:	f025 0503 	bic.w	r5, r5, #3
 8009758:	3508      	adds	r5, #8
 800975a:	2d0c      	cmp	r5, #12
 800975c:	bf38      	it	cc
 800975e:	250c      	movcc	r5, #12
 8009760:	2d00      	cmp	r5, #0
 8009762:	4606      	mov	r6, r0
 8009764:	db01      	blt.n	800976a <_malloc_r+0x1a>
 8009766:	42a9      	cmp	r1, r5
 8009768:	d903      	bls.n	8009772 <_malloc_r+0x22>
 800976a:	230c      	movs	r3, #12
 800976c:	6033      	str	r3, [r6, #0]
 800976e:	2000      	movs	r0, #0
 8009770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009772:	f000 f8b5 	bl	80098e0 <__malloc_lock>
 8009776:	4921      	ldr	r1, [pc, #132]	; (80097fc <_malloc_r+0xac>)
 8009778:	680a      	ldr	r2, [r1, #0]
 800977a:	4614      	mov	r4, r2
 800977c:	b99c      	cbnz	r4, 80097a6 <_malloc_r+0x56>
 800977e:	4f20      	ldr	r7, [pc, #128]	; (8009800 <_malloc_r+0xb0>)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	b923      	cbnz	r3, 800978e <_malloc_r+0x3e>
 8009784:	4621      	mov	r1, r4
 8009786:	4630      	mov	r0, r6
 8009788:	f000 f842 	bl	8009810 <_sbrk_r>
 800978c:	6038      	str	r0, [r7, #0]
 800978e:	4629      	mov	r1, r5
 8009790:	4630      	mov	r0, r6
 8009792:	f000 f83d 	bl	8009810 <_sbrk_r>
 8009796:	1c43      	adds	r3, r0, #1
 8009798:	d123      	bne.n	80097e2 <_malloc_r+0x92>
 800979a:	230c      	movs	r3, #12
 800979c:	4630      	mov	r0, r6
 800979e:	6033      	str	r3, [r6, #0]
 80097a0:	f000 f8a4 	bl	80098ec <__malloc_unlock>
 80097a4:	e7e3      	b.n	800976e <_malloc_r+0x1e>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	1b5b      	subs	r3, r3, r5
 80097aa:	d417      	bmi.n	80097dc <_malloc_r+0x8c>
 80097ac:	2b0b      	cmp	r3, #11
 80097ae:	d903      	bls.n	80097b8 <_malloc_r+0x68>
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	441c      	add	r4, r3
 80097b4:	6025      	str	r5, [r4, #0]
 80097b6:	e004      	b.n	80097c2 <_malloc_r+0x72>
 80097b8:	6863      	ldr	r3, [r4, #4]
 80097ba:	42a2      	cmp	r2, r4
 80097bc:	bf0c      	ite	eq
 80097be:	600b      	streq	r3, [r1, #0]
 80097c0:	6053      	strne	r3, [r2, #4]
 80097c2:	4630      	mov	r0, r6
 80097c4:	f000 f892 	bl	80098ec <__malloc_unlock>
 80097c8:	f104 000b 	add.w	r0, r4, #11
 80097cc:	1d23      	adds	r3, r4, #4
 80097ce:	f020 0007 	bic.w	r0, r0, #7
 80097d2:	1ac2      	subs	r2, r0, r3
 80097d4:	d0cc      	beq.n	8009770 <_malloc_r+0x20>
 80097d6:	1a1b      	subs	r3, r3, r0
 80097d8:	50a3      	str	r3, [r4, r2]
 80097da:	e7c9      	b.n	8009770 <_malloc_r+0x20>
 80097dc:	4622      	mov	r2, r4
 80097de:	6864      	ldr	r4, [r4, #4]
 80097e0:	e7cc      	b.n	800977c <_malloc_r+0x2c>
 80097e2:	1cc4      	adds	r4, r0, #3
 80097e4:	f024 0403 	bic.w	r4, r4, #3
 80097e8:	42a0      	cmp	r0, r4
 80097ea:	d0e3      	beq.n	80097b4 <_malloc_r+0x64>
 80097ec:	1a21      	subs	r1, r4, r0
 80097ee:	4630      	mov	r0, r6
 80097f0:	f000 f80e 	bl	8009810 <_sbrk_r>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d1dd      	bne.n	80097b4 <_malloc_r+0x64>
 80097f8:	e7cf      	b.n	800979a <_malloc_r+0x4a>
 80097fa:	bf00      	nop
 80097fc:	200002a4 	.word	0x200002a4
 8009800:	200002a8 	.word	0x200002a8

08009804 <nan>:
 8009804:	2000      	movs	r0, #0
 8009806:	4901      	ldr	r1, [pc, #4]	; (800980c <nan+0x8>)
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	7ff80000 	.word	0x7ff80000

08009810 <_sbrk_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	2300      	movs	r3, #0
 8009814:	4d05      	ldr	r5, [pc, #20]	; (800982c <_sbrk_r+0x1c>)
 8009816:	4604      	mov	r4, r0
 8009818:	4608      	mov	r0, r1
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	f7fa fd50 	bl	80042c0 <_sbrk>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_sbrk_r+0x1a>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_sbrk_r+0x1a>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20000424 	.word	0x20000424

08009830 <strncmp>:
 8009830:	b510      	push	{r4, lr}
 8009832:	b16a      	cbz	r2, 8009850 <strncmp+0x20>
 8009834:	3901      	subs	r1, #1
 8009836:	1884      	adds	r4, r0, r2
 8009838:	f810 3b01 	ldrb.w	r3, [r0], #1
 800983c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009840:	4293      	cmp	r3, r2
 8009842:	d103      	bne.n	800984c <strncmp+0x1c>
 8009844:	42a0      	cmp	r0, r4
 8009846:	d001      	beq.n	800984c <strncmp+0x1c>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1f5      	bne.n	8009838 <strncmp+0x8>
 800984c:	1a98      	subs	r0, r3, r2
 800984e:	bd10      	pop	{r4, pc}
 8009850:	4610      	mov	r0, r2
 8009852:	e7fc      	b.n	800984e <strncmp+0x1e>

08009854 <__ascii_wctomb>:
 8009854:	4603      	mov	r3, r0
 8009856:	4608      	mov	r0, r1
 8009858:	b141      	cbz	r1, 800986c <__ascii_wctomb+0x18>
 800985a:	2aff      	cmp	r2, #255	; 0xff
 800985c:	d904      	bls.n	8009868 <__ascii_wctomb+0x14>
 800985e:	228a      	movs	r2, #138	; 0x8a
 8009860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009864:	601a      	str	r2, [r3, #0]
 8009866:	4770      	bx	lr
 8009868:	2001      	movs	r0, #1
 800986a:	700a      	strb	r2, [r1, #0]
 800986c:	4770      	bx	lr
	...

08009870 <__assert_func>:
 8009870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009872:	4614      	mov	r4, r2
 8009874:	461a      	mov	r2, r3
 8009876:	4b09      	ldr	r3, [pc, #36]	; (800989c <__assert_func+0x2c>)
 8009878:	4605      	mov	r5, r0
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68d8      	ldr	r0, [r3, #12]
 800987e:	b14c      	cbz	r4, 8009894 <__assert_func+0x24>
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <__assert_func+0x30>)
 8009882:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009886:	9100      	str	r1, [sp, #0]
 8009888:	462b      	mov	r3, r5
 800988a:	4906      	ldr	r1, [pc, #24]	; (80098a4 <__assert_func+0x34>)
 800988c:	f000 f80e 	bl	80098ac <fiprintf>
 8009890:	f000 fc2c 	bl	800a0ec <abort>
 8009894:	4b04      	ldr	r3, [pc, #16]	; (80098a8 <__assert_func+0x38>)
 8009896:	461c      	mov	r4, r3
 8009898:	e7f3      	b.n	8009882 <__assert_func+0x12>
 800989a:	bf00      	nop
 800989c:	200000ac 	.word	0x200000ac
 80098a0:	0800c19c 	.word	0x0800c19c
 80098a4:	0800c1a9 	.word	0x0800c1a9
 80098a8:	0800c1d7 	.word	0x0800c1d7

080098ac <fiprintf>:
 80098ac:	b40e      	push	{r1, r2, r3}
 80098ae:	b503      	push	{r0, r1, lr}
 80098b0:	4601      	mov	r1, r0
 80098b2:	ab03      	add	r3, sp, #12
 80098b4:	4805      	ldr	r0, [pc, #20]	; (80098cc <fiprintf+0x20>)
 80098b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	f000 f88f 	bl	80099e0 <_vfiprintf_r>
 80098c2:	b002      	add	sp, #8
 80098c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098c8:	b003      	add	sp, #12
 80098ca:	4770      	bx	lr
 80098cc:	200000ac 	.word	0x200000ac

080098d0 <malloc>:
 80098d0:	4b02      	ldr	r3, [pc, #8]	; (80098dc <malloc+0xc>)
 80098d2:	4601      	mov	r1, r0
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	f7ff bf3b 	b.w	8009750 <_malloc_r>
 80098da:	bf00      	nop
 80098dc:	200000ac 	.word	0x200000ac

080098e0 <__malloc_lock>:
 80098e0:	4801      	ldr	r0, [pc, #4]	; (80098e8 <__malloc_lock+0x8>)
 80098e2:	f000 bdc3 	b.w	800a46c <__retarget_lock_acquire_recursive>
 80098e6:	bf00      	nop
 80098e8:	2000042c 	.word	0x2000042c

080098ec <__malloc_unlock>:
 80098ec:	4801      	ldr	r0, [pc, #4]	; (80098f4 <__malloc_unlock+0x8>)
 80098ee:	f000 bdbe 	b.w	800a46e <__retarget_lock_release_recursive>
 80098f2:	bf00      	nop
 80098f4:	2000042c 	.word	0x2000042c

080098f8 <_free_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4605      	mov	r5, r0
 80098fc:	2900      	cmp	r1, #0
 80098fe:	d043      	beq.n	8009988 <_free_r+0x90>
 8009900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009904:	1f0c      	subs	r4, r1, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfb8      	it	lt
 800990a:	18e4      	addlt	r4, r4, r3
 800990c:	f7ff ffe8 	bl	80098e0 <__malloc_lock>
 8009910:	4a1e      	ldr	r2, [pc, #120]	; (800998c <_free_r+0x94>)
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	4610      	mov	r0, r2
 8009916:	b933      	cbnz	r3, 8009926 <_free_r+0x2e>
 8009918:	6063      	str	r3, [r4, #4]
 800991a:	6014      	str	r4, [r2, #0]
 800991c:	4628      	mov	r0, r5
 800991e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009922:	f7ff bfe3 	b.w	80098ec <__malloc_unlock>
 8009926:	42a3      	cmp	r3, r4
 8009928:	d90a      	bls.n	8009940 <_free_r+0x48>
 800992a:	6821      	ldr	r1, [r4, #0]
 800992c:	1862      	adds	r2, r4, r1
 800992e:	4293      	cmp	r3, r2
 8009930:	bf01      	itttt	eq
 8009932:	681a      	ldreq	r2, [r3, #0]
 8009934:	685b      	ldreq	r3, [r3, #4]
 8009936:	1852      	addeq	r2, r2, r1
 8009938:	6022      	streq	r2, [r4, #0]
 800993a:	6063      	str	r3, [r4, #4]
 800993c:	6004      	str	r4, [r0, #0]
 800993e:	e7ed      	b.n	800991c <_free_r+0x24>
 8009940:	461a      	mov	r2, r3
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	b10b      	cbz	r3, 800994a <_free_r+0x52>
 8009946:	42a3      	cmp	r3, r4
 8009948:	d9fa      	bls.n	8009940 <_free_r+0x48>
 800994a:	6811      	ldr	r1, [r2, #0]
 800994c:	1850      	adds	r0, r2, r1
 800994e:	42a0      	cmp	r0, r4
 8009950:	d10b      	bne.n	800996a <_free_r+0x72>
 8009952:	6820      	ldr	r0, [r4, #0]
 8009954:	4401      	add	r1, r0
 8009956:	1850      	adds	r0, r2, r1
 8009958:	4283      	cmp	r3, r0
 800995a:	6011      	str	r1, [r2, #0]
 800995c:	d1de      	bne.n	800991c <_free_r+0x24>
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	4401      	add	r1, r0
 8009964:	6011      	str	r1, [r2, #0]
 8009966:	6053      	str	r3, [r2, #4]
 8009968:	e7d8      	b.n	800991c <_free_r+0x24>
 800996a:	d902      	bls.n	8009972 <_free_r+0x7a>
 800996c:	230c      	movs	r3, #12
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	e7d4      	b.n	800991c <_free_r+0x24>
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	1821      	adds	r1, r4, r0
 8009976:	428b      	cmp	r3, r1
 8009978:	bf01      	itttt	eq
 800997a:	6819      	ldreq	r1, [r3, #0]
 800997c:	685b      	ldreq	r3, [r3, #4]
 800997e:	1809      	addeq	r1, r1, r0
 8009980:	6021      	streq	r1, [r4, #0]
 8009982:	6063      	str	r3, [r4, #4]
 8009984:	6054      	str	r4, [r2, #4]
 8009986:	e7c9      	b.n	800991c <_free_r+0x24>
 8009988:	bd38      	pop	{r3, r4, r5, pc}
 800998a:	bf00      	nop
 800998c:	200002a4 	.word	0x200002a4

08009990 <__sfputc_r>:
 8009990:	6893      	ldr	r3, [r2, #8]
 8009992:	b410      	push	{r4}
 8009994:	3b01      	subs	r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	6093      	str	r3, [r2, #8]
 800999a:	da07      	bge.n	80099ac <__sfputc_r+0x1c>
 800999c:	6994      	ldr	r4, [r2, #24]
 800999e:	42a3      	cmp	r3, r4
 80099a0:	db01      	blt.n	80099a6 <__sfputc_r+0x16>
 80099a2:	290a      	cmp	r1, #10
 80099a4:	d102      	bne.n	80099ac <__sfputc_r+0x1c>
 80099a6:	bc10      	pop	{r4}
 80099a8:	f000 bae0 	b.w	8009f6c <__swbuf_r>
 80099ac:	6813      	ldr	r3, [r2, #0]
 80099ae:	1c58      	adds	r0, r3, #1
 80099b0:	6010      	str	r0, [r2, #0]
 80099b2:	7019      	strb	r1, [r3, #0]
 80099b4:	4608      	mov	r0, r1
 80099b6:	bc10      	pop	{r4}
 80099b8:	4770      	bx	lr

080099ba <__sfputs_r>:
 80099ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099bc:	4606      	mov	r6, r0
 80099be:	460f      	mov	r7, r1
 80099c0:	4614      	mov	r4, r2
 80099c2:	18d5      	adds	r5, r2, r3
 80099c4:	42ac      	cmp	r4, r5
 80099c6:	d101      	bne.n	80099cc <__sfputs_r+0x12>
 80099c8:	2000      	movs	r0, #0
 80099ca:	e007      	b.n	80099dc <__sfputs_r+0x22>
 80099cc:	463a      	mov	r2, r7
 80099ce:	4630      	mov	r0, r6
 80099d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099d4:	f7ff ffdc 	bl	8009990 <__sfputc_r>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d1f3      	bne.n	80099c4 <__sfputs_r+0xa>
 80099dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099e0 <_vfiprintf_r>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	460d      	mov	r5, r1
 80099e6:	4614      	mov	r4, r2
 80099e8:	4698      	mov	r8, r3
 80099ea:	4606      	mov	r6, r0
 80099ec:	b09d      	sub	sp, #116	; 0x74
 80099ee:	b118      	cbz	r0, 80099f8 <_vfiprintf_r+0x18>
 80099f0:	6983      	ldr	r3, [r0, #24]
 80099f2:	b90b      	cbnz	r3, 80099f8 <_vfiprintf_r+0x18>
 80099f4:	f000 fc9c 	bl	800a330 <__sinit>
 80099f8:	4b89      	ldr	r3, [pc, #548]	; (8009c20 <_vfiprintf_r+0x240>)
 80099fa:	429d      	cmp	r5, r3
 80099fc:	d11b      	bne.n	8009a36 <_vfiprintf_r+0x56>
 80099fe:	6875      	ldr	r5, [r6, #4]
 8009a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a02:	07d9      	lsls	r1, r3, #31
 8009a04:	d405      	bmi.n	8009a12 <_vfiprintf_r+0x32>
 8009a06:	89ab      	ldrh	r3, [r5, #12]
 8009a08:	059a      	lsls	r2, r3, #22
 8009a0a:	d402      	bmi.n	8009a12 <_vfiprintf_r+0x32>
 8009a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a0e:	f000 fd2d 	bl	800a46c <__retarget_lock_acquire_recursive>
 8009a12:	89ab      	ldrh	r3, [r5, #12]
 8009a14:	071b      	lsls	r3, r3, #28
 8009a16:	d501      	bpl.n	8009a1c <_vfiprintf_r+0x3c>
 8009a18:	692b      	ldr	r3, [r5, #16]
 8009a1a:	b9eb      	cbnz	r3, 8009a58 <_vfiprintf_r+0x78>
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f000 faf6 	bl	800a010 <__swsetup_r>
 8009a24:	b1c0      	cbz	r0, 8009a58 <_vfiprintf_r+0x78>
 8009a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a28:	07dc      	lsls	r4, r3, #31
 8009a2a:	d50e      	bpl.n	8009a4a <_vfiprintf_r+0x6a>
 8009a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a30:	b01d      	add	sp, #116	; 0x74
 8009a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a36:	4b7b      	ldr	r3, [pc, #492]	; (8009c24 <_vfiprintf_r+0x244>)
 8009a38:	429d      	cmp	r5, r3
 8009a3a:	d101      	bne.n	8009a40 <_vfiprintf_r+0x60>
 8009a3c:	68b5      	ldr	r5, [r6, #8]
 8009a3e:	e7df      	b.n	8009a00 <_vfiprintf_r+0x20>
 8009a40:	4b79      	ldr	r3, [pc, #484]	; (8009c28 <_vfiprintf_r+0x248>)
 8009a42:	429d      	cmp	r5, r3
 8009a44:	bf08      	it	eq
 8009a46:	68f5      	ldreq	r5, [r6, #12]
 8009a48:	e7da      	b.n	8009a00 <_vfiprintf_r+0x20>
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	0598      	lsls	r0, r3, #22
 8009a4e:	d4ed      	bmi.n	8009a2c <_vfiprintf_r+0x4c>
 8009a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a52:	f000 fd0c 	bl	800a46e <__retarget_lock_release_recursive>
 8009a56:	e7e9      	b.n	8009a2c <_vfiprintf_r+0x4c>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a5c:	2320      	movs	r3, #32
 8009a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a62:	2330      	movs	r3, #48	; 0x30
 8009a64:	f04f 0901 	mov.w	r9, #1
 8009a68:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a6c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009c2c <_vfiprintf_r+0x24c>
 8009a70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a74:	4623      	mov	r3, r4
 8009a76:	469a      	mov	sl, r3
 8009a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a7c:	b10a      	cbz	r2, 8009a82 <_vfiprintf_r+0xa2>
 8009a7e:	2a25      	cmp	r2, #37	; 0x25
 8009a80:	d1f9      	bne.n	8009a76 <_vfiprintf_r+0x96>
 8009a82:	ebba 0b04 	subs.w	fp, sl, r4
 8009a86:	d00b      	beq.n	8009aa0 <_vfiprintf_r+0xc0>
 8009a88:	465b      	mov	r3, fp
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff ff93 	bl	80099ba <__sfputs_r>
 8009a94:	3001      	adds	r0, #1
 8009a96:	f000 80aa 	beq.w	8009bee <_vfiprintf_r+0x20e>
 8009a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a9c:	445a      	add	r2, fp
 8009a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8009aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 80a2 	beq.w	8009bee <_vfiprintf_r+0x20e>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ab4:	f10a 0a01 	add.w	sl, sl, #1
 8009ab8:	9304      	str	r3, [sp, #16]
 8009aba:	9307      	str	r3, [sp, #28]
 8009abc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ac0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ac2:	4654      	mov	r4, sl
 8009ac4:	2205      	movs	r2, #5
 8009ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aca:	4858      	ldr	r0, [pc, #352]	; (8009c2c <_vfiprintf_r+0x24c>)
 8009acc:	f000 fd34 	bl	800a538 <memchr>
 8009ad0:	9a04      	ldr	r2, [sp, #16]
 8009ad2:	b9d8      	cbnz	r0, 8009b0c <_vfiprintf_r+0x12c>
 8009ad4:	06d1      	lsls	r1, r2, #27
 8009ad6:	bf44      	itt	mi
 8009ad8:	2320      	movmi	r3, #32
 8009ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ade:	0713      	lsls	r3, r2, #28
 8009ae0:	bf44      	itt	mi
 8009ae2:	232b      	movmi	r3, #43	; 0x2b
 8009ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8009aec:	2b2a      	cmp	r3, #42	; 0x2a
 8009aee:	d015      	beq.n	8009b1c <_vfiprintf_r+0x13c>
 8009af0:	4654      	mov	r4, sl
 8009af2:	2000      	movs	r0, #0
 8009af4:	f04f 0c0a 	mov.w	ip, #10
 8009af8:	9a07      	ldr	r2, [sp, #28]
 8009afa:	4621      	mov	r1, r4
 8009afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b00:	3b30      	subs	r3, #48	; 0x30
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	d94e      	bls.n	8009ba4 <_vfiprintf_r+0x1c4>
 8009b06:	b1b0      	cbz	r0, 8009b36 <_vfiprintf_r+0x156>
 8009b08:	9207      	str	r2, [sp, #28]
 8009b0a:	e014      	b.n	8009b36 <_vfiprintf_r+0x156>
 8009b0c:	eba0 0308 	sub.w	r3, r0, r8
 8009b10:	fa09 f303 	lsl.w	r3, r9, r3
 8009b14:	4313      	orrs	r3, r2
 8009b16:	46a2      	mov	sl, r4
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	e7d2      	b.n	8009ac2 <_vfiprintf_r+0xe2>
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	1d19      	adds	r1, r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	9103      	str	r1, [sp, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfbb      	ittet	lt
 8009b28:	425b      	neglt	r3, r3
 8009b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b2e:	9307      	strge	r3, [sp, #28]
 8009b30:	9307      	strlt	r3, [sp, #28]
 8009b32:	bfb8      	it	lt
 8009b34:	9204      	strlt	r2, [sp, #16]
 8009b36:	7823      	ldrb	r3, [r4, #0]
 8009b38:	2b2e      	cmp	r3, #46	; 0x2e
 8009b3a:	d10c      	bne.n	8009b56 <_vfiprintf_r+0x176>
 8009b3c:	7863      	ldrb	r3, [r4, #1]
 8009b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b40:	d135      	bne.n	8009bae <_vfiprintf_r+0x1ce>
 8009b42:	9b03      	ldr	r3, [sp, #12]
 8009b44:	3402      	adds	r4, #2
 8009b46:	1d1a      	adds	r2, r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	9203      	str	r2, [sp, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	bfb8      	it	lt
 8009b50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b54:	9305      	str	r3, [sp, #20]
 8009b56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c3c <_vfiprintf_r+0x25c>
 8009b5a:	2203      	movs	r2, #3
 8009b5c:	4650      	mov	r0, sl
 8009b5e:	7821      	ldrb	r1, [r4, #0]
 8009b60:	f000 fcea 	bl	800a538 <memchr>
 8009b64:	b140      	cbz	r0, 8009b78 <_vfiprintf_r+0x198>
 8009b66:	2340      	movs	r3, #64	; 0x40
 8009b68:	eba0 000a 	sub.w	r0, r0, sl
 8009b6c:	fa03 f000 	lsl.w	r0, r3, r0
 8009b70:	9b04      	ldr	r3, [sp, #16]
 8009b72:	3401      	adds	r4, #1
 8009b74:	4303      	orrs	r3, r0
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b7c:	2206      	movs	r2, #6
 8009b7e:	482c      	ldr	r0, [pc, #176]	; (8009c30 <_vfiprintf_r+0x250>)
 8009b80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b84:	f000 fcd8 	bl	800a538 <memchr>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d03f      	beq.n	8009c0c <_vfiprintf_r+0x22c>
 8009b8c:	4b29      	ldr	r3, [pc, #164]	; (8009c34 <_vfiprintf_r+0x254>)
 8009b8e:	bb1b      	cbnz	r3, 8009bd8 <_vfiprintf_r+0x1f8>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	3307      	adds	r3, #7
 8009b94:	f023 0307 	bic.w	r3, r3, #7
 8009b98:	3308      	adds	r3, #8
 8009b9a:	9303      	str	r3, [sp, #12]
 8009b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9e:	443b      	add	r3, r7
 8009ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba2:	e767      	b.n	8009a74 <_vfiprintf_r+0x94>
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bac:	e7a5      	b.n	8009afa <_vfiprintf_r+0x11a>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f04f 0c0a 	mov.w	ip, #10
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	3401      	adds	r4, #1
 8009bb8:	9305      	str	r3, [sp, #20]
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bc0:	3a30      	subs	r2, #48	; 0x30
 8009bc2:	2a09      	cmp	r2, #9
 8009bc4:	d903      	bls.n	8009bce <_vfiprintf_r+0x1ee>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0c5      	beq.n	8009b56 <_vfiprintf_r+0x176>
 8009bca:	9105      	str	r1, [sp, #20]
 8009bcc:	e7c3      	b.n	8009b56 <_vfiprintf_r+0x176>
 8009bce:	4604      	mov	r4, r0
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bd6:	e7f0      	b.n	8009bba <_vfiprintf_r+0x1da>
 8009bd8:	ab03      	add	r3, sp, #12
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	462a      	mov	r2, r5
 8009bde:	4630      	mov	r0, r6
 8009be0:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <_vfiprintf_r+0x258>)
 8009be2:	a904      	add	r1, sp, #16
 8009be4:	f3af 8000 	nop.w
 8009be8:	4607      	mov	r7, r0
 8009bea:	1c78      	adds	r0, r7, #1
 8009bec:	d1d6      	bne.n	8009b9c <_vfiprintf_r+0x1bc>
 8009bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bf0:	07d9      	lsls	r1, r3, #31
 8009bf2:	d405      	bmi.n	8009c00 <_vfiprintf_r+0x220>
 8009bf4:	89ab      	ldrh	r3, [r5, #12]
 8009bf6:	059a      	lsls	r2, r3, #22
 8009bf8:	d402      	bmi.n	8009c00 <_vfiprintf_r+0x220>
 8009bfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bfc:	f000 fc37 	bl	800a46e <__retarget_lock_release_recursive>
 8009c00:	89ab      	ldrh	r3, [r5, #12]
 8009c02:	065b      	lsls	r3, r3, #25
 8009c04:	f53f af12 	bmi.w	8009a2c <_vfiprintf_r+0x4c>
 8009c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c0a:	e711      	b.n	8009a30 <_vfiprintf_r+0x50>
 8009c0c:	ab03      	add	r3, sp, #12
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	462a      	mov	r2, r5
 8009c12:	4630      	mov	r0, r6
 8009c14:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <_vfiprintf_r+0x258>)
 8009c16:	a904      	add	r1, sp, #16
 8009c18:	f000 f882 	bl	8009d20 <_printf_i>
 8009c1c:	e7e4      	b.n	8009be8 <_vfiprintf_r+0x208>
 8009c1e:	bf00      	nop
 8009c20:	0800c32c 	.word	0x0800c32c
 8009c24:	0800c34c 	.word	0x0800c34c
 8009c28:	0800c30c 	.word	0x0800c30c
 8009c2c:	0800c2d9 	.word	0x0800c2d9
 8009c30:	0800c2e3 	.word	0x0800c2e3
 8009c34:	00000000 	.word	0x00000000
 8009c38:	080099bb 	.word	0x080099bb
 8009c3c:	0800c2df 	.word	0x0800c2df

08009c40 <_printf_common>:
 8009c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c44:	4616      	mov	r6, r2
 8009c46:	4699      	mov	r9, r3
 8009c48:	688a      	ldr	r2, [r1, #8]
 8009c4a:	690b      	ldr	r3, [r1, #16]
 8009c4c:	4607      	mov	r7, r0
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	bfb8      	it	lt
 8009c52:	4613      	movlt	r3, r2
 8009c54:	6033      	str	r3, [r6, #0]
 8009c56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c60:	b10a      	cbz	r2, 8009c66 <_printf_common+0x26>
 8009c62:	3301      	adds	r3, #1
 8009c64:	6033      	str	r3, [r6, #0]
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	0699      	lsls	r1, r3, #26
 8009c6a:	bf42      	ittt	mi
 8009c6c:	6833      	ldrmi	r3, [r6, #0]
 8009c6e:	3302      	addmi	r3, #2
 8009c70:	6033      	strmi	r3, [r6, #0]
 8009c72:	6825      	ldr	r5, [r4, #0]
 8009c74:	f015 0506 	ands.w	r5, r5, #6
 8009c78:	d106      	bne.n	8009c88 <_printf_common+0x48>
 8009c7a:	f104 0a19 	add.w	sl, r4, #25
 8009c7e:	68e3      	ldr	r3, [r4, #12]
 8009c80:	6832      	ldr	r2, [r6, #0]
 8009c82:	1a9b      	subs	r3, r3, r2
 8009c84:	42ab      	cmp	r3, r5
 8009c86:	dc28      	bgt.n	8009cda <_printf_common+0x9a>
 8009c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c8c:	1e13      	subs	r3, r2, #0
 8009c8e:	6822      	ldr	r2, [r4, #0]
 8009c90:	bf18      	it	ne
 8009c92:	2301      	movne	r3, #1
 8009c94:	0692      	lsls	r2, r2, #26
 8009c96:	d42d      	bmi.n	8009cf4 <_printf_common+0xb4>
 8009c98:	4649      	mov	r1, r9
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ca0:	47c0      	blx	r8
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d020      	beq.n	8009ce8 <_printf_common+0xa8>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	68e5      	ldr	r5, [r4, #12]
 8009caa:	f003 0306 	and.w	r3, r3, #6
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	bf18      	it	ne
 8009cb2:	2500      	movne	r5, #0
 8009cb4:	6832      	ldr	r2, [r6, #0]
 8009cb6:	f04f 0600 	mov.w	r6, #0
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	bf08      	it	eq
 8009cbe:	1aad      	subeq	r5, r5, r2
 8009cc0:	6922      	ldr	r2, [r4, #16]
 8009cc2:	bf08      	it	eq
 8009cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	bfc4      	itt	gt
 8009ccc:	1a9b      	subgt	r3, r3, r2
 8009cce:	18ed      	addgt	r5, r5, r3
 8009cd0:	341a      	adds	r4, #26
 8009cd2:	42b5      	cmp	r5, r6
 8009cd4:	d11a      	bne.n	8009d0c <_printf_common+0xcc>
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	e008      	b.n	8009cec <_printf_common+0xac>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4652      	mov	r2, sl
 8009cde:	4649      	mov	r1, r9
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	47c0      	blx	r8
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d103      	bne.n	8009cf0 <_printf_common+0xb0>
 8009ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf0:	3501      	adds	r5, #1
 8009cf2:	e7c4      	b.n	8009c7e <_printf_common+0x3e>
 8009cf4:	2030      	movs	r0, #48	; 0x30
 8009cf6:	18e1      	adds	r1, r4, r3
 8009cf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d02:	4422      	add	r2, r4
 8009d04:	3302      	adds	r3, #2
 8009d06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d0a:	e7c5      	b.n	8009c98 <_printf_common+0x58>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	4622      	mov	r2, r4
 8009d10:	4649      	mov	r1, r9
 8009d12:	4638      	mov	r0, r7
 8009d14:	47c0      	blx	r8
 8009d16:	3001      	adds	r0, #1
 8009d18:	d0e6      	beq.n	8009ce8 <_printf_common+0xa8>
 8009d1a:	3601      	adds	r6, #1
 8009d1c:	e7d9      	b.n	8009cd2 <_printf_common+0x92>
	...

08009d20 <_printf_i>:
 8009d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d24:	460c      	mov	r4, r1
 8009d26:	7e27      	ldrb	r7, [r4, #24]
 8009d28:	4691      	mov	r9, r2
 8009d2a:	2f78      	cmp	r7, #120	; 0x78
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	469a      	mov	sl, r3
 8009d30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d36:	d807      	bhi.n	8009d48 <_printf_i+0x28>
 8009d38:	2f62      	cmp	r7, #98	; 0x62
 8009d3a:	d80a      	bhi.n	8009d52 <_printf_i+0x32>
 8009d3c:	2f00      	cmp	r7, #0
 8009d3e:	f000 80d9 	beq.w	8009ef4 <_printf_i+0x1d4>
 8009d42:	2f58      	cmp	r7, #88	; 0x58
 8009d44:	f000 80a4 	beq.w	8009e90 <_printf_i+0x170>
 8009d48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d50:	e03a      	b.n	8009dc8 <_printf_i+0xa8>
 8009d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d56:	2b15      	cmp	r3, #21
 8009d58:	d8f6      	bhi.n	8009d48 <_printf_i+0x28>
 8009d5a:	a001      	add	r0, pc, #4	; (adr r0, 8009d60 <_printf_i+0x40>)
 8009d5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d60:	08009db9 	.word	0x08009db9
 8009d64:	08009dcd 	.word	0x08009dcd
 8009d68:	08009d49 	.word	0x08009d49
 8009d6c:	08009d49 	.word	0x08009d49
 8009d70:	08009d49 	.word	0x08009d49
 8009d74:	08009d49 	.word	0x08009d49
 8009d78:	08009dcd 	.word	0x08009dcd
 8009d7c:	08009d49 	.word	0x08009d49
 8009d80:	08009d49 	.word	0x08009d49
 8009d84:	08009d49 	.word	0x08009d49
 8009d88:	08009d49 	.word	0x08009d49
 8009d8c:	08009edb 	.word	0x08009edb
 8009d90:	08009dfd 	.word	0x08009dfd
 8009d94:	08009ebd 	.word	0x08009ebd
 8009d98:	08009d49 	.word	0x08009d49
 8009d9c:	08009d49 	.word	0x08009d49
 8009da0:	08009efd 	.word	0x08009efd
 8009da4:	08009d49 	.word	0x08009d49
 8009da8:	08009dfd 	.word	0x08009dfd
 8009dac:	08009d49 	.word	0x08009d49
 8009db0:	08009d49 	.word	0x08009d49
 8009db4:	08009ec5 	.word	0x08009ec5
 8009db8:	680b      	ldr	r3, [r1, #0]
 8009dba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dbe:	1d1a      	adds	r2, r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	600a      	str	r2, [r1, #0]
 8009dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e0a4      	b.n	8009f16 <_printf_i+0x1f6>
 8009dcc:	6825      	ldr	r5, [r4, #0]
 8009dce:	6808      	ldr	r0, [r1, #0]
 8009dd0:	062e      	lsls	r6, r5, #24
 8009dd2:	f100 0304 	add.w	r3, r0, #4
 8009dd6:	d50a      	bpl.n	8009dee <_printf_i+0xce>
 8009dd8:	6805      	ldr	r5, [r0, #0]
 8009dda:	600b      	str	r3, [r1, #0]
 8009ddc:	2d00      	cmp	r5, #0
 8009dde:	da03      	bge.n	8009de8 <_printf_i+0xc8>
 8009de0:	232d      	movs	r3, #45	; 0x2d
 8009de2:	426d      	negs	r5, r5
 8009de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009de8:	230a      	movs	r3, #10
 8009dea:	485e      	ldr	r0, [pc, #376]	; (8009f64 <_printf_i+0x244>)
 8009dec:	e019      	b.n	8009e22 <_printf_i+0x102>
 8009dee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009df2:	6805      	ldr	r5, [r0, #0]
 8009df4:	600b      	str	r3, [r1, #0]
 8009df6:	bf18      	it	ne
 8009df8:	b22d      	sxthne	r5, r5
 8009dfa:	e7ef      	b.n	8009ddc <_printf_i+0xbc>
 8009dfc:	680b      	ldr	r3, [r1, #0]
 8009dfe:	6825      	ldr	r5, [r4, #0]
 8009e00:	1d18      	adds	r0, r3, #4
 8009e02:	6008      	str	r0, [r1, #0]
 8009e04:	0628      	lsls	r0, r5, #24
 8009e06:	d501      	bpl.n	8009e0c <_printf_i+0xec>
 8009e08:	681d      	ldr	r5, [r3, #0]
 8009e0a:	e002      	b.n	8009e12 <_printf_i+0xf2>
 8009e0c:	0669      	lsls	r1, r5, #25
 8009e0e:	d5fb      	bpl.n	8009e08 <_printf_i+0xe8>
 8009e10:	881d      	ldrh	r5, [r3, #0]
 8009e12:	2f6f      	cmp	r7, #111	; 0x6f
 8009e14:	bf0c      	ite	eq
 8009e16:	2308      	moveq	r3, #8
 8009e18:	230a      	movne	r3, #10
 8009e1a:	4852      	ldr	r0, [pc, #328]	; (8009f64 <_printf_i+0x244>)
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e22:	6866      	ldr	r6, [r4, #4]
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	bfa8      	it	ge
 8009e28:	6821      	ldrge	r1, [r4, #0]
 8009e2a:	60a6      	str	r6, [r4, #8]
 8009e2c:	bfa4      	itt	ge
 8009e2e:	f021 0104 	bicge.w	r1, r1, #4
 8009e32:	6021      	strge	r1, [r4, #0]
 8009e34:	b90d      	cbnz	r5, 8009e3a <_printf_i+0x11a>
 8009e36:	2e00      	cmp	r6, #0
 8009e38:	d04d      	beq.n	8009ed6 <_printf_i+0x1b6>
 8009e3a:	4616      	mov	r6, r2
 8009e3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e40:	fb03 5711 	mls	r7, r3, r1, r5
 8009e44:	5dc7      	ldrb	r7, [r0, r7]
 8009e46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e4a:	462f      	mov	r7, r5
 8009e4c:	42bb      	cmp	r3, r7
 8009e4e:	460d      	mov	r5, r1
 8009e50:	d9f4      	bls.n	8009e3c <_printf_i+0x11c>
 8009e52:	2b08      	cmp	r3, #8
 8009e54:	d10b      	bne.n	8009e6e <_printf_i+0x14e>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	07df      	lsls	r7, r3, #31
 8009e5a:	d508      	bpl.n	8009e6e <_printf_i+0x14e>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	6861      	ldr	r1, [r4, #4]
 8009e60:	4299      	cmp	r1, r3
 8009e62:	bfde      	ittt	le
 8009e64:	2330      	movle	r3, #48	; 0x30
 8009e66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e6a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009e6e:	1b92      	subs	r2, r2, r6
 8009e70:	6122      	str	r2, [r4, #16]
 8009e72:	464b      	mov	r3, r9
 8009e74:	4621      	mov	r1, r4
 8009e76:	4640      	mov	r0, r8
 8009e78:	f8cd a000 	str.w	sl, [sp]
 8009e7c:	aa03      	add	r2, sp, #12
 8009e7e:	f7ff fedf 	bl	8009c40 <_printf_common>
 8009e82:	3001      	adds	r0, #1
 8009e84:	d14c      	bne.n	8009f20 <_printf_i+0x200>
 8009e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e8a:	b004      	add	sp, #16
 8009e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e90:	4834      	ldr	r0, [pc, #208]	; (8009f64 <_printf_i+0x244>)
 8009e92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e96:	680e      	ldr	r6, [r1, #0]
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e9e:	061f      	lsls	r7, r3, #24
 8009ea0:	600e      	str	r6, [r1, #0]
 8009ea2:	d514      	bpl.n	8009ece <_printf_i+0x1ae>
 8009ea4:	07d9      	lsls	r1, r3, #31
 8009ea6:	bf44      	itt	mi
 8009ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8009eac:	6023      	strmi	r3, [r4, #0]
 8009eae:	b91d      	cbnz	r5, 8009eb8 <_printf_i+0x198>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	f023 0320 	bic.w	r3, r3, #32
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	2310      	movs	r3, #16
 8009eba:	e7af      	b.n	8009e1c <_printf_i+0xfc>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	f043 0320 	orr.w	r3, r3, #32
 8009ec2:	6023      	str	r3, [r4, #0]
 8009ec4:	2378      	movs	r3, #120	; 0x78
 8009ec6:	4828      	ldr	r0, [pc, #160]	; (8009f68 <_printf_i+0x248>)
 8009ec8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ecc:	e7e3      	b.n	8009e96 <_printf_i+0x176>
 8009ece:	065e      	lsls	r6, r3, #25
 8009ed0:	bf48      	it	mi
 8009ed2:	b2ad      	uxthmi	r5, r5
 8009ed4:	e7e6      	b.n	8009ea4 <_printf_i+0x184>
 8009ed6:	4616      	mov	r6, r2
 8009ed8:	e7bb      	b.n	8009e52 <_printf_i+0x132>
 8009eda:	680b      	ldr	r3, [r1, #0]
 8009edc:	6826      	ldr	r6, [r4, #0]
 8009ede:	1d1d      	adds	r5, r3, #4
 8009ee0:	6960      	ldr	r0, [r4, #20]
 8009ee2:	600d      	str	r5, [r1, #0]
 8009ee4:	0635      	lsls	r5, r6, #24
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	d501      	bpl.n	8009eee <_printf_i+0x1ce>
 8009eea:	6018      	str	r0, [r3, #0]
 8009eec:	e002      	b.n	8009ef4 <_printf_i+0x1d4>
 8009eee:	0671      	lsls	r1, r6, #25
 8009ef0:	d5fb      	bpl.n	8009eea <_printf_i+0x1ca>
 8009ef2:	8018      	strh	r0, [r3, #0]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4616      	mov	r6, r2
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	e7ba      	b.n	8009e72 <_printf_i+0x152>
 8009efc:	680b      	ldr	r3, [r1, #0]
 8009efe:	1d1a      	adds	r2, r3, #4
 8009f00:	600a      	str	r2, [r1, #0]
 8009f02:	681e      	ldr	r6, [r3, #0]
 8009f04:	2100      	movs	r1, #0
 8009f06:	4630      	mov	r0, r6
 8009f08:	6862      	ldr	r2, [r4, #4]
 8009f0a:	f000 fb15 	bl	800a538 <memchr>
 8009f0e:	b108      	cbz	r0, 8009f14 <_printf_i+0x1f4>
 8009f10:	1b80      	subs	r0, r0, r6
 8009f12:	6060      	str	r0, [r4, #4]
 8009f14:	6863      	ldr	r3, [r4, #4]
 8009f16:	6123      	str	r3, [r4, #16]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f1e:	e7a8      	b.n	8009e72 <_printf_i+0x152>
 8009f20:	4632      	mov	r2, r6
 8009f22:	4649      	mov	r1, r9
 8009f24:	4640      	mov	r0, r8
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	47d0      	blx	sl
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d0ab      	beq.n	8009e86 <_printf_i+0x166>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	079b      	lsls	r3, r3, #30
 8009f32:	d413      	bmi.n	8009f5c <_printf_i+0x23c>
 8009f34:	68e0      	ldr	r0, [r4, #12]
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	4298      	cmp	r0, r3
 8009f3a:	bfb8      	it	lt
 8009f3c:	4618      	movlt	r0, r3
 8009f3e:	e7a4      	b.n	8009e8a <_printf_i+0x16a>
 8009f40:	2301      	movs	r3, #1
 8009f42:	4632      	mov	r2, r6
 8009f44:	4649      	mov	r1, r9
 8009f46:	4640      	mov	r0, r8
 8009f48:	47d0      	blx	sl
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d09b      	beq.n	8009e86 <_printf_i+0x166>
 8009f4e:	3501      	adds	r5, #1
 8009f50:	68e3      	ldr	r3, [r4, #12]
 8009f52:	9903      	ldr	r1, [sp, #12]
 8009f54:	1a5b      	subs	r3, r3, r1
 8009f56:	42ab      	cmp	r3, r5
 8009f58:	dcf2      	bgt.n	8009f40 <_printf_i+0x220>
 8009f5a:	e7eb      	b.n	8009f34 <_printf_i+0x214>
 8009f5c:	2500      	movs	r5, #0
 8009f5e:	f104 0619 	add.w	r6, r4, #25
 8009f62:	e7f5      	b.n	8009f50 <_printf_i+0x230>
 8009f64:	0800c2ea 	.word	0x0800c2ea
 8009f68:	0800c2fb 	.word	0x0800c2fb

08009f6c <__swbuf_r>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	460e      	mov	r6, r1
 8009f70:	4614      	mov	r4, r2
 8009f72:	4605      	mov	r5, r0
 8009f74:	b118      	cbz	r0, 8009f7e <__swbuf_r+0x12>
 8009f76:	6983      	ldr	r3, [r0, #24]
 8009f78:	b90b      	cbnz	r3, 8009f7e <__swbuf_r+0x12>
 8009f7a:	f000 f9d9 	bl	800a330 <__sinit>
 8009f7e:	4b21      	ldr	r3, [pc, #132]	; (800a004 <__swbuf_r+0x98>)
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d12b      	bne.n	8009fdc <__swbuf_r+0x70>
 8009f84:	686c      	ldr	r4, [r5, #4]
 8009f86:	69a3      	ldr	r3, [r4, #24]
 8009f88:	60a3      	str	r3, [r4, #8]
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	071a      	lsls	r2, r3, #28
 8009f8e:	d52f      	bpl.n	8009ff0 <__swbuf_r+0x84>
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	b36b      	cbz	r3, 8009ff0 <__swbuf_r+0x84>
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	6820      	ldr	r0, [r4, #0]
 8009f98:	b2f6      	uxtb	r6, r6
 8009f9a:	1ac0      	subs	r0, r0, r3
 8009f9c:	6963      	ldr	r3, [r4, #20]
 8009f9e:	4637      	mov	r7, r6
 8009fa0:	4283      	cmp	r3, r0
 8009fa2:	dc04      	bgt.n	8009fae <__swbuf_r+0x42>
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f000 f92e 	bl	800a208 <_fflush_r>
 8009fac:	bb30      	cbnz	r0, 8009ffc <__swbuf_r+0x90>
 8009fae:	68a3      	ldr	r3, [r4, #8]
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	60a3      	str	r3, [r4, #8]
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	6022      	str	r2, [r4, #0]
 8009fbc:	701e      	strb	r6, [r3, #0]
 8009fbe:	6963      	ldr	r3, [r4, #20]
 8009fc0:	4283      	cmp	r3, r0
 8009fc2:	d004      	beq.n	8009fce <__swbuf_r+0x62>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	07db      	lsls	r3, r3, #31
 8009fc8:	d506      	bpl.n	8009fd8 <__swbuf_r+0x6c>
 8009fca:	2e0a      	cmp	r6, #10
 8009fcc:	d104      	bne.n	8009fd8 <__swbuf_r+0x6c>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f000 f919 	bl	800a208 <_fflush_r>
 8009fd6:	b988      	cbnz	r0, 8009ffc <__swbuf_r+0x90>
 8009fd8:	4638      	mov	r0, r7
 8009fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <__swbuf_r+0x9c>)
 8009fde:	429c      	cmp	r4, r3
 8009fe0:	d101      	bne.n	8009fe6 <__swbuf_r+0x7a>
 8009fe2:	68ac      	ldr	r4, [r5, #8]
 8009fe4:	e7cf      	b.n	8009f86 <__swbuf_r+0x1a>
 8009fe6:	4b09      	ldr	r3, [pc, #36]	; (800a00c <__swbuf_r+0xa0>)
 8009fe8:	429c      	cmp	r4, r3
 8009fea:	bf08      	it	eq
 8009fec:	68ec      	ldreq	r4, [r5, #12]
 8009fee:	e7ca      	b.n	8009f86 <__swbuf_r+0x1a>
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 f80c 	bl	800a010 <__swsetup_r>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d0cb      	beq.n	8009f94 <__swbuf_r+0x28>
 8009ffc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a000:	e7ea      	b.n	8009fd8 <__swbuf_r+0x6c>
 800a002:	bf00      	nop
 800a004:	0800c32c 	.word	0x0800c32c
 800a008:	0800c34c 	.word	0x0800c34c
 800a00c:	0800c30c 	.word	0x0800c30c

0800a010 <__swsetup_r>:
 800a010:	4b32      	ldr	r3, [pc, #200]	; (800a0dc <__swsetup_r+0xcc>)
 800a012:	b570      	push	{r4, r5, r6, lr}
 800a014:	681d      	ldr	r5, [r3, #0]
 800a016:	4606      	mov	r6, r0
 800a018:	460c      	mov	r4, r1
 800a01a:	b125      	cbz	r5, 800a026 <__swsetup_r+0x16>
 800a01c:	69ab      	ldr	r3, [r5, #24]
 800a01e:	b913      	cbnz	r3, 800a026 <__swsetup_r+0x16>
 800a020:	4628      	mov	r0, r5
 800a022:	f000 f985 	bl	800a330 <__sinit>
 800a026:	4b2e      	ldr	r3, [pc, #184]	; (800a0e0 <__swsetup_r+0xd0>)
 800a028:	429c      	cmp	r4, r3
 800a02a:	d10f      	bne.n	800a04c <__swsetup_r+0x3c>
 800a02c:	686c      	ldr	r4, [r5, #4]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a034:	0719      	lsls	r1, r3, #28
 800a036:	d42c      	bmi.n	800a092 <__swsetup_r+0x82>
 800a038:	06dd      	lsls	r5, r3, #27
 800a03a:	d411      	bmi.n	800a060 <__swsetup_r+0x50>
 800a03c:	2309      	movs	r3, #9
 800a03e:	6033      	str	r3, [r6, #0]
 800a040:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	e03e      	b.n	800a0ca <__swsetup_r+0xba>
 800a04c:	4b25      	ldr	r3, [pc, #148]	; (800a0e4 <__swsetup_r+0xd4>)
 800a04e:	429c      	cmp	r4, r3
 800a050:	d101      	bne.n	800a056 <__swsetup_r+0x46>
 800a052:	68ac      	ldr	r4, [r5, #8]
 800a054:	e7eb      	b.n	800a02e <__swsetup_r+0x1e>
 800a056:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <__swsetup_r+0xd8>)
 800a058:	429c      	cmp	r4, r3
 800a05a:	bf08      	it	eq
 800a05c:	68ec      	ldreq	r4, [r5, #12]
 800a05e:	e7e6      	b.n	800a02e <__swsetup_r+0x1e>
 800a060:	0758      	lsls	r0, r3, #29
 800a062:	d512      	bpl.n	800a08a <__swsetup_r+0x7a>
 800a064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a066:	b141      	cbz	r1, 800a07a <__swsetup_r+0x6a>
 800a068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a06c:	4299      	cmp	r1, r3
 800a06e:	d002      	beq.n	800a076 <__swsetup_r+0x66>
 800a070:	4630      	mov	r0, r6
 800a072:	f7ff fc41 	bl	80098f8 <_free_r>
 800a076:	2300      	movs	r3, #0
 800a078:	6363      	str	r3, [r4, #52]	; 0x34
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	2300      	movs	r3, #0
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	6923      	ldr	r3, [r4, #16]
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	f043 0308 	orr.w	r3, r3, #8
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	6923      	ldr	r3, [r4, #16]
 800a094:	b94b      	cbnz	r3, 800a0aa <__swsetup_r+0x9a>
 800a096:	89a3      	ldrh	r3, [r4, #12]
 800a098:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a09c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a0:	d003      	beq.n	800a0aa <__swsetup_r+0x9a>
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f000 fa07 	bl	800a4b8 <__smakebuf_r>
 800a0aa:	89a0      	ldrh	r0, [r4, #12]
 800a0ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0b0:	f010 0301 	ands.w	r3, r0, #1
 800a0b4:	d00a      	beq.n	800a0cc <__swsetup_r+0xbc>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60a3      	str	r3, [r4, #8]
 800a0ba:	6963      	ldr	r3, [r4, #20]
 800a0bc:	425b      	negs	r3, r3
 800a0be:	61a3      	str	r3, [r4, #24]
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	b943      	cbnz	r3, 800a0d6 <__swsetup_r+0xc6>
 800a0c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0c8:	d1ba      	bne.n	800a040 <__swsetup_r+0x30>
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	0781      	lsls	r1, r0, #30
 800a0ce:	bf58      	it	pl
 800a0d0:	6963      	ldrpl	r3, [r4, #20]
 800a0d2:	60a3      	str	r3, [r4, #8]
 800a0d4:	e7f4      	b.n	800a0c0 <__swsetup_r+0xb0>
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	e7f7      	b.n	800a0ca <__swsetup_r+0xba>
 800a0da:	bf00      	nop
 800a0dc:	200000ac 	.word	0x200000ac
 800a0e0:	0800c32c 	.word	0x0800c32c
 800a0e4:	0800c34c 	.word	0x0800c34c
 800a0e8:	0800c30c 	.word	0x0800c30c

0800a0ec <abort>:
 800a0ec:	2006      	movs	r0, #6
 800a0ee:	b508      	push	{r3, lr}
 800a0f0:	f000 fa58 	bl	800a5a4 <raise>
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	f7fa f870 	bl	80041da <_exit>
	...

0800a0fc <__sflush_r>:
 800a0fc:	898a      	ldrh	r2, [r1, #12]
 800a0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a102:	4605      	mov	r5, r0
 800a104:	0710      	lsls	r0, r2, #28
 800a106:	460c      	mov	r4, r1
 800a108:	d458      	bmi.n	800a1bc <__sflush_r+0xc0>
 800a10a:	684b      	ldr	r3, [r1, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	dc05      	bgt.n	800a11c <__sflush_r+0x20>
 800a110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	dc02      	bgt.n	800a11c <__sflush_r+0x20>
 800a116:	2000      	movs	r0, #0
 800a118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a11c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a11e:	2e00      	cmp	r6, #0
 800a120:	d0f9      	beq.n	800a116 <__sflush_r+0x1a>
 800a122:	2300      	movs	r3, #0
 800a124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a128:	682f      	ldr	r7, [r5, #0]
 800a12a:	602b      	str	r3, [r5, #0]
 800a12c:	d032      	beq.n	800a194 <__sflush_r+0x98>
 800a12e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	075a      	lsls	r2, r3, #29
 800a134:	d505      	bpl.n	800a142 <__sflush_r+0x46>
 800a136:	6863      	ldr	r3, [r4, #4]
 800a138:	1ac0      	subs	r0, r0, r3
 800a13a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a13c:	b10b      	cbz	r3, 800a142 <__sflush_r+0x46>
 800a13e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a140:	1ac0      	subs	r0, r0, r3
 800a142:	2300      	movs	r3, #0
 800a144:	4602      	mov	r2, r0
 800a146:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a148:	4628      	mov	r0, r5
 800a14a:	6a21      	ldr	r1, [r4, #32]
 800a14c:	47b0      	blx	r6
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	d106      	bne.n	800a162 <__sflush_r+0x66>
 800a154:	6829      	ldr	r1, [r5, #0]
 800a156:	291d      	cmp	r1, #29
 800a158:	d82c      	bhi.n	800a1b4 <__sflush_r+0xb8>
 800a15a:	4a2a      	ldr	r2, [pc, #168]	; (800a204 <__sflush_r+0x108>)
 800a15c:	40ca      	lsrs	r2, r1
 800a15e:	07d6      	lsls	r6, r2, #31
 800a160:	d528      	bpl.n	800a1b4 <__sflush_r+0xb8>
 800a162:	2200      	movs	r2, #0
 800a164:	6062      	str	r2, [r4, #4]
 800a166:	6922      	ldr	r2, [r4, #16]
 800a168:	04d9      	lsls	r1, r3, #19
 800a16a:	6022      	str	r2, [r4, #0]
 800a16c:	d504      	bpl.n	800a178 <__sflush_r+0x7c>
 800a16e:	1c42      	adds	r2, r0, #1
 800a170:	d101      	bne.n	800a176 <__sflush_r+0x7a>
 800a172:	682b      	ldr	r3, [r5, #0]
 800a174:	b903      	cbnz	r3, 800a178 <__sflush_r+0x7c>
 800a176:	6560      	str	r0, [r4, #84]	; 0x54
 800a178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a17a:	602f      	str	r7, [r5, #0]
 800a17c:	2900      	cmp	r1, #0
 800a17e:	d0ca      	beq.n	800a116 <__sflush_r+0x1a>
 800a180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a184:	4299      	cmp	r1, r3
 800a186:	d002      	beq.n	800a18e <__sflush_r+0x92>
 800a188:	4628      	mov	r0, r5
 800a18a:	f7ff fbb5 	bl	80098f8 <_free_r>
 800a18e:	2000      	movs	r0, #0
 800a190:	6360      	str	r0, [r4, #52]	; 0x34
 800a192:	e7c1      	b.n	800a118 <__sflush_r+0x1c>
 800a194:	6a21      	ldr	r1, [r4, #32]
 800a196:	2301      	movs	r3, #1
 800a198:	4628      	mov	r0, r5
 800a19a:	47b0      	blx	r6
 800a19c:	1c41      	adds	r1, r0, #1
 800a19e:	d1c7      	bne.n	800a130 <__sflush_r+0x34>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0c4      	beq.n	800a130 <__sflush_r+0x34>
 800a1a6:	2b1d      	cmp	r3, #29
 800a1a8:	d001      	beq.n	800a1ae <__sflush_r+0xb2>
 800a1aa:	2b16      	cmp	r3, #22
 800a1ac:	d101      	bne.n	800a1b2 <__sflush_r+0xb6>
 800a1ae:	602f      	str	r7, [r5, #0]
 800a1b0:	e7b1      	b.n	800a116 <__sflush_r+0x1a>
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	e7ad      	b.n	800a118 <__sflush_r+0x1c>
 800a1bc:	690f      	ldr	r7, [r1, #16]
 800a1be:	2f00      	cmp	r7, #0
 800a1c0:	d0a9      	beq.n	800a116 <__sflush_r+0x1a>
 800a1c2:	0793      	lsls	r3, r2, #30
 800a1c4:	bf18      	it	ne
 800a1c6:	2300      	movne	r3, #0
 800a1c8:	680e      	ldr	r6, [r1, #0]
 800a1ca:	bf08      	it	eq
 800a1cc:	694b      	ldreq	r3, [r1, #20]
 800a1ce:	eba6 0807 	sub.w	r8, r6, r7
 800a1d2:	600f      	str	r7, [r1, #0]
 800a1d4:	608b      	str	r3, [r1, #8]
 800a1d6:	f1b8 0f00 	cmp.w	r8, #0
 800a1da:	dd9c      	ble.n	800a116 <__sflush_r+0x1a>
 800a1dc:	4643      	mov	r3, r8
 800a1de:	463a      	mov	r2, r7
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	6a21      	ldr	r1, [r4, #32]
 800a1e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1e6:	47b0      	blx	r6
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	dc06      	bgt.n	800a1fa <__sflush_r+0xfe>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	e78e      	b.n	800a118 <__sflush_r+0x1c>
 800a1fa:	4407      	add	r7, r0
 800a1fc:	eba8 0800 	sub.w	r8, r8, r0
 800a200:	e7e9      	b.n	800a1d6 <__sflush_r+0xda>
 800a202:	bf00      	nop
 800a204:	20400001 	.word	0x20400001

0800a208 <_fflush_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	690b      	ldr	r3, [r1, #16]
 800a20c:	4605      	mov	r5, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	b913      	cbnz	r3, 800a218 <_fflush_r+0x10>
 800a212:	2500      	movs	r5, #0
 800a214:	4628      	mov	r0, r5
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	b118      	cbz	r0, 800a222 <_fflush_r+0x1a>
 800a21a:	6983      	ldr	r3, [r0, #24]
 800a21c:	b90b      	cbnz	r3, 800a222 <_fflush_r+0x1a>
 800a21e:	f000 f887 	bl	800a330 <__sinit>
 800a222:	4b14      	ldr	r3, [pc, #80]	; (800a274 <_fflush_r+0x6c>)
 800a224:	429c      	cmp	r4, r3
 800a226:	d11b      	bne.n	800a260 <_fflush_r+0x58>
 800a228:	686c      	ldr	r4, [r5, #4]
 800a22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d0ef      	beq.n	800a212 <_fflush_r+0xa>
 800a232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a234:	07d0      	lsls	r0, r2, #31
 800a236:	d404      	bmi.n	800a242 <_fflush_r+0x3a>
 800a238:	0599      	lsls	r1, r3, #22
 800a23a:	d402      	bmi.n	800a242 <_fflush_r+0x3a>
 800a23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a23e:	f000 f915 	bl	800a46c <__retarget_lock_acquire_recursive>
 800a242:	4628      	mov	r0, r5
 800a244:	4621      	mov	r1, r4
 800a246:	f7ff ff59 	bl	800a0fc <__sflush_r>
 800a24a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a24c:	4605      	mov	r5, r0
 800a24e:	07da      	lsls	r2, r3, #31
 800a250:	d4e0      	bmi.n	800a214 <_fflush_r+0xc>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	059b      	lsls	r3, r3, #22
 800a256:	d4dd      	bmi.n	800a214 <_fflush_r+0xc>
 800a258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a25a:	f000 f908 	bl	800a46e <__retarget_lock_release_recursive>
 800a25e:	e7d9      	b.n	800a214 <_fflush_r+0xc>
 800a260:	4b05      	ldr	r3, [pc, #20]	; (800a278 <_fflush_r+0x70>)
 800a262:	429c      	cmp	r4, r3
 800a264:	d101      	bne.n	800a26a <_fflush_r+0x62>
 800a266:	68ac      	ldr	r4, [r5, #8]
 800a268:	e7df      	b.n	800a22a <_fflush_r+0x22>
 800a26a:	4b04      	ldr	r3, [pc, #16]	; (800a27c <_fflush_r+0x74>)
 800a26c:	429c      	cmp	r4, r3
 800a26e:	bf08      	it	eq
 800a270:	68ec      	ldreq	r4, [r5, #12]
 800a272:	e7da      	b.n	800a22a <_fflush_r+0x22>
 800a274:	0800c32c 	.word	0x0800c32c
 800a278:	0800c34c 	.word	0x0800c34c
 800a27c:	0800c30c 	.word	0x0800c30c

0800a280 <std>:
 800a280:	2300      	movs	r3, #0
 800a282:	b510      	push	{r4, lr}
 800a284:	4604      	mov	r4, r0
 800a286:	e9c0 3300 	strd	r3, r3, [r0]
 800a28a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a28e:	6083      	str	r3, [r0, #8]
 800a290:	8181      	strh	r1, [r0, #12]
 800a292:	6643      	str	r3, [r0, #100]	; 0x64
 800a294:	81c2      	strh	r2, [r0, #14]
 800a296:	6183      	str	r3, [r0, #24]
 800a298:	4619      	mov	r1, r3
 800a29a:	2208      	movs	r2, #8
 800a29c:	305c      	adds	r0, #92	; 0x5c
 800a29e:	f7fd fbdf 	bl	8007a60 <memset>
 800a2a2:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <std+0x38>)
 800a2a4:	6224      	str	r4, [r4, #32]
 800a2a6:	6263      	str	r3, [r4, #36]	; 0x24
 800a2a8:	4b04      	ldr	r3, [pc, #16]	; (800a2bc <std+0x3c>)
 800a2aa:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2ac:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <std+0x40>)
 800a2ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2b0:	4b04      	ldr	r3, [pc, #16]	; (800a2c4 <std+0x44>)
 800a2b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800a5dd 	.word	0x0800a5dd
 800a2bc:	0800a5ff 	.word	0x0800a5ff
 800a2c0:	0800a637 	.word	0x0800a637
 800a2c4:	0800a65b 	.word	0x0800a65b

0800a2c8 <_cleanup_r>:
 800a2c8:	4901      	ldr	r1, [pc, #4]	; (800a2d0 <_cleanup_r+0x8>)
 800a2ca:	f000 b8af 	b.w	800a42c <_fwalk_reent>
 800a2ce:	bf00      	nop
 800a2d0:	0800a209 	.word	0x0800a209

0800a2d4 <__sfmoreglue>:
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	2568      	movs	r5, #104	; 0x68
 800a2d8:	1e4a      	subs	r2, r1, #1
 800a2da:	4355      	muls	r5, r2
 800a2dc:	460e      	mov	r6, r1
 800a2de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2e2:	f7ff fa35 	bl	8009750 <_malloc_r>
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	b140      	cbz	r0, 800a2fc <__sfmoreglue+0x28>
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	e9c0 1600 	strd	r1, r6, [r0]
 800a2f0:	300c      	adds	r0, #12
 800a2f2:	60a0      	str	r0, [r4, #8]
 800a2f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2f8:	f7fd fbb2 	bl	8007a60 <memset>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}

0800a300 <__sfp_lock_acquire>:
 800a300:	4801      	ldr	r0, [pc, #4]	; (800a308 <__sfp_lock_acquire+0x8>)
 800a302:	f000 b8b3 	b.w	800a46c <__retarget_lock_acquire_recursive>
 800a306:	bf00      	nop
 800a308:	20000430 	.word	0x20000430

0800a30c <__sfp_lock_release>:
 800a30c:	4801      	ldr	r0, [pc, #4]	; (800a314 <__sfp_lock_release+0x8>)
 800a30e:	f000 b8ae 	b.w	800a46e <__retarget_lock_release_recursive>
 800a312:	bf00      	nop
 800a314:	20000430 	.word	0x20000430

0800a318 <__sinit_lock_acquire>:
 800a318:	4801      	ldr	r0, [pc, #4]	; (800a320 <__sinit_lock_acquire+0x8>)
 800a31a:	f000 b8a7 	b.w	800a46c <__retarget_lock_acquire_recursive>
 800a31e:	bf00      	nop
 800a320:	2000042b 	.word	0x2000042b

0800a324 <__sinit_lock_release>:
 800a324:	4801      	ldr	r0, [pc, #4]	; (800a32c <__sinit_lock_release+0x8>)
 800a326:	f000 b8a2 	b.w	800a46e <__retarget_lock_release_recursive>
 800a32a:	bf00      	nop
 800a32c:	2000042b 	.word	0x2000042b

0800a330 <__sinit>:
 800a330:	b510      	push	{r4, lr}
 800a332:	4604      	mov	r4, r0
 800a334:	f7ff fff0 	bl	800a318 <__sinit_lock_acquire>
 800a338:	69a3      	ldr	r3, [r4, #24]
 800a33a:	b11b      	cbz	r3, 800a344 <__sinit+0x14>
 800a33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a340:	f7ff bff0 	b.w	800a324 <__sinit_lock_release>
 800a344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a348:	6523      	str	r3, [r4, #80]	; 0x50
 800a34a:	4b13      	ldr	r3, [pc, #76]	; (800a398 <__sinit+0x68>)
 800a34c:	4a13      	ldr	r2, [pc, #76]	; (800a39c <__sinit+0x6c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	62a2      	str	r2, [r4, #40]	; 0x28
 800a352:	42a3      	cmp	r3, r4
 800a354:	bf08      	it	eq
 800a356:	2301      	moveq	r3, #1
 800a358:	4620      	mov	r0, r4
 800a35a:	bf08      	it	eq
 800a35c:	61a3      	streq	r3, [r4, #24]
 800a35e:	f000 f81f 	bl	800a3a0 <__sfp>
 800a362:	6060      	str	r0, [r4, #4]
 800a364:	4620      	mov	r0, r4
 800a366:	f000 f81b 	bl	800a3a0 <__sfp>
 800a36a:	60a0      	str	r0, [r4, #8]
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 f817 	bl	800a3a0 <__sfp>
 800a372:	2200      	movs	r2, #0
 800a374:	2104      	movs	r1, #4
 800a376:	60e0      	str	r0, [r4, #12]
 800a378:	6860      	ldr	r0, [r4, #4]
 800a37a:	f7ff ff81 	bl	800a280 <std>
 800a37e:	2201      	movs	r2, #1
 800a380:	2109      	movs	r1, #9
 800a382:	68a0      	ldr	r0, [r4, #8]
 800a384:	f7ff ff7c 	bl	800a280 <std>
 800a388:	2202      	movs	r2, #2
 800a38a:	2112      	movs	r1, #18
 800a38c:	68e0      	ldr	r0, [r4, #12]
 800a38e:	f7ff ff77 	bl	800a280 <std>
 800a392:	2301      	movs	r3, #1
 800a394:	61a3      	str	r3, [r4, #24]
 800a396:	e7d1      	b.n	800a33c <__sinit+0xc>
 800a398:	0800bf38 	.word	0x0800bf38
 800a39c:	0800a2c9 	.word	0x0800a2c9

0800a3a0 <__sfp>:
 800a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a2:	4607      	mov	r7, r0
 800a3a4:	f7ff ffac 	bl	800a300 <__sfp_lock_acquire>
 800a3a8:	4b1e      	ldr	r3, [pc, #120]	; (800a424 <__sfp+0x84>)
 800a3aa:	681e      	ldr	r6, [r3, #0]
 800a3ac:	69b3      	ldr	r3, [r6, #24]
 800a3ae:	b913      	cbnz	r3, 800a3b6 <__sfp+0x16>
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f7ff ffbd 	bl	800a330 <__sinit>
 800a3b6:	3648      	adds	r6, #72	; 0x48
 800a3b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	d503      	bpl.n	800a3c8 <__sfp+0x28>
 800a3c0:	6833      	ldr	r3, [r6, #0]
 800a3c2:	b30b      	cbz	r3, 800a408 <__sfp+0x68>
 800a3c4:	6836      	ldr	r6, [r6, #0]
 800a3c6:	e7f7      	b.n	800a3b8 <__sfp+0x18>
 800a3c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3cc:	b9d5      	cbnz	r5, 800a404 <__sfp+0x64>
 800a3ce:	4b16      	ldr	r3, [pc, #88]	; (800a428 <__sfp+0x88>)
 800a3d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3d4:	60e3      	str	r3, [r4, #12]
 800a3d6:	6665      	str	r5, [r4, #100]	; 0x64
 800a3d8:	f000 f847 	bl	800a46a <__retarget_lock_init_recursive>
 800a3dc:	f7ff ff96 	bl	800a30c <__sfp_lock_release>
 800a3e0:	2208      	movs	r2, #8
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a3e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a3ec:	6025      	str	r5, [r4, #0]
 800a3ee:	61a5      	str	r5, [r4, #24]
 800a3f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3f4:	f7fd fb34 	bl	8007a60 <memset>
 800a3f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a400:	4620      	mov	r0, r4
 800a402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a404:	3468      	adds	r4, #104	; 0x68
 800a406:	e7d9      	b.n	800a3bc <__sfp+0x1c>
 800a408:	2104      	movs	r1, #4
 800a40a:	4638      	mov	r0, r7
 800a40c:	f7ff ff62 	bl	800a2d4 <__sfmoreglue>
 800a410:	4604      	mov	r4, r0
 800a412:	6030      	str	r0, [r6, #0]
 800a414:	2800      	cmp	r0, #0
 800a416:	d1d5      	bne.n	800a3c4 <__sfp+0x24>
 800a418:	f7ff ff78 	bl	800a30c <__sfp_lock_release>
 800a41c:	230c      	movs	r3, #12
 800a41e:	603b      	str	r3, [r7, #0]
 800a420:	e7ee      	b.n	800a400 <__sfp+0x60>
 800a422:	bf00      	nop
 800a424:	0800bf38 	.word	0x0800bf38
 800a428:	ffff0001 	.word	0xffff0001

0800a42c <_fwalk_reent>:
 800a42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a430:	4606      	mov	r6, r0
 800a432:	4688      	mov	r8, r1
 800a434:	2700      	movs	r7, #0
 800a436:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a43a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a43e:	f1b9 0901 	subs.w	r9, r9, #1
 800a442:	d505      	bpl.n	800a450 <_fwalk_reent+0x24>
 800a444:	6824      	ldr	r4, [r4, #0]
 800a446:	2c00      	cmp	r4, #0
 800a448:	d1f7      	bne.n	800a43a <_fwalk_reent+0xe>
 800a44a:	4638      	mov	r0, r7
 800a44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a450:	89ab      	ldrh	r3, [r5, #12]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d907      	bls.n	800a466 <_fwalk_reent+0x3a>
 800a456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a45a:	3301      	adds	r3, #1
 800a45c:	d003      	beq.n	800a466 <_fwalk_reent+0x3a>
 800a45e:	4629      	mov	r1, r5
 800a460:	4630      	mov	r0, r6
 800a462:	47c0      	blx	r8
 800a464:	4307      	orrs	r7, r0
 800a466:	3568      	adds	r5, #104	; 0x68
 800a468:	e7e9      	b.n	800a43e <_fwalk_reent+0x12>

0800a46a <__retarget_lock_init_recursive>:
 800a46a:	4770      	bx	lr

0800a46c <__retarget_lock_acquire_recursive>:
 800a46c:	4770      	bx	lr

0800a46e <__retarget_lock_release_recursive>:
 800a46e:	4770      	bx	lr

0800a470 <__swhatbuf_r>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	460e      	mov	r6, r1
 800a474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a478:	4614      	mov	r4, r2
 800a47a:	2900      	cmp	r1, #0
 800a47c:	461d      	mov	r5, r3
 800a47e:	b096      	sub	sp, #88	; 0x58
 800a480:	da07      	bge.n	800a492 <__swhatbuf_r+0x22>
 800a482:	2300      	movs	r3, #0
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	89b3      	ldrh	r3, [r6, #12]
 800a488:	061a      	lsls	r2, r3, #24
 800a48a:	d410      	bmi.n	800a4ae <__swhatbuf_r+0x3e>
 800a48c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a490:	e00e      	b.n	800a4b0 <__swhatbuf_r+0x40>
 800a492:	466a      	mov	r2, sp
 800a494:	f000 f908 	bl	800a6a8 <_fstat_r>
 800a498:	2800      	cmp	r0, #0
 800a49a:	dbf2      	blt.n	800a482 <__swhatbuf_r+0x12>
 800a49c:	9a01      	ldr	r2, [sp, #4]
 800a49e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4a6:	425a      	negs	r2, r3
 800a4a8:	415a      	adcs	r2, r3
 800a4aa:	602a      	str	r2, [r5, #0]
 800a4ac:	e7ee      	b.n	800a48c <__swhatbuf_r+0x1c>
 800a4ae:	2340      	movs	r3, #64	; 0x40
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	6023      	str	r3, [r4, #0]
 800a4b4:	b016      	add	sp, #88	; 0x58
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}

0800a4b8 <__smakebuf_r>:
 800a4b8:	898b      	ldrh	r3, [r1, #12]
 800a4ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4bc:	079d      	lsls	r5, r3, #30
 800a4be:	4606      	mov	r6, r0
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	d507      	bpl.n	800a4d4 <__smakebuf_r+0x1c>
 800a4c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	6123      	str	r3, [r4, #16]
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	6163      	str	r3, [r4, #20]
 800a4d0:	b002      	add	sp, #8
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	466a      	mov	r2, sp
 800a4d6:	ab01      	add	r3, sp, #4
 800a4d8:	f7ff ffca 	bl	800a470 <__swhatbuf_r>
 800a4dc:	9900      	ldr	r1, [sp, #0]
 800a4de:	4605      	mov	r5, r0
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f7ff f935 	bl	8009750 <_malloc_r>
 800a4e6:	b948      	cbnz	r0, 800a4fc <__smakebuf_r+0x44>
 800a4e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ec:	059a      	lsls	r2, r3, #22
 800a4ee:	d4ef      	bmi.n	800a4d0 <__smakebuf_r+0x18>
 800a4f0:	f023 0303 	bic.w	r3, r3, #3
 800a4f4:	f043 0302 	orr.w	r3, r3, #2
 800a4f8:	81a3      	strh	r3, [r4, #12]
 800a4fa:	e7e3      	b.n	800a4c4 <__smakebuf_r+0xc>
 800a4fc:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <__smakebuf_r+0x7c>)
 800a4fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	6020      	str	r0, [r4, #0]
 800a504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a508:	81a3      	strh	r3, [r4, #12]
 800a50a:	9b00      	ldr	r3, [sp, #0]
 800a50c:	6120      	str	r0, [r4, #16]
 800a50e:	6163      	str	r3, [r4, #20]
 800a510:	9b01      	ldr	r3, [sp, #4]
 800a512:	b15b      	cbz	r3, 800a52c <__smakebuf_r+0x74>
 800a514:	4630      	mov	r0, r6
 800a516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a51a:	f000 f8d7 	bl	800a6cc <_isatty_r>
 800a51e:	b128      	cbz	r0, 800a52c <__smakebuf_r+0x74>
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	f023 0303 	bic.w	r3, r3, #3
 800a526:	f043 0301 	orr.w	r3, r3, #1
 800a52a:	81a3      	strh	r3, [r4, #12]
 800a52c:	89a0      	ldrh	r0, [r4, #12]
 800a52e:	4305      	orrs	r5, r0
 800a530:	81a5      	strh	r5, [r4, #12]
 800a532:	e7cd      	b.n	800a4d0 <__smakebuf_r+0x18>
 800a534:	0800a2c9 	.word	0x0800a2c9

0800a538 <memchr>:
 800a538:	4603      	mov	r3, r0
 800a53a:	b510      	push	{r4, lr}
 800a53c:	b2c9      	uxtb	r1, r1
 800a53e:	4402      	add	r2, r0
 800a540:	4293      	cmp	r3, r2
 800a542:	4618      	mov	r0, r3
 800a544:	d101      	bne.n	800a54a <memchr+0x12>
 800a546:	2000      	movs	r0, #0
 800a548:	e003      	b.n	800a552 <memchr+0x1a>
 800a54a:	7804      	ldrb	r4, [r0, #0]
 800a54c:	3301      	adds	r3, #1
 800a54e:	428c      	cmp	r4, r1
 800a550:	d1f6      	bne.n	800a540 <memchr+0x8>
 800a552:	bd10      	pop	{r4, pc}

0800a554 <_raise_r>:
 800a554:	291f      	cmp	r1, #31
 800a556:	b538      	push	{r3, r4, r5, lr}
 800a558:	4604      	mov	r4, r0
 800a55a:	460d      	mov	r5, r1
 800a55c:	d904      	bls.n	800a568 <_raise_r+0x14>
 800a55e:	2316      	movs	r3, #22
 800a560:	6003      	str	r3, [r0, #0]
 800a562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a56a:	b112      	cbz	r2, 800a572 <_raise_r+0x1e>
 800a56c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a570:	b94b      	cbnz	r3, 800a586 <_raise_r+0x32>
 800a572:	4620      	mov	r0, r4
 800a574:	f000 f830 	bl	800a5d8 <_getpid_r>
 800a578:	462a      	mov	r2, r5
 800a57a:	4601      	mov	r1, r0
 800a57c:	4620      	mov	r0, r4
 800a57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a582:	f000 b817 	b.w	800a5b4 <_kill_r>
 800a586:	2b01      	cmp	r3, #1
 800a588:	d00a      	beq.n	800a5a0 <_raise_r+0x4c>
 800a58a:	1c59      	adds	r1, r3, #1
 800a58c:	d103      	bne.n	800a596 <_raise_r+0x42>
 800a58e:	2316      	movs	r3, #22
 800a590:	6003      	str	r3, [r0, #0]
 800a592:	2001      	movs	r0, #1
 800a594:	e7e7      	b.n	800a566 <_raise_r+0x12>
 800a596:	2400      	movs	r4, #0
 800a598:	4628      	mov	r0, r5
 800a59a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a59e:	4798      	blx	r3
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	e7e0      	b.n	800a566 <_raise_r+0x12>

0800a5a4 <raise>:
 800a5a4:	4b02      	ldr	r3, [pc, #8]	; (800a5b0 <raise+0xc>)
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	6818      	ldr	r0, [r3, #0]
 800a5aa:	f7ff bfd3 	b.w	800a554 <_raise_r>
 800a5ae:	bf00      	nop
 800a5b0:	200000ac 	.word	0x200000ac

0800a5b4 <_kill_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	4d06      	ldr	r5, [pc, #24]	; (800a5d4 <_kill_r+0x20>)
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	602b      	str	r3, [r5, #0]
 800a5c2:	f7f9 fdfa 	bl	80041ba <_kill>
 800a5c6:	1c43      	adds	r3, r0, #1
 800a5c8:	d102      	bne.n	800a5d0 <_kill_r+0x1c>
 800a5ca:	682b      	ldr	r3, [r5, #0]
 800a5cc:	b103      	cbz	r3, 800a5d0 <_kill_r+0x1c>
 800a5ce:	6023      	str	r3, [r4, #0]
 800a5d0:	bd38      	pop	{r3, r4, r5, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20000424 	.word	0x20000424

0800a5d8 <_getpid_r>:
 800a5d8:	f7f9 bde8 	b.w	80041ac <_getpid>

0800a5dc <__sread>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	460c      	mov	r4, r1
 800a5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e4:	f000 f894 	bl	800a710 <_read_r>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	bfab      	itete	ge
 800a5ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a5f0:	181b      	addge	r3, r3, r0
 800a5f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5f6:	bfac      	ite	ge
 800a5f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5fa:	81a3      	strhlt	r3, [r4, #12]
 800a5fc:	bd10      	pop	{r4, pc}

0800a5fe <__swrite>:
 800a5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a602:	461f      	mov	r7, r3
 800a604:	898b      	ldrh	r3, [r1, #12]
 800a606:	4605      	mov	r5, r0
 800a608:	05db      	lsls	r3, r3, #23
 800a60a:	460c      	mov	r4, r1
 800a60c:	4616      	mov	r6, r2
 800a60e:	d505      	bpl.n	800a61c <__swrite+0x1e>
 800a610:	2302      	movs	r3, #2
 800a612:	2200      	movs	r2, #0
 800a614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a618:	f000 f868 	bl	800a6ec <_lseek_r>
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	4632      	mov	r2, r6
 800a620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a624:	81a3      	strh	r3, [r4, #12]
 800a626:	4628      	mov	r0, r5
 800a628:	463b      	mov	r3, r7
 800a62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a632:	f000 b817 	b.w	800a664 <_write_r>

0800a636 <__sseek>:
 800a636:	b510      	push	{r4, lr}
 800a638:	460c      	mov	r4, r1
 800a63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63e:	f000 f855 	bl	800a6ec <_lseek_r>
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	bf15      	itete	ne
 800a648:	6560      	strne	r0, [r4, #84]	; 0x54
 800a64a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a64e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a652:	81a3      	strheq	r3, [r4, #12]
 800a654:	bf18      	it	ne
 800a656:	81a3      	strhne	r3, [r4, #12]
 800a658:	bd10      	pop	{r4, pc}

0800a65a <__sclose>:
 800a65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65e:	f000 b813 	b.w	800a688 <_close_r>
	...

0800a664 <_write_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	4611      	mov	r1, r2
 800a66c:	2200      	movs	r2, #0
 800a66e:	4d05      	ldr	r5, [pc, #20]	; (800a684 <_write_r+0x20>)
 800a670:	602a      	str	r2, [r5, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	f7f9 fdd8 	bl	8004228 <_write>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d102      	bne.n	800a682 <_write_r+0x1e>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	b103      	cbz	r3, 800a682 <_write_r+0x1e>
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	20000424 	.word	0x20000424

0800a688 <_close_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	2300      	movs	r3, #0
 800a68c:	4d05      	ldr	r5, [pc, #20]	; (800a6a4 <_close_r+0x1c>)
 800a68e:	4604      	mov	r4, r0
 800a690:	4608      	mov	r0, r1
 800a692:	602b      	str	r3, [r5, #0]
 800a694:	f7f9 fde4 	bl	8004260 <_close>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_close_r+0x1a>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_close_r+0x1a>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	20000424 	.word	0x20000424

0800a6a8 <_fstat_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	4d06      	ldr	r5, [pc, #24]	; (800a6c8 <_fstat_r+0x20>)
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	f7f9 fdde 	bl	8004276 <_fstat>
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	d102      	bne.n	800a6c4 <_fstat_r+0x1c>
 800a6be:	682b      	ldr	r3, [r5, #0]
 800a6c0:	b103      	cbz	r3, 800a6c4 <_fstat_r+0x1c>
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000424 	.word	0x20000424

0800a6cc <_isatty_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	4d05      	ldr	r5, [pc, #20]	; (800a6e8 <_isatty_r+0x1c>)
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	4608      	mov	r0, r1
 800a6d6:	602b      	str	r3, [r5, #0]
 800a6d8:	f7f9 fddc 	bl	8004294 <_isatty>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	d102      	bne.n	800a6e6 <_isatty_r+0x1a>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	b103      	cbz	r3, 800a6e6 <_isatty_r+0x1a>
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	20000424 	.word	0x20000424

0800a6ec <_lseek_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	4d05      	ldr	r5, [pc, #20]	; (800a70c <_lseek_r+0x20>)
 800a6f8:	602a      	str	r2, [r5, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f7f9 fdd4 	bl	80042a8 <_lseek>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_lseek_r+0x1e>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_lseek_r+0x1e>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20000424 	.word	0x20000424

0800a710 <_read_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	4611      	mov	r1, r2
 800a718:	2200      	movs	r2, #0
 800a71a:	4d05      	ldr	r5, [pc, #20]	; (800a730 <_read_r+0x20>)
 800a71c:	602a      	str	r2, [r5, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	f7f9 fd65 	bl	80041ee <_read>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_read_r+0x1e>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_read_r+0x1e>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	20000424 	.word	0x20000424
 800a734:	00000000 	.word	0x00000000

0800a738 <atan>:
 800a738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	4bb6      	ldr	r3, [pc, #728]	; (800aa18 <atan+0x2e0>)
 800a73e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a742:	429e      	cmp	r6, r3
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	468b      	mov	fp, r1
 800a74a:	dd17      	ble.n	800a77c <atan+0x44>
 800a74c:	4bb3      	ldr	r3, [pc, #716]	; (800aa1c <atan+0x2e4>)
 800a74e:	429e      	cmp	r6, r3
 800a750:	dc01      	bgt.n	800a756 <atan+0x1e>
 800a752:	d109      	bne.n	800a768 <atan+0x30>
 800a754:	b140      	cbz	r0, 800a768 <atan+0x30>
 800a756:	4622      	mov	r2, r4
 800a758:	462b      	mov	r3, r5
 800a75a:	4620      	mov	r0, r4
 800a75c:	4629      	mov	r1, r5
 800a75e:	f7f5 fd05 	bl	800016c <__adddf3>
 800a762:	4604      	mov	r4, r0
 800a764:	460d      	mov	r5, r1
 800a766:	e005      	b.n	800a774 <atan+0x3c>
 800a768:	f1bb 0f00 	cmp.w	fp, #0
 800a76c:	4cac      	ldr	r4, [pc, #688]	; (800aa20 <atan+0x2e8>)
 800a76e:	f300 8121 	bgt.w	800a9b4 <atan+0x27c>
 800a772:	4dac      	ldr	r5, [pc, #688]	; (800aa24 <atan+0x2ec>)
 800a774:	4620      	mov	r0, r4
 800a776:	4629      	mov	r1, r5
 800a778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	4baa      	ldr	r3, [pc, #680]	; (800aa28 <atan+0x2f0>)
 800a77e:	429e      	cmp	r6, r3
 800a780:	dc11      	bgt.n	800a7a6 <atan+0x6e>
 800a782:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a786:	429e      	cmp	r6, r3
 800a788:	dc0a      	bgt.n	800a7a0 <atan+0x68>
 800a78a:	a38b      	add	r3, pc, #556	; (adr r3, 800a9b8 <atan+0x280>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	f7f5 fcec 	bl	800016c <__adddf3>
 800a794:	2200      	movs	r2, #0
 800a796:	4ba5      	ldr	r3, [pc, #660]	; (800aa2c <atan+0x2f4>)
 800a798:	f7f6 f92e 	bl	80009f8 <__aeabi_dcmpgt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d1e9      	bne.n	800a774 <atan+0x3c>
 800a7a0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a7a4:	e027      	b.n	800a7f6 <atan+0xbe>
 800a7a6:	f000 f993 	bl	800aad0 <fabs>
 800a7aa:	4ba1      	ldr	r3, [pc, #644]	; (800aa30 <atan+0x2f8>)
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	429e      	cmp	r6, r3
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	f300 80b8 	bgt.w	800a926 <atan+0x1ee>
 800a7b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a7ba:	429e      	cmp	r6, r3
 800a7bc:	f300 809c 	bgt.w	800a8f8 <atan+0x1c0>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	f7f5 fcd2 	bl	800016c <__adddf3>
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	4b98      	ldr	r3, [pc, #608]	; (800aa2c <atan+0x2f4>)
 800a7cc:	f7f5 fccc 	bl	8000168 <__aeabi_dsub>
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	460f      	mov	r7, r1
 800a7d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7da:	4620      	mov	r0, r4
 800a7dc:	4629      	mov	r1, r5
 800a7de:	f7f5 fcc5 	bl	800016c <__adddf3>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	f7f5 ff9f 	bl	800072c <__aeabi_ddiv>
 800a7ee:	f04f 0a00 	mov.w	sl, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	460d      	mov	r5, r1
 800a7f6:	4622      	mov	r2, r4
 800a7f8:	462b      	mov	r3, r5
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7f5 fe6b 	bl	80004d8 <__aeabi_dmul>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4680      	mov	r8, r0
 800a808:	4689      	mov	r9, r1
 800a80a:	f7f5 fe65 	bl	80004d8 <__aeabi_dmul>
 800a80e:	a36c      	add	r3, pc, #432	; (adr r3, 800a9c0 <atan+0x288>)
 800a810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a814:	4606      	mov	r6, r0
 800a816:	460f      	mov	r7, r1
 800a818:	f7f5 fe5e 	bl	80004d8 <__aeabi_dmul>
 800a81c:	a36a      	add	r3, pc, #424	; (adr r3, 800a9c8 <atan+0x290>)
 800a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a822:	f7f5 fca3 	bl	800016c <__adddf3>
 800a826:	4632      	mov	r2, r6
 800a828:	463b      	mov	r3, r7
 800a82a:	f7f5 fe55 	bl	80004d8 <__aeabi_dmul>
 800a82e:	a368      	add	r3, pc, #416	; (adr r3, 800a9d0 <atan+0x298>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	f7f5 fc9a 	bl	800016c <__adddf3>
 800a838:	4632      	mov	r2, r6
 800a83a:	463b      	mov	r3, r7
 800a83c:	f7f5 fe4c 	bl	80004d8 <__aeabi_dmul>
 800a840:	a365      	add	r3, pc, #404	; (adr r3, 800a9d8 <atan+0x2a0>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f5 fc91 	bl	800016c <__adddf3>
 800a84a:	4632      	mov	r2, r6
 800a84c:	463b      	mov	r3, r7
 800a84e:	f7f5 fe43 	bl	80004d8 <__aeabi_dmul>
 800a852:	a363      	add	r3, pc, #396	; (adr r3, 800a9e0 <atan+0x2a8>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	f7f5 fc88 	bl	800016c <__adddf3>
 800a85c:	4632      	mov	r2, r6
 800a85e:	463b      	mov	r3, r7
 800a860:	f7f5 fe3a 	bl	80004d8 <__aeabi_dmul>
 800a864:	a360      	add	r3, pc, #384	; (adr r3, 800a9e8 <atan+0x2b0>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	f7f5 fc7f 	bl	800016c <__adddf3>
 800a86e:	4642      	mov	r2, r8
 800a870:	464b      	mov	r3, r9
 800a872:	f7f5 fe31 	bl	80004d8 <__aeabi_dmul>
 800a876:	a35e      	add	r3, pc, #376	; (adr r3, 800a9f0 <atan+0x2b8>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	4680      	mov	r8, r0
 800a87e:	4689      	mov	r9, r1
 800a880:	4630      	mov	r0, r6
 800a882:	4639      	mov	r1, r7
 800a884:	f7f5 fe28 	bl	80004d8 <__aeabi_dmul>
 800a888:	a35b      	add	r3, pc, #364	; (adr r3, 800a9f8 <atan+0x2c0>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7f5 fc6b 	bl	8000168 <__aeabi_dsub>
 800a892:	4632      	mov	r2, r6
 800a894:	463b      	mov	r3, r7
 800a896:	f7f5 fe1f 	bl	80004d8 <__aeabi_dmul>
 800a89a:	a359      	add	r3, pc, #356	; (adr r3, 800aa00 <atan+0x2c8>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f7f5 fc62 	bl	8000168 <__aeabi_dsub>
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	f7f5 fe16 	bl	80004d8 <__aeabi_dmul>
 800a8ac:	a356      	add	r3, pc, #344	; (adr r3, 800aa08 <atan+0x2d0>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f5 fc59 	bl	8000168 <__aeabi_dsub>
 800a8b6:	4632      	mov	r2, r6
 800a8b8:	463b      	mov	r3, r7
 800a8ba:	f7f5 fe0d 	bl	80004d8 <__aeabi_dmul>
 800a8be:	a354      	add	r3, pc, #336	; (adr r3, 800aa10 <atan+0x2d8>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fc50 	bl	8000168 <__aeabi_dsub>
 800a8c8:	4632      	mov	r2, r6
 800a8ca:	463b      	mov	r3, r7
 800a8cc:	f7f5 fe04 	bl	80004d8 <__aeabi_dmul>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	f7f5 fc48 	bl	800016c <__adddf3>
 800a8dc:	4622      	mov	r2, r4
 800a8de:	462b      	mov	r3, r5
 800a8e0:	f7f5 fdfa 	bl	80004d8 <__aeabi_dmul>
 800a8e4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	d144      	bne.n	800a978 <atan+0x240>
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	f7f5 fc39 	bl	8000168 <__aeabi_dsub>
 800a8f6:	e734      	b.n	800a762 <atan+0x2a>
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	4b4c      	ldr	r3, [pc, #304]	; (800aa2c <atan+0x2f4>)
 800a8fc:	f7f5 fc34 	bl	8000168 <__aeabi_dsub>
 800a900:	2200      	movs	r2, #0
 800a902:	4606      	mov	r6, r0
 800a904:	460f      	mov	r7, r1
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	4b48      	ldr	r3, [pc, #288]	; (800aa2c <atan+0x2f4>)
 800a90c:	f7f5 fc2e 	bl	800016c <__adddf3>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	4630      	mov	r0, r6
 800a916:	4639      	mov	r1, r7
 800a918:	f7f5 ff08 	bl	800072c <__aeabi_ddiv>
 800a91c:	f04f 0a01 	mov.w	sl, #1
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	e767      	b.n	800a7f6 <atan+0xbe>
 800a926:	4b43      	ldr	r3, [pc, #268]	; (800aa34 <atan+0x2fc>)
 800a928:	429e      	cmp	r6, r3
 800a92a:	da1a      	bge.n	800a962 <atan+0x22a>
 800a92c:	2200      	movs	r2, #0
 800a92e:	4b42      	ldr	r3, [pc, #264]	; (800aa38 <atan+0x300>)
 800a930:	f7f5 fc1a 	bl	8000168 <__aeabi_dsub>
 800a934:	2200      	movs	r2, #0
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	4620      	mov	r0, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	4b3e      	ldr	r3, [pc, #248]	; (800aa38 <atan+0x300>)
 800a940:	f7f5 fdca 	bl	80004d8 <__aeabi_dmul>
 800a944:	2200      	movs	r2, #0
 800a946:	4b39      	ldr	r3, [pc, #228]	; (800aa2c <atan+0x2f4>)
 800a948:	f7f5 fc10 	bl	800016c <__adddf3>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4630      	mov	r0, r6
 800a952:	4639      	mov	r1, r7
 800a954:	f7f5 feea 	bl	800072c <__aeabi_ddiv>
 800a958:	f04f 0a02 	mov.w	sl, #2
 800a95c:	4604      	mov	r4, r0
 800a95e:	460d      	mov	r5, r1
 800a960:	e749      	b.n	800a7f6 <atan+0xbe>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	2000      	movs	r0, #0
 800a968:	4934      	ldr	r1, [pc, #208]	; (800aa3c <atan+0x304>)
 800a96a:	f7f5 fedf 	bl	800072c <__aeabi_ddiv>
 800a96e:	f04f 0a03 	mov.w	sl, #3
 800a972:	4604      	mov	r4, r0
 800a974:	460d      	mov	r5, r1
 800a976:	e73e      	b.n	800a7f6 <atan+0xbe>
 800a978:	4b31      	ldr	r3, [pc, #196]	; (800aa40 <atan+0x308>)
 800a97a:	4e32      	ldr	r6, [pc, #200]	; (800aa44 <atan+0x30c>)
 800a97c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a980:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a984:	e9da 2300 	ldrd	r2, r3, [sl]
 800a988:	f7f5 fbee 	bl	8000168 <__aeabi_dsub>
 800a98c:	4622      	mov	r2, r4
 800a98e:	462b      	mov	r3, r5
 800a990:	f7f5 fbea 	bl	8000168 <__aeabi_dsub>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a99c:	f7f5 fbe4 	bl	8000168 <__aeabi_dsub>
 800a9a0:	f1bb 0f00 	cmp.w	fp, #0
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	460d      	mov	r5, r1
 800a9a8:	f6bf aee4 	bge.w	800a774 <atan+0x3c>
 800a9ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9b0:	461d      	mov	r5, r3
 800a9b2:	e6df      	b.n	800a774 <atan+0x3c>
 800a9b4:	4d24      	ldr	r5, [pc, #144]	; (800aa48 <atan+0x310>)
 800a9b6:	e6dd      	b.n	800a774 <atan+0x3c>
 800a9b8:	8800759c 	.word	0x8800759c
 800a9bc:	7e37e43c 	.word	0x7e37e43c
 800a9c0:	e322da11 	.word	0xe322da11
 800a9c4:	3f90ad3a 	.word	0x3f90ad3a
 800a9c8:	24760deb 	.word	0x24760deb
 800a9cc:	3fa97b4b 	.word	0x3fa97b4b
 800a9d0:	a0d03d51 	.word	0xa0d03d51
 800a9d4:	3fb10d66 	.word	0x3fb10d66
 800a9d8:	c54c206e 	.word	0xc54c206e
 800a9dc:	3fb745cd 	.word	0x3fb745cd
 800a9e0:	920083ff 	.word	0x920083ff
 800a9e4:	3fc24924 	.word	0x3fc24924
 800a9e8:	5555550d 	.word	0x5555550d
 800a9ec:	3fd55555 	.word	0x3fd55555
 800a9f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a9f4:	bfa2b444 	.word	0xbfa2b444
 800a9f8:	52defd9a 	.word	0x52defd9a
 800a9fc:	3fadde2d 	.word	0x3fadde2d
 800aa00:	af749a6d 	.word	0xaf749a6d
 800aa04:	3fb3b0f2 	.word	0x3fb3b0f2
 800aa08:	fe231671 	.word	0xfe231671
 800aa0c:	3fbc71c6 	.word	0x3fbc71c6
 800aa10:	9998ebc4 	.word	0x9998ebc4
 800aa14:	3fc99999 	.word	0x3fc99999
 800aa18:	440fffff 	.word	0x440fffff
 800aa1c:	7ff00000 	.word	0x7ff00000
 800aa20:	54442d18 	.word	0x54442d18
 800aa24:	bff921fb 	.word	0xbff921fb
 800aa28:	3fdbffff 	.word	0x3fdbffff
 800aa2c:	3ff00000 	.word	0x3ff00000
 800aa30:	3ff2ffff 	.word	0x3ff2ffff
 800aa34:	40038000 	.word	0x40038000
 800aa38:	3ff80000 	.word	0x3ff80000
 800aa3c:	bff00000 	.word	0xbff00000
 800aa40:	0800c390 	.word	0x0800c390
 800aa44:	0800c370 	.word	0x0800c370
 800aa48:	3ff921fb 	.word	0x3ff921fb

0800aa4c <cos>:
 800aa4c:	b530      	push	{r4, r5, lr}
 800aa4e:	4a1e      	ldr	r2, [pc, #120]	; (800aac8 <cos+0x7c>)
 800aa50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa54:	4293      	cmp	r3, r2
 800aa56:	b087      	sub	sp, #28
 800aa58:	dc04      	bgt.n	800aa64 <cos+0x18>
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f000 fc67 	bl	800b330 <__kernel_cos>
 800aa62:	e006      	b.n	800aa72 <cos+0x26>
 800aa64:	4a19      	ldr	r2, [pc, #100]	; (800aacc <cos+0x80>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	dd05      	ble.n	800aa76 <cos+0x2a>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	f7f5 fb7b 	bl	8000168 <__aeabi_dsub>
 800aa72:	b007      	add	sp, #28
 800aa74:	bd30      	pop	{r4, r5, pc}
 800aa76:	aa02      	add	r2, sp, #8
 800aa78:	f000 f9be 	bl	800adf8 <__ieee754_rem_pio2>
 800aa7c:	f000 0003 	and.w	r0, r0, #3
 800aa80:	2801      	cmp	r0, #1
 800aa82:	d007      	beq.n	800aa94 <cos+0x48>
 800aa84:	2802      	cmp	r0, #2
 800aa86:	d00f      	beq.n	800aaa8 <cos+0x5c>
 800aa88:	b9a8      	cbnz	r0, 800aab6 <cos+0x6a>
 800aa8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa92:	e7e4      	b.n	800aa5e <cos+0x12>
 800aa94:	9000      	str	r0, [sp, #0]
 800aa96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa9e:	f001 f84f 	bl	800bb40 <__kernel_sin>
 800aaa2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800aaa6:	e7e4      	b.n	800aa72 <cos+0x26>
 800aaa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab0:	f000 fc3e 	bl	800b330 <__kernel_cos>
 800aab4:	e7f5      	b.n	800aaa2 <cos+0x56>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aac2:	f001 f83d 	bl	800bb40 <__kernel_sin>
 800aac6:	e7d4      	b.n	800aa72 <cos+0x26>
 800aac8:	3fe921fb 	.word	0x3fe921fb
 800aacc:	7fefffff 	.word	0x7fefffff

0800aad0 <fabs>:
 800aad0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aad4:	4770      	bx	lr
	...

0800aad8 <round>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800aade:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800aae2:	2c13      	cmp	r4, #19
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4606      	mov	r6, r0
 800aaea:	460d      	mov	r5, r1
 800aaec:	dc19      	bgt.n	800ab22 <round+0x4a>
 800aaee:	2c00      	cmp	r4, #0
 800aaf0:	da09      	bge.n	800ab06 <round+0x2e>
 800aaf2:	3401      	adds	r4, #1
 800aaf4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800aaf8:	d103      	bne.n	800ab02 <round+0x2a>
 800aafa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aafe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab02:	2200      	movs	r2, #0
 800ab04:	e02a      	b.n	800ab5c <round+0x84>
 800ab06:	4917      	ldr	r1, [pc, #92]	; (800ab64 <round+0x8c>)
 800ab08:	4121      	asrs	r1, r4
 800ab0a:	ea03 0001 	and.w	r0, r3, r1
 800ab0e:	4302      	orrs	r2, r0
 800ab10:	d010      	beq.n	800ab34 <round+0x5c>
 800ab12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ab16:	fa42 f404 	asr.w	r4, r2, r4
 800ab1a:	4423      	add	r3, r4
 800ab1c:	ea23 0301 	bic.w	r3, r3, r1
 800ab20:	e7ef      	b.n	800ab02 <round+0x2a>
 800ab22:	2c33      	cmp	r4, #51	; 0x33
 800ab24:	dd09      	ble.n	800ab3a <round+0x62>
 800ab26:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ab2a:	d103      	bne.n	800ab34 <round+0x5c>
 800ab2c:	f7f5 fb1e 	bl	800016c <__adddf3>
 800ab30:	4606      	mov	r6, r0
 800ab32:	460d      	mov	r5, r1
 800ab34:	4630      	mov	r0, r6
 800ab36:	4629      	mov	r1, r5
 800ab38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab3e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ab42:	40f8      	lsrs	r0, r7
 800ab44:	4202      	tst	r2, r0
 800ab46:	d0f5      	beq.n	800ab34 <round+0x5c>
 800ab48:	2101      	movs	r1, #1
 800ab4a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ab4e:	fa01 f404 	lsl.w	r4, r1, r4
 800ab52:	1912      	adds	r2, r2, r4
 800ab54:	bf28      	it	cs
 800ab56:	185b      	addcs	r3, r3, r1
 800ab58:	ea22 0200 	bic.w	r2, r2, r0
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4610      	mov	r0, r2
 800ab60:	e7e6      	b.n	800ab30 <round+0x58>
 800ab62:	bf00      	nop
 800ab64:	000fffff 	.word	0x000fffff

0800ab68 <sin>:
 800ab68:	b530      	push	{r4, r5, lr}
 800ab6a:	4a20      	ldr	r2, [pc, #128]	; (800abec <sin+0x84>)
 800ab6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ab70:	4293      	cmp	r3, r2
 800ab72:	b087      	sub	sp, #28
 800ab74:	dc06      	bgt.n	800ab84 <sin+0x1c>
 800ab76:	2300      	movs	r3, #0
 800ab78:	2200      	movs	r2, #0
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	f000 ffdf 	bl	800bb40 <__kernel_sin>
 800ab82:	e006      	b.n	800ab92 <sin+0x2a>
 800ab84:	4a1a      	ldr	r2, [pc, #104]	; (800abf0 <sin+0x88>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	dd05      	ble.n	800ab96 <sin+0x2e>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	f7f5 faeb 	bl	8000168 <__aeabi_dsub>
 800ab92:	b007      	add	sp, #28
 800ab94:	bd30      	pop	{r4, r5, pc}
 800ab96:	aa02      	add	r2, sp, #8
 800ab98:	f000 f92e 	bl	800adf8 <__ieee754_rem_pio2>
 800ab9c:	f000 0003 	and.w	r0, r0, #3
 800aba0:	2801      	cmp	r0, #1
 800aba2:	d009      	beq.n	800abb8 <sin+0x50>
 800aba4:	2802      	cmp	r0, #2
 800aba6:	d00e      	beq.n	800abc6 <sin+0x5e>
 800aba8:	b9c0      	cbnz	r0, 800abdc <sin+0x74>
 800abaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abae:	2301      	movs	r3, #1
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abb6:	e7e2      	b.n	800ab7e <sin+0x16>
 800abb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abc0:	f000 fbb6 	bl	800b330 <__kernel_cos>
 800abc4:	e7e5      	b.n	800ab92 <sin+0x2a>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abd2:	f000 ffb5 	bl	800bb40 <__kernel_sin>
 800abd6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800abda:	e7da      	b.n	800ab92 <sin+0x2a>
 800abdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe4:	f000 fba4 	bl	800b330 <__kernel_cos>
 800abe8:	e7f5      	b.n	800abd6 <sin+0x6e>
 800abea:	bf00      	nop
 800abec:	3fe921fb 	.word	0x3fe921fb
 800abf0:	7fefffff 	.word	0x7fefffff

0800abf4 <atan2>:
 800abf4:	f000 b82c 	b.w	800ac50 <__ieee754_atan2>

0800abf8 <sqrt>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	4606      	mov	r6, r0
 800abfc:	460f      	mov	r7, r1
 800abfe:	f000 faeb 	bl	800b1d8 <__ieee754_sqrt>
 800ac02:	4b12      	ldr	r3, [pc, #72]	; (800ac4c <sqrt+0x54>)
 800ac04:	4604      	mov	r4, r0
 800ac06:	f993 3000 	ldrsb.w	r3, [r3]
 800ac0a:	460d      	mov	r5, r1
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	d019      	beq.n	800ac44 <sqrt+0x4c>
 800ac10:	4632      	mov	r2, r6
 800ac12:	463b      	mov	r3, r7
 800ac14:	4630      	mov	r0, r6
 800ac16:	4639      	mov	r1, r7
 800ac18:	f7f5 fef8 	bl	8000a0c <__aeabi_dcmpun>
 800ac1c:	b990      	cbnz	r0, 800ac44 <sqrt+0x4c>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2300      	movs	r3, #0
 800ac22:	4630      	mov	r0, r6
 800ac24:	4639      	mov	r1, r7
 800ac26:	f7f5 fec9 	bl	80009bc <__aeabi_dcmplt>
 800ac2a:	b158      	cbz	r0, 800ac44 <sqrt+0x4c>
 800ac2c:	f7fc feee 	bl	8007a0c <__errno>
 800ac30:	2321      	movs	r3, #33	; 0x21
 800ac32:	2200      	movs	r2, #0
 800ac34:	6003      	str	r3, [r0, #0]
 800ac36:	2300      	movs	r3, #0
 800ac38:	4610      	mov	r0, r2
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	f7f5 fd76 	bl	800072c <__aeabi_ddiv>
 800ac40:	4604      	mov	r4, r0
 800ac42:	460d      	mov	r5, r1
 800ac44:	4620      	mov	r0, r4
 800ac46:	4629      	mov	r1, r5
 800ac48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000280 	.word	0x20000280

0800ac50 <__ieee754_atan2>:
 800ac50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	4692      	mov	sl, r2
 800ac56:	4699      	mov	r9, r3
 800ac58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac5c:	461f      	mov	r7, r3
 800ac5e:	f1ca 0300 	rsb	r3, sl, #0
 800ac62:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800adf0 <__ieee754_atan2+0x1a0>
 800ac66:	ea43 030a 	orr.w	r3, r3, sl
 800ac6a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ac6e:	4573      	cmp	r3, lr
 800ac70:	4604      	mov	r4, r0
 800ac72:	460d      	mov	r5, r1
 800ac74:	d808      	bhi.n	800ac88 <__ieee754_atan2+0x38>
 800ac76:	4246      	negs	r6, r0
 800ac78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac7c:	4306      	orrs	r6, r0
 800ac7e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ac82:	4576      	cmp	r6, lr
 800ac84:	468c      	mov	ip, r1
 800ac86:	d908      	bls.n	800ac9a <__ieee754_atan2+0x4a>
 800ac88:	4652      	mov	r2, sl
 800ac8a:	464b      	mov	r3, r9
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	f7f5 fa6c 	bl	800016c <__adddf3>
 800ac94:	4604      	mov	r4, r0
 800ac96:	460d      	mov	r5, r1
 800ac98:	e019      	b.n	800acce <__ieee754_atan2+0x7e>
 800ac9a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800ac9e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800aca2:	ea56 060a 	orrs.w	r6, r6, sl
 800aca6:	d103      	bne.n	800acb0 <__ieee754_atan2+0x60>
 800aca8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	f7ff bd44 	b.w	800a738 <atan>
 800acb0:	17be      	asrs	r6, r7, #30
 800acb2:	f006 0602 	and.w	r6, r6, #2
 800acb6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800acba:	ea53 0100 	orrs.w	r1, r3, r0
 800acbe:	d10a      	bne.n	800acd6 <__ieee754_atan2+0x86>
 800acc0:	2e02      	cmp	r6, #2
 800acc2:	d067      	beq.n	800ad94 <__ieee754_atan2+0x144>
 800acc4:	2e03      	cmp	r6, #3
 800acc6:	d102      	bne.n	800acce <__ieee754_atan2+0x7e>
 800acc8:	a53b      	add	r5, pc, #236	; (adr r5, 800adb8 <__ieee754_atan2+0x168>)
 800acca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800acce:	4620      	mov	r0, r4
 800acd0:	4629      	mov	r1, r5
 800acd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd6:	ea52 010a 	orrs.w	r1, r2, sl
 800acda:	d106      	bne.n	800acea <__ieee754_atan2+0x9a>
 800acdc:	f1bc 0f00 	cmp.w	ip, #0
 800ace0:	da63      	bge.n	800adaa <__ieee754_atan2+0x15a>
 800ace2:	a537      	add	r5, pc, #220	; (adr r5, 800adc0 <__ieee754_atan2+0x170>)
 800ace4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ace8:	e7f1      	b.n	800acce <__ieee754_atan2+0x7e>
 800acea:	4572      	cmp	r2, lr
 800acec:	d10f      	bne.n	800ad0e <__ieee754_atan2+0xbe>
 800acee:	4293      	cmp	r3, r2
 800acf0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800acf4:	d107      	bne.n	800ad06 <__ieee754_atan2+0xb6>
 800acf6:	2e02      	cmp	r6, #2
 800acf8:	d850      	bhi.n	800ad9c <__ieee754_atan2+0x14c>
 800acfa:	4b3b      	ldr	r3, [pc, #236]	; (800ade8 <__ieee754_atan2+0x198>)
 800acfc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ad00:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ad04:	e7e3      	b.n	800acce <__ieee754_atan2+0x7e>
 800ad06:	2e02      	cmp	r6, #2
 800ad08:	d84c      	bhi.n	800ada4 <__ieee754_atan2+0x154>
 800ad0a:	4b38      	ldr	r3, [pc, #224]	; (800adec <__ieee754_atan2+0x19c>)
 800ad0c:	e7f6      	b.n	800acfc <__ieee754_atan2+0xac>
 800ad0e:	4573      	cmp	r3, lr
 800ad10:	d0e4      	beq.n	800acdc <__ieee754_atan2+0x8c>
 800ad12:	1a9b      	subs	r3, r3, r2
 800ad14:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ad18:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad1c:	da20      	bge.n	800ad60 <__ieee754_atan2+0x110>
 800ad1e:	2f00      	cmp	r7, #0
 800ad20:	da01      	bge.n	800ad26 <__ieee754_atan2+0xd6>
 800ad22:	323c      	adds	r2, #60	; 0x3c
 800ad24:	db20      	blt.n	800ad68 <__ieee754_atan2+0x118>
 800ad26:	4652      	mov	r2, sl
 800ad28:	464b      	mov	r3, r9
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f7f5 fcfd 	bl	800072c <__aeabi_ddiv>
 800ad32:	f7ff fecd 	bl	800aad0 <fabs>
 800ad36:	f7ff fcff 	bl	800a738 <atan>
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	2e01      	cmp	r6, #1
 800ad40:	d015      	beq.n	800ad6e <__ieee754_atan2+0x11e>
 800ad42:	2e02      	cmp	r6, #2
 800ad44:	d017      	beq.n	800ad76 <__ieee754_atan2+0x126>
 800ad46:	2e00      	cmp	r6, #0
 800ad48:	d0c1      	beq.n	800acce <__ieee754_atan2+0x7e>
 800ad4a:	a31f      	add	r3, pc, #124	; (adr r3, 800adc8 <__ieee754_atan2+0x178>)
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	4620      	mov	r0, r4
 800ad52:	4629      	mov	r1, r5
 800ad54:	f7f5 fa08 	bl	8000168 <__aeabi_dsub>
 800ad58:	a31d      	add	r3, pc, #116	; (adr r3, 800add0 <__ieee754_atan2+0x180>)
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	e016      	b.n	800ad8e <__ieee754_atan2+0x13e>
 800ad60:	a51d      	add	r5, pc, #116	; (adr r5, 800add8 <__ieee754_atan2+0x188>)
 800ad62:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad66:	e7ea      	b.n	800ad3e <__ieee754_atan2+0xee>
 800ad68:	2400      	movs	r4, #0
 800ad6a:	2500      	movs	r5, #0
 800ad6c:	e7e7      	b.n	800ad3e <__ieee754_atan2+0xee>
 800ad6e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ad72:	461d      	mov	r5, r3
 800ad74:	e7ab      	b.n	800acce <__ieee754_atan2+0x7e>
 800ad76:	a314      	add	r3, pc, #80	; (adr r3, 800adc8 <__ieee754_atan2+0x178>)
 800ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	4629      	mov	r1, r5
 800ad80:	f7f5 f9f2 	bl	8000168 <__aeabi_dsub>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	a111      	add	r1, pc, #68	; (adr r1, 800add0 <__ieee754_atan2+0x180>)
 800ad8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad8e:	f7f5 f9eb 	bl	8000168 <__aeabi_dsub>
 800ad92:	e77f      	b.n	800ac94 <__ieee754_atan2+0x44>
 800ad94:	a50e      	add	r5, pc, #56	; (adr r5, 800add0 <__ieee754_atan2+0x180>)
 800ad96:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad9a:	e798      	b.n	800acce <__ieee754_atan2+0x7e>
 800ad9c:	a510      	add	r5, pc, #64	; (adr r5, 800ade0 <__ieee754_atan2+0x190>)
 800ad9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ada2:	e794      	b.n	800acce <__ieee754_atan2+0x7e>
 800ada4:	2400      	movs	r4, #0
 800ada6:	2500      	movs	r5, #0
 800ada8:	e791      	b.n	800acce <__ieee754_atan2+0x7e>
 800adaa:	a50b      	add	r5, pc, #44	; (adr r5, 800add8 <__ieee754_atan2+0x188>)
 800adac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800adb0:	e78d      	b.n	800acce <__ieee754_atan2+0x7e>
 800adb2:	bf00      	nop
 800adb4:	f3af 8000 	nop.w
 800adb8:	54442d18 	.word	0x54442d18
 800adbc:	c00921fb 	.word	0xc00921fb
 800adc0:	54442d18 	.word	0x54442d18
 800adc4:	bff921fb 	.word	0xbff921fb
 800adc8:	33145c07 	.word	0x33145c07
 800adcc:	3ca1a626 	.word	0x3ca1a626
 800add0:	54442d18 	.word	0x54442d18
 800add4:	400921fb 	.word	0x400921fb
 800add8:	54442d18 	.word	0x54442d18
 800addc:	3ff921fb 	.word	0x3ff921fb
 800ade0:	54442d18 	.word	0x54442d18
 800ade4:	3fe921fb 	.word	0x3fe921fb
 800ade8:	0800c3b0 	.word	0x0800c3b0
 800adec:	0800c3c8 	.word	0x0800c3c8
 800adf0:	7ff00000 	.word	0x7ff00000
 800adf4:	00000000 	.word	0x00000000

0800adf8 <__ieee754_rem_pio2>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	4614      	mov	r4, r2
 800adfe:	4ac4      	ldr	r2, [pc, #784]	; (800b110 <__ieee754_rem_pio2+0x318>)
 800ae00:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800ae04:	b08d      	sub	sp, #52	; 0x34
 800ae06:	4592      	cmp	sl, r2
 800ae08:	9104      	str	r1, [sp, #16]
 800ae0a:	dc07      	bgt.n	800ae1c <__ieee754_rem_pio2+0x24>
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e9c4 0100 	strd	r0, r1, [r4]
 800ae14:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ae18:	2500      	movs	r5, #0
 800ae1a:	e024      	b.n	800ae66 <__ieee754_rem_pio2+0x6e>
 800ae1c:	4abd      	ldr	r2, [pc, #756]	; (800b114 <__ieee754_rem_pio2+0x31c>)
 800ae1e:	4592      	cmp	sl, r2
 800ae20:	dc72      	bgt.n	800af08 <__ieee754_rem_pio2+0x110>
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	4dbc      	ldr	r5, [pc, #752]	; (800b118 <__ieee754_rem_pio2+0x320>)
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	a3ab      	add	r3, pc, #684	; (adr r3, 800b0d8 <__ieee754_rem_pio2+0x2e0>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	dd36      	ble.n	800ae9e <__ieee754_rem_pio2+0xa6>
 800ae30:	f7f5 f99a 	bl	8000168 <__aeabi_dsub>
 800ae34:	45aa      	cmp	sl, r5
 800ae36:	4606      	mov	r6, r0
 800ae38:	460f      	mov	r7, r1
 800ae3a:	d018      	beq.n	800ae6e <__ieee754_rem_pio2+0x76>
 800ae3c:	a3a8      	add	r3, pc, #672	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x2e8>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f7f5 f991 	bl	8000168 <__aeabi_dsub>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	e9c4 2300 	strd	r2, r3, [r4]
 800ae50:	4639      	mov	r1, r7
 800ae52:	f7f5 f989 	bl	8000168 <__aeabi_dsub>
 800ae56:	a3a2      	add	r3, pc, #648	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x2e8>)
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f7f5 f984 	bl	8000168 <__aeabi_dsub>
 800ae60:	2501      	movs	r5, #1
 800ae62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae66:	4628      	mov	r0, r5
 800ae68:	b00d      	add	sp, #52	; 0x34
 800ae6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6e:	a39e      	add	r3, pc, #632	; (adr r3, 800b0e8 <__ieee754_rem_pio2+0x2f0>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	f7f5 f978 	bl	8000168 <__aeabi_dsub>
 800ae78:	a39d      	add	r3, pc, #628	; (adr r3, 800b0f0 <__ieee754_rem_pio2+0x2f8>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	f7f5 f971 	bl	8000168 <__aeabi_dsub>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	e9c4 2300 	strd	r2, r3, [r4]
 800ae90:	4639      	mov	r1, r7
 800ae92:	f7f5 f969 	bl	8000168 <__aeabi_dsub>
 800ae96:	a396      	add	r3, pc, #600	; (adr r3, 800b0f0 <__ieee754_rem_pio2+0x2f8>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	e7de      	b.n	800ae5c <__ieee754_rem_pio2+0x64>
 800ae9e:	f7f5 f965 	bl	800016c <__adddf3>
 800aea2:	45aa      	cmp	sl, r5
 800aea4:	4606      	mov	r6, r0
 800aea6:	460f      	mov	r7, r1
 800aea8:	d016      	beq.n	800aed8 <__ieee754_rem_pio2+0xe0>
 800aeaa:	a38d      	add	r3, pc, #564	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x2e8>)
 800aeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb0:	f7f5 f95c 	bl	800016c <__adddf3>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4630      	mov	r0, r6
 800aeba:	e9c4 2300 	strd	r2, r3, [r4]
 800aebe:	4639      	mov	r1, r7
 800aec0:	f7f5 f952 	bl	8000168 <__aeabi_dsub>
 800aec4:	a386      	add	r3, pc, #536	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x2e8>)
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	f7f5 f94f 	bl	800016c <__adddf3>
 800aece:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aed2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aed6:	e7c6      	b.n	800ae66 <__ieee754_rem_pio2+0x6e>
 800aed8:	a383      	add	r3, pc, #524	; (adr r3, 800b0e8 <__ieee754_rem_pio2+0x2f0>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 f945 	bl	800016c <__adddf3>
 800aee2:	a383      	add	r3, pc, #524	; (adr r3, 800b0f0 <__ieee754_rem_pio2+0x2f8>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	4606      	mov	r6, r0
 800aeea:	460f      	mov	r7, r1
 800aeec:	f7f5 f93e 	bl	800016c <__adddf3>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4630      	mov	r0, r6
 800aef6:	e9c4 2300 	strd	r2, r3, [r4]
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 f934 	bl	8000168 <__aeabi_dsub>
 800af00:	a37b      	add	r3, pc, #492	; (adr r3, 800b0f0 <__ieee754_rem_pio2+0x2f8>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	e7e0      	b.n	800aeca <__ieee754_rem_pio2+0xd2>
 800af08:	4a84      	ldr	r2, [pc, #528]	; (800b11c <__ieee754_rem_pio2+0x324>)
 800af0a:	4592      	cmp	sl, r2
 800af0c:	f300 80d5 	bgt.w	800b0ba <__ieee754_rem_pio2+0x2c2>
 800af10:	f7ff fdde 	bl	800aad0 <fabs>
 800af14:	a378      	add	r3, pc, #480	; (adr r3, 800b0f8 <__ieee754_rem_pio2+0x300>)
 800af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1a:	4606      	mov	r6, r0
 800af1c:	460f      	mov	r7, r1
 800af1e:	f7f5 fadb 	bl	80004d8 <__aeabi_dmul>
 800af22:	2200      	movs	r2, #0
 800af24:	4b7e      	ldr	r3, [pc, #504]	; (800b120 <__ieee754_rem_pio2+0x328>)
 800af26:	f7f5 f921 	bl	800016c <__adddf3>
 800af2a:	f7f5 fd85 	bl	8000a38 <__aeabi_d2iz>
 800af2e:	4605      	mov	r5, r0
 800af30:	f7f5 fa68 	bl	8000404 <__aeabi_i2d>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af3c:	a366      	add	r3, pc, #408	; (adr r3, 800b0d8 <__ieee754_rem_pio2+0x2e0>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f7f5 fac9 	bl	80004d8 <__aeabi_dmul>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	4630      	mov	r0, r6
 800af4c:	4639      	mov	r1, r7
 800af4e:	f7f5 f90b 	bl	8000168 <__aeabi_dsub>
 800af52:	a363      	add	r3, pc, #396	; (adr r3, 800b0e0 <__ieee754_rem_pio2+0x2e8>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	4680      	mov	r8, r0
 800af5a:	4689      	mov	r9, r1
 800af5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af60:	f7f5 faba 	bl	80004d8 <__aeabi_dmul>
 800af64:	2d1f      	cmp	r5, #31
 800af66:	4606      	mov	r6, r0
 800af68:	460f      	mov	r7, r1
 800af6a:	dc0e      	bgt.n	800af8a <__ieee754_rem_pio2+0x192>
 800af6c:	4b6d      	ldr	r3, [pc, #436]	; (800b124 <__ieee754_rem_pio2+0x32c>)
 800af6e:	1e6a      	subs	r2, r5, #1
 800af70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af74:	4553      	cmp	r3, sl
 800af76:	d008      	beq.n	800af8a <__ieee754_rem_pio2+0x192>
 800af78:	4632      	mov	r2, r6
 800af7a:	463b      	mov	r3, r7
 800af7c:	4640      	mov	r0, r8
 800af7e:	4649      	mov	r1, r9
 800af80:	f7f5 f8f2 	bl	8000168 <__aeabi_dsub>
 800af84:	e9c4 0100 	strd	r0, r1, [r4]
 800af88:	e013      	b.n	800afb2 <__ieee754_rem_pio2+0x1ba>
 800af8a:	463b      	mov	r3, r7
 800af8c:	4632      	mov	r2, r6
 800af8e:	4640      	mov	r0, r8
 800af90:	4649      	mov	r1, r9
 800af92:	f7f5 f8e9 	bl	8000168 <__aeabi_dsub>
 800af96:	ea4f 532a 	mov.w	r3, sl, asr #20
 800af9a:	9305      	str	r3, [sp, #20]
 800af9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800afa0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800afa4:	f1ba 0f10 	cmp.w	sl, #16
 800afa8:	dc1f      	bgt.n	800afea <__ieee754_rem_pio2+0x1f2>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	e9c4 2300 	strd	r2, r3, [r4]
 800afb2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800afb6:	4640      	mov	r0, r8
 800afb8:	4653      	mov	r3, sl
 800afba:	4649      	mov	r1, r9
 800afbc:	f7f5 f8d4 	bl	8000168 <__aeabi_dsub>
 800afc0:	4632      	mov	r2, r6
 800afc2:	463b      	mov	r3, r7
 800afc4:	f7f5 f8d0 	bl	8000168 <__aeabi_dsub>
 800afc8:	460b      	mov	r3, r1
 800afca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800afce:	9904      	ldr	r1, [sp, #16]
 800afd0:	4602      	mov	r2, r0
 800afd2:	2900      	cmp	r1, #0
 800afd4:	f6bf af47 	bge.w	800ae66 <__ieee754_rem_pio2+0x6e>
 800afd8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800afdc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800afe0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afe4:	60e3      	str	r3, [r4, #12]
 800afe6:	426d      	negs	r5, r5
 800afe8:	e73d      	b.n	800ae66 <__ieee754_rem_pio2+0x6e>
 800afea:	a33f      	add	r3, pc, #252	; (adr r3, 800b0e8 <__ieee754_rem_pio2+0x2f0>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aff4:	f7f5 fa70 	bl	80004d8 <__aeabi_dmul>
 800aff8:	4606      	mov	r6, r0
 800affa:	460f      	mov	r7, r1
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	f7f5 f8b0 	bl	8000168 <__aeabi_dsub>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4682      	mov	sl, r0
 800b00e:	468b      	mov	fp, r1
 800b010:	4640      	mov	r0, r8
 800b012:	4649      	mov	r1, r9
 800b014:	f7f5 f8a8 	bl	8000168 <__aeabi_dsub>
 800b018:	4632      	mov	r2, r6
 800b01a:	463b      	mov	r3, r7
 800b01c:	f7f5 f8a4 	bl	8000168 <__aeabi_dsub>
 800b020:	a333      	add	r3, pc, #204	; (adr r3, 800b0f0 <__ieee754_rem_pio2+0x2f8>)
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	4606      	mov	r6, r0
 800b028:	460f      	mov	r7, r1
 800b02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b02e:	f7f5 fa53 	bl	80004d8 <__aeabi_dmul>
 800b032:	4632      	mov	r2, r6
 800b034:	463b      	mov	r3, r7
 800b036:	f7f5 f897 	bl	8000168 <__aeabi_dsub>
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	4606      	mov	r6, r0
 800b040:	460f      	mov	r7, r1
 800b042:	4650      	mov	r0, sl
 800b044:	4659      	mov	r1, fp
 800b046:	f7f5 f88f 	bl	8000168 <__aeabi_dsub>
 800b04a:	9a05      	ldr	r2, [sp, #20]
 800b04c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	2b31      	cmp	r3, #49	; 0x31
 800b054:	dc06      	bgt.n	800b064 <__ieee754_rem_pio2+0x26c>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	46d0      	mov	r8, sl
 800b05c:	46d9      	mov	r9, fp
 800b05e:	e9c4 2300 	strd	r2, r3, [r4]
 800b062:	e7a6      	b.n	800afb2 <__ieee754_rem_pio2+0x1ba>
 800b064:	a326      	add	r3, pc, #152	; (adr r3, 800b100 <__ieee754_rem_pio2+0x308>)
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b06e:	f7f5 fa33 	bl	80004d8 <__aeabi_dmul>
 800b072:	4606      	mov	r6, r0
 800b074:	460f      	mov	r7, r1
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4650      	mov	r0, sl
 800b07c:	4659      	mov	r1, fp
 800b07e:	f7f5 f873 	bl	8000168 <__aeabi_dsub>
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	4680      	mov	r8, r0
 800b088:	4689      	mov	r9, r1
 800b08a:	4650      	mov	r0, sl
 800b08c:	4659      	mov	r1, fp
 800b08e:	f7f5 f86b 	bl	8000168 <__aeabi_dsub>
 800b092:	4632      	mov	r2, r6
 800b094:	463b      	mov	r3, r7
 800b096:	f7f5 f867 	bl	8000168 <__aeabi_dsub>
 800b09a:	a31b      	add	r3, pc, #108	; (adr r3, 800b108 <__ieee754_rem_pio2+0x310>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	460f      	mov	r7, r1
 800b0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a8:	f7f5 fa16 	bl	80004d8 <__aeabi_dmul>
 800b0ac:	4632      	mov	r2, r6
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	f7f5 f85a 	bl	8000168 <__aeabi_dsub>
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	460f      	mov	r7, r1
 800b0b8:	e75e      	b.n	800af78 <__ieee754_rem_pio2+0x180>
 800b0ba:	4a1b      	ldr	r2, [pc, #108]	; (800b128 <__ieee754_rem_pio2+0x330>)
 800b0bc:	4592      	cmp	sl, r2
 800b0be:	dd35      	ble.n	800b12c <__ieee754_rem_pio2+0x334>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	f7f5 f850 	bl	8000168 <__aeabi_dsub>
 800b0c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b0cc:	e9c4 0100 	strd	r0, r1, [r4]
 800b0d0:	e6a2      	b.n	800ae18 <__ieee754_rem_pio2+0x20>
 800b0d2:	bf00      	nop
 800b0d4:	f3af 8000 	nop.w
 800b0d8:	54400000 	.word	0x54400000
 800b0dc:	3ff921fb 	.word	0x3ff921fb
 800b0e0:	1a626331 	.word	0x1a626331
 800b0e4:	3dd0b461 	.word	0x3dd0b461
 800b0e8:	1a600000 	.word	0x1a600000
 800b0ec:	3dd0b461 	.word	0x3dd0b461
 800b0f0:	2e037073 	.word	0x2e037073
 800b0f4:	3ba3198a 	.word	0x3ba3198a
 800b0f8:	6dc9c883 	.word	0x6dc9c883
 800b0fc:	3fe45f30 	.word	0x3fe45f30
 800b100:	2e000000 	.word	0x2e000000
 800b104:	3ba3198a 	.word	0x3ba3198a
 800b108:	252049c1 	.word	0x252049c1
 800b10c:	397b839a 	.word	0x397b839a
 800b110:	3fe921fb 	.word	0x3fe921fb
 800b114:	4002d97b 	.word	0x4002d97b
 800b118:	3ff921fb 	.word	0x3ff921fb
 800b11c:	413921fb 	.word	0x413921fb
 800b120:	3fe00000 	.word	0x3fe00000
 800b124:	0800c3e0 	.word	0x0800c3e0
 800b128:	7fefffff 	.word	0x7fefffff
 800b12c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b130:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b134:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b138:	460f      	mov	r7, r1
 800b13a:	4606      	mov	r6, r0
 800b13c:	f7f5 fc7c 	bl	8000a38 <__aeabi_d2iz>
 800b140:	f7f5 f960 	bl	8000404 <__aeabi_i2d>
 800b144:	4602      	mov	r2, r0
 800b146:	460b      	mov	r3, r1
 800b148:	4630      	mov	r0, r6
 800b14a:	4639      	mov	r1, r7
 800b14c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b150:	f7f5 f80a 	bl	8000168 <__aeabi_dsub>
 800b154:	2200      	movs	r2, #0
 800b156:	4b1e      	ldr	r3, [pc, #120]	; (800b1d0 <__ieee754_rem_pio2+0x3d8>)
 800b158:	f7f5 f9be 	bl	80004d8 <__aeabi_dmul>
 800b15c:	460f      	mov	r7, r1
 800b15e:	4606      	mov	r6, r0
 800b160:	f7f5 fc6a 	bl	8000a38 <__aeabi_d2iz>
 800b164:	f7f5 f94e 	bl	8000404 <__aeabi_i2d>
 800b168:	4602      	mov	r2, r0
 800b16a:	460b      	mov	r3, r1
 800b16c:	4630      	mov	r0, r6
 800b16e:	4639      	mov	r1, r7
 800b170:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b174:	f7f4 fff8 	bl	8000168 <__aeabi_dsub>
 800b178:	2200      	movs	r2, #0
 800b17a:	4b15      	ldr	r3, [pc, #84]	; (800b1d0 <__ieee754_rem_pio2+0x3d8>)
 800b17c:	f7f5 f9ac 	bl	80004d8 <__aeabi_dmul>
 800b180:	f04f 0803 	mov.w	r8, #3
 800b184:	2600      	movs	r6, #0
 800b186:	2700      	movs	r7, #0
 800b188:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b18c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800b190:	4632      	mov	r2, r6
 800b192:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800b196:	463b      	mov	r3, r7
 800b198:	46c2      	mov	sl, r8
 800b19a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b19e:	f7f5 fc03 	bl	80009a8 <__aeabi_dcmpeq>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d1f4      	bne.n	800b190 <__ieee754_rem_pio2+0x398>
 800b1a6:	4b0b      	ldr	r3, [pc, #44]	; (800b1d4 <__ieee754_rem_pio2+0x3dc>)
 800b1a8:	462a      	mov	r2, r5
 800b1aa:	9301      	str	r3, [sp, #4]
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	a806      	add	r0, sp, #24
 800b1b4:	4653      	mov	r3, sl
 800b1b6:	f000 f979 	bl	800b4ac <__kernel_rem_pio2>
 800b1ba:	9b04      	ldr	r3, [sp, #16]
 800b1bc:	4605      	mov	r5, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f6bf ae51 	bge.w	800ae66 <__ieee754_rem_pio2+0x6e>
 800b1c4:	6863      	ldr	r3, [r4, #4]
 800b1c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b1ca:	6063      	str	r3, [r4, #4]
 800b1cc:	68e3      	ldr	r3, [r4, #12]
 800b1ce:	e707      	b.n	800afe0 <__ieee754_rem_pio2+0x1e8>
 800b1d0:	41700000 	.word	0x41700000
 800b1d4:	0800c460 	.word	0x0800c460

0800b1d8 <__ieee754_sqrt>:
 800b1d8:	f8df c150 	ldr.w	ip, [pc, #336]	; 800b32c <__ieee754_sqrt+0x154>
 800b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e0:	ea3c 0c01 	bics.w	ip, ip, r1
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	460a      	mov	r2, r1
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	d10e      	bne.n	800b210 <__ieee754_sqrt+0x38>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	f7f5 f970 	bl	80004d8 <__aeabi_dmul>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	4629      	mov	r1, r5
 800b200:	f7f4 ffb4 	bl	800016c <__adddf3>
 800b204:	4606      	mov	r6, r0
 800b206:	460d      	mov	r5, r1
 800b208:	4630      	mov	r0, r6
 800b20a:	4629      	mov	r1, r5
 800b20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b210:	2900      	cmp	r1, #0
 800b212:	dc0d      	bgt.n	800b230 <__ieee754_sqrt+0x58>
 800b214:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b218:	ea5c 0707 	orrs.w	r7, ip, r7
 800b21c:	d0f4      	beq.n	800b208 <__ieee754_sqrt+0x30>
 800b21e:	b139      	cbz	r1, 800b230 <__ieee754_sqrt+0x58>
 800b220:	4602      	mov	r2, r0
 800b222:	f7f4 ffa1 	bl	8000168 <__aeabi_dsub>
 800b226:	4602      	mov	r2, r0
 800b228:	460b      	mov	r3, r1
 800b22a:	f7f5 fa7f 	bl	800072c <__aeabi_ddiv>
 800b22e:	e7e9      	b.n	800b204 <__ieee754_sqrt+0x2c>
 800b230:	1512      	asrs	r2, r2, #20
 800b232:	d074      	beq.n	800b31e <__ieee754_sqrt+0x146>
 800b234:	2000      	movs	r0, #0
 800b236:	07d5      	lsls	r5, r2, #31
 800b238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b23c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800b240:	bf5e      	ittt	pl
 800b242:	0fe3      	lsrpl	r3, r4, #31
 800b244:	0064      	lslpl	r4, r4, #1
 800b246:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800b24a:	0fe3      	lsrs	r3, r4, #31
 800b24c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b250:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b254:	2516      	movs	r5, #22
 800b256:	4601      	mov	r1, r0
 800b258:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b25c:	1076      	asrs	r6, r6, #1
 800b25e:	0064      	lsls	r4, r4, #1
 800b260:	188f      	adds	r7, r1, r2
 800b262:	429f      	cmp	r7, r3
 800b264:	bfde      	ittt	le
 800b266:	1bdb      	suble	r3, r3, r7
 800b268:	18b9      	addle	r1, r7, r2
 800b26a:	1880      	addle	r0, r0, r2
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	3d01      	subs	r5, #1
 800b270:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b274:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b278:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b27c:	d1f0      	bne.n	800b260 <__ieee754_sqrt+0x88>
 800b27e:	462a      	mov	r2, r5
 800b280:	f04f 0e20 	mov.w	lr, #32
 800b284:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b288:	428b      	cmp	r3, r1
 800b28a:	eb07 0c05 	add.w	ip, r7, r5
 800b28e:	dc02      	bgt.n	800b296 <__ieee754_sqrt+0xbe>
 800b290:	d113      	bne.n	800b2ba <__ieee754_sqrt+0xe2>
 800b292:	45a4      	cmp	ip, r4
 800b294:	d811      	bhi.n	800b2ba <__ieee754_sqrt+0xe2>
 800b296:	f1bc 0f00 	cmp.w	ip, #0
 800b29a:	eb0c 0507 	add.w	r5, ip, r7
 800b29e:	da43      	bge.n	800b328 <__ieee754_sqrt+0x150>
 800b2a0:	2d00      	cmp	r5, #0
 800b2a2:	db41      	blt.n	800b328 <__ieee754_sqrt+0x150>
 800b2a4:	f101 0801 	add.w	r8, r1, #1
 800b2a8:	1a5b      	subs	r3, r3, r1
 800b2aa:	4641      	mov	r1, r8
 800b2ac:	45a4      	cmp	ip, r4
 800b2ae:	bf88      	it	hi
 800b2b0:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800b2b4:	eba4 040c 	sub.w	r4, r4, ip
 800b2b8:	443a      	add	r2, r7
 800b2ba:	005b      	lsls	r3, r3, #1
 800b2bc:	f1be 0e01 	subs.w	lr, lr, #1
 800b2c0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b2c4:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800b2c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b2cc:	d1dc      	bne.n	800b288 <__ieee754_sqrt+0xb0>
 800b2ce:	4323      	orrs	r3, r4
 800b2d0:	d006      	beq.n	800b2e0 <__ieee754_sqrt+0x108>
 800b2d2:	1c54      	adds	r4, r2, #1
 800b2d4:	bf0b      	itete	eq
 800b2d6:	4672      	moveq	r2, lr
 800b2d8:	3201      	addne	r2, #1
 800b2da:	3001      	addeq	r0, #1
 800b2dc:	f022 0201 	bicne.w	r2, r2, #1
 800b2e0:	1043      	asrs	r3, r0, #1
 800b2e2:	07c1      	lsls	r1, r0, #31
 800b2e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b2e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b2ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b2f0:	bf48      	it	mi
 800b2f2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b2f6:	4610      	mov	r0, r2
 800b2f8:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800b2fc:	e782      	b.n	800b204 <__ieee754_sqrt+0x2c>
 800b2fe:	0ae3      	lsrs	r3, r4, #11
 800b300:	3915      	subs	r1, #21
 800b302:	0564      	lsls	r4, r4, #21
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0fa      	beq.n	800b2fe <__ieee754_sqrt+0x126>
 800b308:	02de      	lsls	r6, r3, #11
 800b30a:	d50a      	bpl.n	800b322 <__ieee754_sqrt+0x14a>
 800b30c:	f1c2 0020 	rsb	r0, r2, #32
 800b310:	fa24 f000 	lsr.w	r0, r4, r0
 800b314:	1e55      	subs	r5, r2, #1
 800b316:	4094      	lsls	r4, r2
 800b318:	4303      	orrs	r3, r0
 800b31a:	1b4a      	subs	r2, r1, r5
 800b31c:	e78a      	b.n	800b234 <__ieee754_sqrt+0x5c>
 800b31e:	4611      	mov	r1, r2
 800b320:	e7f0      	b.n	800b304 <__ieee754_sqrt+0x12c>
 800b322:	005b      	lsls	r3, r3, #1
 800b324:	3201      	adds	r2, #1
 800b326:	e7ef      	b.n	800b308 <__ieee754_sqrt+0x130>
 800b328:	4688      	mov	r8, r1
 800b32a:	e7bd      	b.n	800b2a8 <__ieee754_sqrt+0xd0>
 800b32c:	7ff00000 	.word	0x7ff00000

0800b330 <__kernel_cos>:
 800b330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b338:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b33c:	4680      	mov	r8, r0
 800b33e:	460f      	mov	r7, r1
 800b340:	e9cd 2300 	strd	r2, r3, [sp]
 800b344:	da04      	bge.n	800b350 <__kernel_cos+0x20>
 800b346:	f7f5 fb77 	bl	8000a38 <__aeabi_d2iz>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	f000 8086 	beq.w	800b45c <__kernel_cos+0x12c>
 800b350:	4642      	mov	r2, r8
 800b352:	463b      	mov	r3, r7
 800b354:	4640      	mov	r0, r8
 800b356:	4639      	mov	r1, r7
 800b358:	f7f5 f8be 	bl	80004d8 <__aeabi_dmul>
 800b35c:	2200      	movs	r2, #0
 800b35e:	4b4e      	ldr	r3, [pc, #312]	; (800b498 <__kernel_cos+0x168>)
 800b360:	4604      	mov	r4, r0
 800b362:	460d      	mov	r5, r1
 800b364:	f7f5 f8b8 	bl	80004d8 <__aeabi_dmul>
 800b368:	a33f      	add	r3, pc, #252	; (adr r3, 800b468 <__kernel_cos+0x138>)
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	4682      	mov	sl, r0
 800b370:	468b      	mov	fp, r1
 800b372:	4620      	mov	r0, r4
 800b374:	4629      	mov	r1, r5
 800b376:	f7f5 f8af 	bl	80004d8 <__aeabi_dmul>
 800b37a:	a33d      	add	r3, pc, #244	; (adr r3, 800b470 <__kernel_cos+0x140>)
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	f7f4 fef4 	bl	800016c <__adddf3>
 800b384:	4622      	mov	r2, r4
 800b386:	462b      	mov	r3, r5
 800b388:	f7f5 f8a6 	bl	80004d8 <__aeabi_dmul>
 800b38c:	a33a      	add	r3, pc, #232	; (adr r3, 800b478 <__kernel_cos+0x148>)
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f7f4 fee9 	bl	8000168 <__aeabi_dsub>
 800b396:	4622      	mov	r2, r4
 800b398:	462b      	mov	r3, r5
 800b39a:	f7f5 f89d 	bl	80004d8 <__aeabi_dmul>
 800b39e:	a338      	add	r3, pc, #224	; (adr r3, 800b480 <__kernel_cos+0x150>)
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	f7f4 fee2 	bl	800016c <__adddf3>
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	462b      	mov	r3, r5
 800b3ac:	f7f5 f894 	bl	80004d8 <__aeabi_dmul>
 800b3b0:	a335      	add	r3, pc, #212	; (adr r3, 800b488 <__kernel_cos+0x158>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	f7f4 fed7 	bl	8000168 <__aeabi_dsub>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	462b      	mov	r3, r5
 800b3be:	f7f5 f88b 	bl	80004d8 <__aeabi_dmul>
 800b3c2:	a333      	add	r3, pc, #204	; (adr r3, 800b490 <__kernel_cos+0x160>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7f4 fed0 	bl	800016c <__adddf3>
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	462b      	mov	r3, r5
 800b3d0:	f7f5 f882 	bl	80004d8 <__aeabi_dmul>
 800b3d4:	4622      	mov	r2, r4
 800b3d6:	462b      	mov	r3, r5
 800b3d8:	f7f5 f87e 	bl	80004d8 <__aeabi_dmul>
 800b3dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	460d      	mov	r5, r1
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	4639      	mov	r1, r7
 800b3e8:	f7f5 f876 	bl	80004d8 <__aeabi_dmul>
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f7f4 feb8 	bl	8000168 <__aeabi_dsub>
 800b3f8:	4b28      	ldr	r3, [pc, #160]	; (800b49c <__kernel_cos+0x16c>)
 800b3fa:	4680      	mov	r8, r0
 800b3fc:	429e      	cmp	r6, r3
 800b3fe:	4689      	mov	r9, r1
 800b400:	dc0e      	bgt.n	800b420 <__kernel_cos+0xf0>
 800b402:	4602      	mov	r2, r0
 800b404:	460b      	mov	r3, r1
 800b406:	4650      	mov	r0, sl
 800b408:	4659      	mov	r1, fp
 800b40a:	f7f4 fead 	bl	8000168 <__aeabi_dsub>
 800b40e:	4602      	mov	r2, r0
 800b410:	2000      	movs	r0, #0
 800b412:	460b      	mov	r3, r1
 800b414:	4922      	ldr	r1, [pc, #136]	; (800b4a0 <__kernel_cos+0x170>)
 800b416:	f7f4 fea7 	bl	8000168 <__aeabi_dsub>
 800b41a:	b003      	add	sp, #12
 800b41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b420:	2400      	movs	r4, #0
 800b422:	4b20      	ldr	r3, [pc, #128]	; (800b4a4 <__kernel_cos+0x174>)
 800b424:	4622      	mov	r2, r4
 800b426:	429e      	cmp	r6, r3
 800b428:	bfcc      	ite	gt
 800b42a:	4d1f      	ldrgt	r5, [pc, #124]	; (800b4a8 <__kernel_cos+0x178>)
 800b42c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b430:	462b      	mov	r3, r5
 800b432:	2000      	movs	r0, #0
 800b434:	491a      	ldr	r1, [pc, #104]	; (800b4a0 <__kernel_cos+0x170>)
 800b436:	f7f4 fe97 	bl	8000168 <__aeabi_dsub>
 800b43a:	4622      	mov	r2, r4
 800b43c:	4606      	mov	r6, r0
 800b43e:	460f      	mov	r7, r1
 800b440:	462b      	mov	r3, r5
 800b442:	4650      	mov	r0, sl
 800b444:	4659      	mov	r1, fp
 800b446:	f7f4 fe8f 	bl	8000168 <__aeabi_dsub>
 800b44a:	4642      	mov	r2, r8
 800b44c:	464b      	mov	r3, r9
 800b44e:	f7f4 fe8b 	bl	8000168 <__aeabi_dsub>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4630      	mov	r0, r6
 800b458:	4639      	mov	r1, r7
 800b45a:	e7dc      	b.n	800b416 <__kernel_cos+0xe6>
 800b45c:	2000      	movs	r0, #0
 800b45e:	4910      	ldr	r1, [pc, #64]	; (800b4a0 <__kernel_cos+0x170>)
 800b460:	e7db      	b.n	800b41a <__kernel_cos+0xea>
 800b462:	bf00      	nop
 800b464:	f3af 8000 	nop.w
 800b468:	be8838d4 	.word	0xbe8838d4
 800b46c:	bda8fae9 	.word	0xbda8fae9
 800b470:	bdb4b1c4 	.word	0xbdb4b1c4
 800b474:	3e21ee9e 	.word	0x3e21ee9e
 800b478:	809c52ad 	.word	0x809c52ad
 800b47c:	3e927e4f 	.word	0x3e927e4f
 800b480:	19cb1590 	.word	0x19cb1590
 800b484:	3efa01a0 	.word	0x3efa01a0
 800b488:	16c15177 	.word	0x16c15177
 800b48c:	3f56c16c 	.word	0x3f56c16c
 800b490:	5555554c 	.word	0x5555554c
 800b494:	3fa55555 	.word	0x3fa55555
 800b498:	3fe00000 	.word	0x3fe00000
 800b49c:	3fd33332 	.word	0x3fd33332
 800b4a0:	3ff00000 	.word	0x3ff00000
 800b4a4:	3fe90000 	.word	0x3fe90000
 800b4a8:	3fd20000 	.word	0x3fd20000

0800b4ac <__kernel_rem_pio2>:
 800b4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b4b4:	9308      	str	r3, [sp, #32]
 800b4b6:	9101      	str	r1, [sp, #4]
 800b4b8:	4bc0      	ldr	r3, [pc, #768]	; (800b7bc <__kernel_rem_pio2+0x310>)
 800b4ba:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b4bc:	f112 0f14 	cmn.w	r2, #20
 800b4c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4c4:	bfa8      	it	ge
 800b4c6:	1ed4      	subge	r4, r2, #3
 800b4c8:	9304      	str	r3, [sp, #16]
 800b4ca:	9b08      	ldr	r3, [sp, #32]
 800b4cc:	bfb8      	it	lt
 800b4ce:	2400      	movlt	r4, #0
 800b4d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b4d4:	9306      	str	r3, [sp, #24]
 800b4d6:	bfa4      	itt	ge
 800b4d8:	2318      	movge	r3, #24
 800b4da:	fb94 f4f3 	sdivge	r4, r4, r3
 800b4de:	f06f 0317 	mvn.w	r3, #23
 800b4e2:	fb04 3303 	mla	r3, r4, r3, r3
 800b4e6:	eb03 0a02 	add.w	sl, r3, r2
 800b4ea:	9a06      	ldr	r2, [sp, #24]
 800b4ec:	9b04      	ldr	r3, [sp, #16]
 800b4ee:	1aa7      	subs	r7, r4, r2
 800b4f0:	eb03 0802 	add.w	r8, r3, r2
 800b4f4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b4f6:	2500      	movs	r5, #0
 800b4f8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	2300      	movs	r3, #0
 800b500:	9009      	str	r0, [sp, #36]	; 0x24
 800b502:	ae20      	add	r6, sp, #128	; 0x80
 800b504:	4545      	cmp	r5, r8
 800b506:	dd19      	ble.n	800b53c <__kernel_rem_pio2+0x90>
 800b508:	9b08      	ldr	r3, [sp, #32]
 800b50a:	aa20      	add	r2, sp, #128	; 0x80
 800b50c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b510:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b514:	f1c3 0301 	rsb	r3, r3, #1
 800b518:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800b51c:	9307      	str	r3, [sp, #28]
 800b51e:	9b07      	ldr	r3, [sp, #28]
 800b520:	9a04      	ldr	r2, [sp, #16]
 800b522:	4443      	add	r3, r8
 800b524:	429a      	cmp	r2, r3
 800b526:	db35      	blt.n	800b594 <__kernel_rem_pio2+0xe8>
 800b528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52a:	2200      	movs	r2, #0
 800b52c:	f1a3 0908 	sub.w	r9, r3, #8
 800b530:	2300      	movs	r3, #0
 800b532:	462f      	mov	r7, r5
 800b534:	2600      	movs	r6, #0
 800b536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b53a:	e01f      	b.n	800b57c <__kernel_rem_pio2+0xd0>
 800b53c:	42ef      	cmn	r7, r5
 800b53e:	d40b      	bmi.n	800b558 <__kernel_rem_pio2+0xac>
 800b540:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b548:	f7f4 ff5c 	bl	8000404 <__aeabi_i2d>
 800b54c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b550:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b554:	3501      	adds	r5, #1
 800b556:	e7d5      	b.n	800b504 <__kernel_rem_pio2+0x58>
 800b558:	4610      	mov	r0, r2
 800b55a:	4619      	mov	r1, r3
 800b55c:	e7f8      	b.n	800b550 <__kernel_rem_pio2+0xa4>
 800b55e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b562:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b566:	f7f4 ffb7 	bl	80004d8 <__aeabi_dmul>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b572:	f7f4 fdfb 	bl	800016c <__adddf3>
 800b576:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b57a:	3601      	adds	r6, #1
 800b57c:	9b06      	ldr	r3, [sp, #24]
 800b57e:	3f08      	subs	r7, #8
 800b580:	429e      	cmp	r6, r3
 800b582:	ddec      	ble.n	800b55e <__kernel_rem_pio2+0xb2>
 800b584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b588:	3508      	adds	r5, #8
 800b58a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800b58e:	f108 0801 	add.w	r8, r8, #1
 800b592:	e7c4      	b.n	800b51e <__kernel_rem_pio2+0x72>
 800b594:	9b04      	ldr	r3, [sp, #16]
 800b596:	aa0c      	add	r2, sp, #48	; 0x30
 800b598:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b59c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b59e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b5a0:	9f04      	ldr	r7, [sp, #16]
 800b5a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b5a8:	463e      	mov	r6, r7
 800b5aa:	ab98      	add	r3, sp, #608	; 0x260
 800b5ac:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800b5b0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5b4:	f8cd b008 	str.w	fp, [sp, #8]
 800b5b8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800b5bc:	2e00      	cmp	r6, #0
 800b5be:	dc71      	bgt.n	800b6a4 <__kernel_rem_pio2+0x1f8>
 800b5c0:	4652      	mov	r2, sl
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	f000 fbf3 	bl	800bdb0 <scalbn>
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	460d      	mov	r5, r1
 800b5d4:	f7f4 ff80 	bl	80004d8 <__aeabi_dmul>
 800b5d8:	f000 fb6a 	bl	800bcb0 <floor>
 800b5dc:	2200      	movs	r2, #0
 800b5de:	4b78      	ldr	r3, [pc, #480]	; (800b7c0 <__kernel_rem_pio2+0x314>)
 800b5e0:	f7f4 ff7a 	bl	80004d8 <__aeabi_dmul>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f7f4 fdbc 	bl	8000168 <__aeabi_dsub>
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	f7f5 fa20 	bl	8000a38 <__aeabi_d2iz>
 800b5f8:	9007      	str	r0, [sp, #28]
 800b5fa:	f7f4 ff03 	bl	8000404 <__aeabi_i2d>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	4620      	mov	r0, r4
 800b604:	4629      	mov	r1, r5
 800b606:	f7f4 fdaf 	bl	8000168 <__aeabi_dsub>
 800b60a:	f1ba 0f00 	cmp.w	sl, #0
 800b60e:	4680      	mov	r8, r0
 800b610:	4689      	mov	r9, r1
 800b612:	dd70      	ble.n	800b6f6 <__kernel_rem_pio2+0x24a>
 800b614:	1e7a      	subs	r2, r7, #1
 800b616:	ab0c      	add	r3, sp, #48	; 0x30
 800b618:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b61c:	9c07      	ldr	r4, [sp, #28]
 800b61e:	f1ca 0118 	rsb	r1, sl, #24
 800b622:	fa40 f301 	asr.w	r3, r0, r1
 800b626:	441c      	add	r4, r3
 800b628:	408b      	lsls	r3, r1
 800b62a:	1ac0      	subs	r0, r0, r3
 800b62c:	ab0c      	add	r3, sp, #48	; 0x30
 800b62e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b632:	f1ca 0317 	rsb	r3, sl, #23
 800b636:	9407      	str	r4, [sp, #28]
 800b638:	fa40 f303 	asr.w	r3, r0, r3
 800b63c:	9302      	str	r3, [sp, #8]
 800b63e:	9b02      	ldr	r3, [sp, #8]
 800b640:	2b00      	cmp	r3, #0
 800b642:	dd66      	ble.n	800b712 <__kernel_rem_pio2+0x266>
 800b644:	2200      	movs	r2, #0
 800b646:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b64a:	4614      	mov	r4, r2
 800b64c:	9b07      	ldr	r3, [sp, #28]
 800b64e:	3301      	adds	r3, #1
 800b650:	9307      	str	r3, [sp, #28]
 800b652:	4297      	cmp	r7, r2
 800b654:	f300 809f 	bgt.w	800b796 <__kernel_rem_pio2+0x2ea>
 800b658:	f1ba 0f00 	cmp.w	sl, #0
 800b65c:	dd07      	ble.n	800b66e <__kernel_rem_pio2+0x1c2>
 800b65e:	f1ba 0f01 	cmp.w	sl, #1
 800b662:	f000 80b9 	beq.w	800b7d8 <__kernel_rem_pio2+0x32c>
 800b666:	f1ba 0f02 	cmp.w	sl, #2
 800b66a:	f000 80bf 	beq.w	800b7ec <__kernel_rem_pio2+0x340>
 800b66e:	9b02      	ldr	r3, [sp, #8]
 800b670:	2b02      	cmp	r3, #2
 800b672:	d14e      	bne.n	800b712 <__kernel_rem_pio2+0x266>
 800b674:	4642      	mov	r2, r8
 800b676:	464b      	mov	r3, r9
 800b678:	2000      	movs	r0, #0
 800b67a:	4952      	ldr	r1, [pc, #328]	; (800b7c4 <__kernel_rem_pio2+0x318>)
 800b67c:	f7f4 fd74 	bl	8000168 <__aeabi_dsub>
 800b680:	4680      	mov	r8, r0
 800b682:	4689      	mov	r9, r1
 800b684:	2c00      	cmp	r4, #0
 800b686:	d044      	beq.n	800b712 <__kernel_rem_pio2+0x266>
 800b688:	4652      	mov	r2, sl
 800b68a:	2000      	movs	r0, #0
 800b68c:	494d      	ldr	r1, [pc, #308]	; (800b7c4 <__kernel_rem_pio2+0x318>)
 800b68e:	f000 fb8f 	bl	800bdb0 <scalbn>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	4640      	mov	r0, r8
 800b698:	4649      	mov	r1, r9
 800b69a:	f7f4 fd65 	bl	8000168 <__aeabi_dsub>
 800b69e:	4680      	mov	r8, r0
 800b6a0:	4689      	mov	r9, r1
 800b6a2:	e036      	b.n	800b712 <__kernel_rem_pio2+0x266>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4b48      	ldr	r3, [pc, #288]	; (800b7c8 <__kernel_rem_pio2+0x31c>)
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	f7f4 ff14 	bl	80004d8 <__aeabi_dmul>
 800b6b0:	f7f5 f9c2 	bl	8000a38 <__aeabi_d2iz>
 800b6b4:	f7f4 fea6 	bl	8000404 <__aeabi_i2d>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	4b44      	ldr	r3, [pc, #272]	; (800b7cc <__kernel_rem_pio2+0x320>)
 800b6bc:	4680      	mov	r8, r0
 800b6be:	4689      	mov	r9, r1
 800b6c0:	f7f4 ff0a 	bl	80004d8 <__aeabi_dmul>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f4 fd4c 	bl	8000168 <__aeabi_dsub>
 800b6d0:	f7f5 f9b2 	bl	8000a38 <__aeabi_d2iz>
 800b6d4:	9b02      	ldr	r3, [sp, #8]
 800b6d6:	3e01      	subs	r6, #1
 800b6d8:	f843 0b04 	str.w	r0, [r3], #4
 800b6dc:	9302      	str	r3, [sp, #8]
 800b6de:	ab70      	add	r3, sp, #448	; 0x1c0
 800b6e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	f7f4 fd3e 	bl	800016c <__adddf3>
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	460d      	mov	r5, r1
 800b6f4:	e762      	b.n	800b5bc <__kernel_rem_pio2+0x110>
 800b6f6:	d105      	bne.n	800b704 <__kernel_rem_pio2+0x258>
 800b6f8:	1e7b      	subs	r3, r7, #1
 800b6fa:	aa0c      	add	r2, sp, #48	; 0x30
 800b6fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b700:	15c3      	asrs	r3, r0, #23
 800b702:	e79b      	b.n	800b63c <__kernel_rem_pio2+0x190>
 800b704:	2200      	movs	r2, #0
 800b706:	4b32      	ldr	r3, [pc, #200]	; (800b7d0 <__kernel_rem_pio2+0x324>)
 800b708:	f7f5 f96c 	bl	80009e4 <__aeabi_dcmpge>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d13f      	bne.n	800b790 <__kernel_rem_pio2+0x2e4>
 800b710:	9002      	str	r0, [sp, #8]
 800b712:	2200      	movs	r2, #0
 800b714:	2300      	movs	r3, #0
 800b716:	4640      	mov	r0, r8
 800b718:	4649      	mov	r1, r9
 800b71a:	f7f5 f945 	bl	80009a8 <__aeabi_dcmpeq>
 800b71e:	2800      	cmp	r0, #0
 800b720:	f000 80b5 	beq.w	800b88e <__kernel_rem_pio2+0x3e2>
 800b724:	1e7c      	subs	r4, r7, #1
 800b726:	4623      	mov	r3, r4
 800b728:	2200      	movs	r2, #0
 800b72a:	9904      	ldr	r1, [sp, #16]
 800b72c:	428b      	cmp	r3, r1
 800b72e:	da64      	bge.n	800b7fa <__kernel_rem_pio2+0x34e>
 800b730:	2a00      	cmp	r2, #0
 800b732:	d078      	beq.n	800b826 <__kernel_rem_pio2+0x37a>
 800b734:	ab0c      	add	r3, sp, #48	; 0x30
 800b736:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b73a:	f1aa 0a18 	sub.w	sl, sl, #24
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f000 80a3 	beq.w	800b88a <__kernel_rem_pio2+0x3de>
 800b744:	4652      	mov	r2, sl
 800b746:	2000      	movs	r0, #0
 800b748:	491e      	ldr	r1, [pc, #120]	; (800b7c4 <__kernel_rem_pio2+0x318>)
 800b74a:	f000 fb31 	bl	800bdb0 <scalbn>
 800b74e:	46a2      	mov	sl, r4
 800b750:	4606      	mov	r6, r0
 800b752:	460f      	mov	r7, r1
 800b754:	f04f 0800 	mov.w	r8, #0
 800b758:	00e3      	lsls	r3, r4, #3
 800b75a:	9306      	str	r3, [sp, #24]
 800b75c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800b7c8 <__kernel_rem_pio2+0x31c>
 800b760:	ab70      	add	r3, sp, #448	; 0x1c0
 800b762:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800b766:	f1ba 0f00 	cmp.w	sl, #0
 800b76a:	f280 80c6 	bge.w	800b8fa <__kernel_rem_pio2+0x44e>
 800b76e:	4627      	mov	r7, r4
 800b770:	f04f 0800 	mov.w	r8, #0
 800b774:	2f00      	cmp	r7, #0
 800b776:	f2c0 80f3 	blt.w	800b960 <__kernel_rem_pio2+0x4b4>
 800b77a:	4b16      	ldr	r3, [pc, #88]	; (800b7d4 <__kernel_rem_pio2+0x328>)
 800b77c:	f04f 0a00 	mov.w	sl, #0
 800b780:	461d      	mov	r5, r3
 800b782:	ab70      	add	r3, sp, #448	; 0x1c0
 800b784:	f04f 0b00 	mov.w	fp, #0
 800b788:	2600      	movs	r6, #0
 800b78a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b78e:	e0d9      	b.n	800b944 <__kernel_rem_pio2+0x498>
 800b790:	2302      	movs	r3, #2
 800b792:	9302      	str	r3, [sp, #8]
 800b794:	e756      	b.n	800b644 <__kernel_rem_pio2+0x198>
 800b796:	f8db 3000 	ldr.w	r3, [fp]
 800b79a:	b954      	cbnz	r4, 800b7b2 <__kernel_rem_pio2+0x306>
 800b79c:	b123      	cbz	r3, 800b7a8 <__kernel_rem_pio2+0x2fc>
 800b79e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b7a2:	f8cb 3000 	str.w	r3, [fp]
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	461c      	mov	r4, r3
 800b7aa:	3201      	adds	r2, #1
 800b7ac:	f10b 0b04 	add.w	fp, fp, #4
 800b7b0:	e74f      	b.n	800b652 <__kernel_rem_pio2+0x1a6>
 800b7b2:	1acb      	subs	r3, r1, r3
 800b7b4:	f8cb 3000 	str.w	r3, [fp]
 800b7b8:	4623      	mov	r3, r4
 800b7ba:	e7f5      	b.n	800b7a8 <__kernel_rem_pio2+0x2fc>
 800b7bc:	0800c5a8 	.word	0x0800c5a8
 800b7c0:	40200000 	.word	0x40200000
 800b7c4:	3ff00000 	.word	0x3ff00000
 800b7c8:	3e700000 	.word	0x3e700000
 800b7cc:	41700000 	.word	0x41700000
 800b7d0:	3fe00000 	.word	0x3fe00000
 800b7d4:	0800c568 	.word	0x0800c568
 800b7d8:	1e7a      	subs	r2, r7, #1
 800b7da:	ab0c      	add	r3, sp, #48	; 0x30
 800b7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b7e4:	a90c      	add	r1, sp, #48	; 0x30
 800b7e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b7ea:	e740      	b.n	800b66e <__kernel_rem_pio2+0x1c2>
 800b7ec:	1e7a      	subs	r2, r7, #1
 800b7ee:	ab0c      	add	r3, sp, #48	; 0x30
 800b7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b7f8:	e7f4      	b.n	800b7e4 <__kernel_rem_pio2+0x338>
 800b7fa:	a90c      	add	r1, sp, #48	; 0x30
 800b7fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b800:	3b01      	subs	r3, #1
 800b802:	430a      	orrs	r2, r1
 800b804:	e791      	b.n	800b72a <__kernel_rem_pio2+0x27e>
 800b806:	3401      	adds	r4, #1
 800b808:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b80c:	2a00      	cmp	r2, #0
 800b80e:	d0fa      	beq.n	800b806 <__kernel_rem_pio2+0x35a>
 800b810:	9b08      	ldr	r3, [sp, #32]
 800b812:	1c7e      	adds	r6, r7, #1
 800b814:	18fd      	adds	r5, r7, r3
 800b816:	ab20      	add	r3, sp, #128	; 0x80
 800b818:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b81c:	443c      	add	r4, r7
 800b81e:	42b4      	cmp	r4, r6
 800b820:	da04      	bge.n	800b82c <__kernel_rem_pio2+0x380>
 800b822:	4627      	mov	r7, r4
 800b824:	e6c0      	b.n	800b5a8 <__kernel_rem_pio2+0xfc>
 800b826:	2401      	movs	r4, #1
 800b828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b82a:	e7ed      	b.n	800b808 <__kernel_rem_pio2+0x35c>
 800b82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b82e:	462f      	mov	r7, r5
 800b830:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b834:	f7f4 fde6 	bl	8000404 <__aeabi_i2d>
 800b838:	f04f 0b00 	mov.w	fp, #0
 800b83c:	f04f 0800 	mov.w	r8, #0
 800b840:	f04f 0900 	mov.w	r9, #0
 800b844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b846:	e8e7 0102 	strd	r0, r1, [r7], #8
 800b84a:	3b08      	subs	r3, #8
 800b84c:	9302      	str	r3, [sp, #8]
 800b84e:	9b06      	ldr	r3, [sp, #24]
 800b850:	459b      	cmp	fp, r3
 800b852:	dd07      	ble.n	800b864 <__kernel_rem_pio2+0x3b8>
 800b854:	ab70      	add	r3, sp, #448	; 0x1c0
 800b856:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b85a:	463d      	mov	r5, r7
 800b85c:	e9c3 8900 	strd	r8, r9, [r3]
 800b860:	3601      	adds	r6, #1
 800b862:	e7dc      	b.n	800b81e <__kernel_rem_pio2+0x372>
 800b864:	9902      	ldr	r1, [sp, #8]
 800b866:	f10b 0b01 	add.w	fp, fp, #1
 800b86a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b86e:	9102      	str	r1, [sp, #8]
 800b870:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800b874:	f7f4 fe30 	bl	80004d8 <__aeabi_dmul>
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
 800b87c:	4640      	mov	r0, r8
 800b87e:	4649      	mov	r1, r9
 800b880:	f7f4 fc74 	bl	800016c <__adddf3>
 800b884:	4680      	mov	r8, r0
 800b886:	4689      	mov	r9, r1
 800b888:	e7e1      	b.n	800b84e <__kernel_rem_pio2+0x3a2>
 800b88a:	3c01      	subs	r4, #1
 800b88c:	e752      	b.n	800b734 <__kernel_rem_pio2+0x288>
 800b88e:	f1ca 0200 	rsb	r2, sl, #0
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	f000 fa8b 	bl	800bdb0 <scalbn>
 800b89a:	2200      	movs	r2, #0
 800b89c:	4ba5      	ldr	r3, [pc, #660]	; (800bb34 <__kernel_rem_pio2+0x688>)
 800b89e:	4604      	mov	r4, r0
 800b8a0:	460d      	mov	r5, r1
 800b8a2:	f7f5 f89f 	bl	80009e4 <__aeabi_dcmpge>
 800b8a6:	b1f8      	cbz	r0, 800b8e8 <__kernel_rem_pio2+0x43c>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4ba3      	ldr	r3, [pc, #652]	; (800bb38 <__kernel_rem_pio2+0x68c>)
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	f7f4 fe12 	bl	80004d8 <__aeabi_dmul>
 800b8b4:	f7f5 f8c0 	bl	8000a38 <__aeabi_d2iz>
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	f7f4 fda3 	bl	8000404 <__aeabi_i2d>
 800b8be:	2200      	movs	r2, #0
 800b8c0:	4b9c      	ldr	r3, [pc, #624]	; (800bb34 <__kernel_rem_pio2+0x688>)
 800b8c2:	f7f4 fe09 	bl	80004d8 <__aeabi_dmul>
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f7f4 fc4b 	bl	8000168 <__aeabi_dsub>
 800b8d2:	f7f5 f8b1 	bl	8000a38 <__aeabi_d2iz>
 800b8d6:	1c7c      	adds	r4, r7, #1
 800b8d8:	ab0c      	add	r3, sp, #48	; 0x30
 800b8da:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b8de:	f10a 0a18 	add.w	sl, sl, #24
 800b8e2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800b8e6:	e72d      	b.n	800b744 <__kernel_rem_pio2+0x298>
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	f7f5 f8a4 	bl	8000a38 <__aeabi_d2iz>
 800b8f0:	ab0c      	add	r3, sp, #48	; 0x30
 800b8f2:	463c      	mov	r4, r7
 800b8f4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b8f8:	e724      	b.n	800b744 <__kernel_rem_pio2+0x298>
 800b8fa:	ab0c      	add	r3, sp, #48	; 0x30
 800b8fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b900:	f7f4 fd80 	bl	8000404 <__aeabi_i2d>
 800b904:	4632      	mov	r2, r6
 800b906:	463b      	mov	r3, r7
 800b908:	f7f4 fde6 	bl	80004d8 <__aeabi_dmul>
 800b90c:	4642      	mov	r2, r8
 800b90e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800b912:	464b      	mov	r3, r9
 800b914:	4630      	mov	r0, r6
 800b916:	4639      	mov	r1, r7
 800b918:	f7f4 fdde 	bl	80004d8 <__aeabi_dmul>
 800b91c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b920:	4606      	mov	r6, r0
 800b922:	460f      	mov	r7, r1
 800b924:	e71f      	b.n	800b766 <__kernel_rem_pio2+0x2ba>
 800b926:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b92a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b92e:	f7f4 fdd3 	bl	80004d8 <__aeabi_dmul>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4650      	mov	r0, sl
 800b938:	4659      	mov	r1, fp
 800b93a:	f7f4 fc17 	bl	800016c <__adddf3>
 800b93e:	4682      	mov	sl, r0
 800b940:	468b      	mov	fp, r1
 800b942:	3601      	adds	r6, #1
 800b944:	9b04      	ldr	r3, [sp, #16]
 800b946:	429e      	cmp	r6, r3
 800b948:	dc01      	bgt.n	800b94e <__kernel_rem_pio2+0x4a2>
 800b94a:	45b0      	cmp	r8, r6
 800b94c:	daeb      	bge.n	800b926 <__kernel_rem_pio2+0x47a>
 800b94e:	ab48      	add	r3, sp, #288	; 0x120
 800b950:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b954:	e9c3 ab00 	strd	sl, fp, [r3]
 800b958:	3f01      	subs	r7, #1
 800b95a:	f108 0801 	add.w	r8, r8, #1
 800b95e:	e709      	b.n	800b774 <__kernel_rem_pio2+0x2c8>
 800b960:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b962:	2b02      	cmp	r3, #2
 800b964:	dc09      	bgt.n	800b97a <__kernel_rem_pio2+0x4ce>
 800b966:	2b00      	cmp	r3, #0
 800b968:	dc34      	bgt.n	800b9d4 <__kernel_rem_pio2+0x528>
 800b96a:	d05e      	beq.n	800ba2a <__kernel_rem_pio2+0x57e>
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	f003 0007 	and.w	r0, r3, #7
 800b972:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d1f5      	bne.n	800b96c <__kernel_rem_pio2+0x4c0>
 800b980:	9a06      	ldr	r2, [sp, #24]
 800b982:	ab48      	add	r3, sp, #288	; 0x120
 800b984:	441a      	add	r2, r3
 800b986:	4615      	mov	r5, r2
 800b988:	4692      	mov	sl, r2
 800b98a:	46a3      	mov	fp, r4
 800b98c:	f1bb 0f00 	cmp.w	fp, #0
 800b990:	dc7a      	bgt.n	800ba88 <__kernel_rem_pio2+0x5dc>
 800b992:	46aa      	mov	sl, r5
 800b994:	46a3      	mov	fp, r4
 800b996:	f1bb 0f01 	cmp.w	fp, #1
 800b99a:	f300 8094 	bgt.w	800bac6 <__kernel_rem_pio2+0x61a>
 800b99e:	2700      	movs	r7, #0
 800b9a0:	463e      	mov	r6, r7
 800b9a2:	2c01      	cmp	r4, #1
 800b9a4:	f300 80ae 	bgt.w	800bb04 <__kernel_rem_pio2+0x658>
 800b9a8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800b9ac:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800b9b0:	9b02      	ldr	r3, [sp, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f040 80b0 	bne.w	800bb18 <__kernel_rem_pio2+0x66c>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	462a      	mov	r2, r5
 800b9bc:	9801      	ldr	r0, [sp, #4]
 800b9be:	e9c0 2300 	strd	r2, r3, [r0]
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b9ca:	463a      	mov	r2, r7
 800b9cc:	4633      	mov	r3, r6
 800b9ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b9d2:	e7cb      	b.n	800b96c <__kernel_rem_pio2+0x4c0>
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	9a06      	ldr	r2, [sp, #24]
 800b9d8:	ab48      	add	r3, sp, #288	; 0x120
 800b9da:	441a      	add	r2, r3
 800b9dc:	4615      	mov	r5, r2
 800b9de:	46a0      	mov	r8, r4
 800b9e0:	4601      	mov	r1, r0
 800b9e2:	f1b8 0f00 	cmp.w	r8, #0
 800b9e6:	da3c      	bge.n	800ba62 <__kernel_rem_pio2+0x5b6>
 800b9e8:	9b02      	ldr	r3, [sp, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d040      	beq.n	800ba70 <__kernel_rem_pio2+0x5c4>
 800b9ee:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	462b      	mov	r3, r5
 800b9f6:	9d01      	ldr	r5, [sp, #4]
 800b9f8:	2601      	movs	r6, #1
 800b9fa:	e9c5 2300 	strd	r2, r3, [r5]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ba04:	f7f4 fbb0 	bl	8000168 <__aeabi_dsub>
 800ba08:	4684      	mov	ip, r0
 800ba0a:	460f      	mov	r7, r1
 800ba0c:	ad48      	add	r5, sp, #288	; 0x120
 800ba0e:	42b4      	cmp	r4, r6
 800ba10:	f105 0508 	add.w	r5, r5, #8
 800ba14:	da2e      	bge.n	800ba74 <__kernel_rem_pio2+0x5c8>
 800ba16:	9b02      	ldr	r3, [sp, #8]
 800ba18:	b10b      	cbz	r3, 800ba1e <__kernel_rem_pio2+0x572>
 800ba1a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ba1e:	4662      	mov	r2, ip
 800ba20:	463b      	mov	r3, r7
 800ba22:	9901      	ldr	r1, [sp, #4]
 800ba24:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ba28:	e7a0      	b.n	800b96c <__kernel_rem_pio2+0x4c0>
 800ba2a:	9a06      	ldr	r2, [sp, #24]
 800ba2c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ba2e:	ab48      	add	r3, sp, #288	; 0x120
 800ba30:	441a      	add	r2, r3
 800ba32:	4615      	mov	r5, r2
 800ba34:	4637      	mov	r7, r6
 800ba36:	2c00      	cmp	r4, #0
 800ba38:	da09      	bge.n	800ba4e <__kernel_rem_pio2+0x5a2>
 800ba3a:	9b02      	ldr	r3, [sp, #8]
 800ba3c:	b10b      	cbz	r3, 800ba42 <__kernel_rem_pio2+0x596>
 800ba3e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ba42:	4632      	mov	r2, r6
 800ba44:	463b      	mov	r3, r7
 800ba46:	9901      	ldr	r1, [sp, #4]
 800ba48:	e9c1 2300 	strd	r2, r3, [r1]
 800ba4c:	e78e      	b.n	800b96c <__kernel_rem_pio2+0x4c0>
 800ba4e:	4630      	mov	r0, r6
 800ba50:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ba54:	4639      	mov	r1, r7
 800ba56:	f7f4 fb89 	bl	800016c <__adddf3>
 800ba5a:	3c01      	subs	r4, #1
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	460f      	mov	r7, r1
 800ba60:	e7e9      	b.n	800ba36 <__kernel_rem_pio2+0x58a>
 800ba62:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ba66:	f7f4 fb81 	bl	800016c <__adddf3>
 800ba6a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ba6e:	e7b8      	b.n	800b9e2 <__kernel_rem_pio2+0x536>
 800ba70:	460d      	mov	r5, r1
 800ba72:	e7be      	b.n	800b9f2 <__kernel_rem_pio2+0x546>
 800ba74:	4660      	mov	r0, ip
 800ba76:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba7a:	4639      	mov	r1, r7
 800ba7c:	f7f4 fb76 	bl	800016c <__adddf3>
 800ba80:	3601      	adds	r6, #1
 800ba82:	4684      	mov	ip, r0
 800ba84:	460f      	mov	r7, r1
 800ba86:	e7c2      	b.n	800ba0e <__kernel_rem_pio2+0x562>
 800ba88:	e9da 6700 	ldrd	r6, r7, [sl]
 800ba8c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ba90:	4632      	mov	r2, r6
 800ba92:	463b      	mov	r3, r7
 800ba94:	4640      	mov	r0, r8
 800ba96:	4649      	mov	r1, r9
 800ba98:	f7f4 fb68 	bl	800016c <__adddf3>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baa4:	4640      	mov	r0, r8
 800baa6:	4649      	mov	r1, r9
 800baa8:	f7f4 fb5e 	bl	8000168 <__aeabi_dsub>
 800baac:	4632      	mov	r2, r6
 800baae:	463b      	mov	r3, r7
 800bab0:	f7f4 fb5c 	bl	800016c <__adddf3>
 800bab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bab8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800babc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bac0:	e9ca 2300 	strd	r2, r3, [sl]
 800bac4:	e762      	b.n	800b98c <__kernel_rem_pio2+0x4e0>
 800bac6:	e9da 8900 	ldrd	r8, r9, [sl]
 800baca:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800bace:	4642      	mov	r2, r8
 800bad0:	464b      	mov	r3, r9
 800bad2:	4630      	mov	r0, r6
 800bad4:	4639      	mov	r1, r7
 800bad6:	f7f4 fb49 	bl	800016c <__adddf3>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bae2:	4630      	mov	r0, r6
 800bae4:	4639      	mov	r1, r7
 800bae6:	f7f4 fb3f 	bl	8000168 <__aeabi_dsub>
 800baea:	4642      	mov	r2, r8
 800baec:	464b      	mov	r3, r9
 800baee:	f7f4 fb3d 	bl	800016c <__adddf3>
 800baf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baf6:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bafa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bafe:	e9ca 2300 	strd	r2, r3, [sl]
 800bb02:	e748      	b.n	800b996 <__kernel_rem_pio2+0x4ea>
 800bb04:	4638      	mov	r0, r7
 800bb06:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	f7f4 fb2e 	bl	800016c <__adddf3>
 800bb10:	3c01      	subs	r4, #1
 800bb12:	4607      	mov	r7, r0
 800bb14:	460e      	mov	r6, r1
 800bb16:	e744      	b.n	800b9a2 <__kernel_rem_pio2+0x4f6>
 800bb18:	9b01      	ldr	r3, [sp, #4]
 800bb1a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bb1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bb22:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800bb26:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800bb2a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800bb2e:	601d      	str	r5, [r3, #0]
 800bb30:	615e      	str	r6, [r3, #20]
 800bb32:	e71b      	b.n	800b96c <__kernel_rem_pio2+0x4c0>
 800bb34:	41700000 	.word	0x41700000
 800bb38:	3e700000 	.word	0x3e700000
 800bb3c:	00000000 	.word	0x00000000

0800bb40 <__kernel_sin>:
 800bb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb44:	b086      	sub	sp, #24
 800bb46:	e9cd 2300 	strd	r2, r3, [sp]
 800bb4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bb52:	4682      	mov	sl, r0
 800bb54:	460c      	mov	r4, r1
 800bb56:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bb58:	da03      	bge.n	800bb62 <__kernel_sin+0x22>
 800bb5a:	f7f4 ff6d 	bl	8000a38 <__aeabi_d2iz>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d050      	beq.n	800bc04 <__kernel_sin+0xc4>
 800bb62:	4652      	mov	r2, sl
 800bb64:	4623      	mov	r3, r4
 800bb66:	4650      	mov	r0, sl
 800bb68:	4621      	mov	r1, r4
 800bb6a:	f7f4 fcb5 	bl	80004d8 <__aeabi_dmul>
 800bb6e:	4606      	mov	r6, r0
 800bb70:	460f      	mov	r7, r1
 800bb72:	4602      	mov	r2, r0
 800bb74:	460b      	mov	r3, r1
 800bb76:	4650      	mov	r0, sl
 800bb78:	4621      	mov	r1, r4
 800bb7a:	f7f4 fcad 	bl	80004d8 <__aeabi_dmul>
 800bb7e:	a33e      	add	r3, pc, #248	; (adr r3, 800bc78 <__kernel_sin+0x138>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	4630      	mov	r0, r6
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 fca4 	bl	80004d8 <__aeabi_dmul>
 800bb90:	a33b      	add	r3, pc, #236	; (adr r3, 800bc80 <__kernel_sin+0x140>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fae7 	bl	8000168 <__aeabi_dsub>
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	f7f4 fc9b 	bl	80004d8 <__aeabi_dmul>
 800bba2:	a339      	add	r3, pc, #228	; (adr r3, 800bc88 <__kernel_sin+0x148>)
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f7f4 fae0 	bl	800016c <__adddf3>
 800bbac:	4632      	mov	r2, r6
 800bbae:	463b      	mov	r3, r7
 800bbb0:	f7f4 fc92 	bl	80004d8 <__aeabi_dmul>
 800bbb4:	a336      	add	r3, pc, #216	; (adr r3, 800bc90 <__kernel_sin+0x150>)
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	f7f4 fad5 	bl	8000168 <__aeabi_dsub>
 800bbbe:	4632      	mov	r2, r6
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	f7f4 fc89 	bl	80004d8 <__aeabi_dmul>
 800bbc6:	a334      	add	r3, pc, #208	; (adr r3, 800bc98 <__kernel_sin+0x158>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f7f4 face 	bl	800016c <__adddf3>
 800bbd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbd4:	b9dd      	cbnz	r5, 800bc0e <__kernel_sin+0xce>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fc7b 	bl	80004d8 <__aeabi_dmul>
 800bbe2:	a32f      	add	r3, pc, #188	; (adr r3, 800bca0 <__kernel_sin+0x160>)
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	f7f4 fabe 	bl	8000168 <__aeabi_dsub>
 800bbec:	4642      	mov	r2, r8
 800bbee:	464b      	mov	r3, r9
 800bbf0:	f7f4 fc72 	bl	80004d8 <__aeabi_dmul>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4650      	mov	r0, sl
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	f7f4 fab6 	bl	800016c <__adddf3>
 800bc00:	4682      	mov	sl, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	4650      	mov	r0, sl
 800bc06:	4621      	mov	r1, r4
 800bc08:	b006      	add	sp, #24
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	2200      	movs	r2, #0
 800bc10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc14:	4b24      	ldr	r3, [pc, #144]	; (800bca8 <__kernel_sin+0x168>)
 800bc16:	f7f4 fc5f 	bl	80004d8 <__aeabi_dmul>
 800bc1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc22:	4640      	mov	r0, r8
 800bc24:	4649      	mov	r1, r9
 800bc26:	f7f4 fc57 	bl	80004d8 <__aeabi_dmul>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc32:	f7f4 fa99 	bl	8000168 <__aeabi_dsub>
 800bc36:	4632      	mov	r2, r6
 800bc38:	463b      	mov	r3, r7
 800bc3a:	f7f4 fc4d 	bl	80004d8 <__aeabi_dmul>
 800bc3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc42:	f7f4 fa91 	bl	8000168 <__aeabi_dsub>
 800bc46:	a316      	add	r3, pc, #88	; (adr r3, 800bca0 <__kernel_sin+0x160>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	4606      	mov	r6, r0
 800bc4e:	460f      	mov	r7, r1
 800bc50:	4640      	mov	r0, r8
 800bc52:	4649      	mov	r1, r9
 800bc54:	f7f4 fc40 	bl	80004d8 <__aeabi_dmul>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	4639      	mov	r1, r7
 800bc60:	f7f4 fa84 	bl	800016c <__adddf3>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4650      	mov	r0, sl
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	f7f4 fa7c 	bl	8000168 <__aeabi_dsub>
 800bc70:	e7c6      	b.n	800bc00 <__kernel_sin+0xc0>
 800bc72:	bf00      	nop
 800bc74:	f3af 8000 	nop.w
 800bc78:	5acfd57c 	.word	0x5acfd57c
 800bc7c:	3de5d93a 	.word	0x3de5d93a
 800bc80:	8a2b9ceb 	.word	0x8a2b9ceb
 800bc84:	3e5ae5e6 	.word	0x3e5ae5e6
 800bc88:	57b1fe7d 	.word	0x57b1fe7d
 800bc8c:	3ec71de3 	.word	0x3ec71de3
 800bc90:	19c161d5 	.word	0x19c161d5
 800bc94:	3f2a01a0 	.word	0x3f2a01a0
 800bc98:	1110f8a6 	.word	0x1110f8a6
 800bc9c:	3f811111 	.word	0x3f811111
 800bca0:	55555549 	.word	0x55555549
 800bca4:	3fc55555 	.word	0x3fc55555
 800bca8:	3fe00000 	.word	0x3fe00000
 800bcac:	00000000 	.word	0x00000000

0800bcb0 <floor>:
 800bcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bcb8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800bcbc:	2e13      	cmp	r6, #19
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4607      	mov	r7, r0
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	4605      	mov	r5, r0
 800bcc8:	dc34      	bgt.n	800bd34 <floor+0x84>
 800bcca:	2e00      	cmp	r6, #0
 800bccc:	da15      	bge.n	800bcfa <floor+0x4a>
 800bcce:	a334      	add	r3, pc, #208	; (adr r3, 800bda0 <floor+0xf0>)
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	f7f4 fa4a 	bl	800016c <__adddf3>
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f7f4 fe8c 	bl	80009f8 <__aeabi_dcmpgt>
 800bce0:	b140      	cbz	r0, 800bcf4 <floor+0x44>
 800bce2:	2c00      	cmp	r4, #0
 800bce4:	da59      	bge.n	800bd9a <floor+0xea>
 800bce6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bcea:	ea57 0503 	orrs.w	r5, r7, r3
 800bcee:	d001      	beq.n	800bcf4 <floor+0x44>
 800bcf0:	2500      	movs	r5, #0
 800bcf2:	4c2d      	ldr	r4, [pc, #180]	; (800bda8 <floor+0xf8>)
 800bcf4:	4623      	mov	r3, r4
 800bcf6:	462f      	mov	r7, r5
 800bcf8:	e025      	b.n	800bd46 <floor+0x96>
 800bcfa:	4a2c      	ldr	r2, [pc, #176]	; (800bdac <floor+0xfc>)
 800bcfc:	fa42 f806 	asr.w	r8, r2, r6
 800bd00:	ea01 0208 	and.w	r2, r1, r8
 800bd04:	4302      	orrs	r2, r0
 800bd06:	d01e      	beq.n	800bd46 <floor+0x96>
 800bd08:	a325      	add	r3, pc, #148	; (adr r3, 800bda0 <floor+0xf0>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f7f4 fa2d 	bl	800016c <__adddf3>
 800bd12:	2200      	movs	r2, #0
 800bd14:	2300      	movs	r3, #0
 800bd16:	f7f4 fe6f 	bl	80009f8 <__aeabi_dcmpgt>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d0ea      	beq.n	800bcf4 <floor+0x44>
 800bd1e:	2c00      	cmp	r4, #0
 800bd20:	bfbe      	ittt	lt
 800bd22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bd26:	fa43 f606 	asrlt.w	r6, r3, r6
 800bd2a:	19a4      	addlt	r4, r4, r6
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	ea24 0408 	bic.w	r4, r4, r8
 800bd32:	e7df      	b.n	800bcf4 <floor+0x44>
 800bd34:	2e33      	cmp	r6, #51	; 0x33
 800bd36:	dd0a      	ble.n	800bd4e <floor+0x9e>
 800bd38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bd3c:	d103      	bne.n	800bd46 <floor+0x96>
 800bd3e:	f7f4 fa15 	bl	800016c <__adddf3>
 800bd42:	4607      	mov	r7, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4638      	mov	r0, r7
 800bd48:	4619      	mov	r1, r3
 800bd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd52:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800bd56:	fa22 f808 	lsr.w	r8, r2, r8
 800bd5a:	ea18 0f00 	tst.w	r8, r0
 800bd5e:	d0f2      	beq.n	800bd46 <floor+0x96>
 800bd60:	a30f      	add	r3, pc, #60	; (adr r3, 800bda0 <floor+0xf0>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fa01 	bl	800016c <__adddf3>
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f7f4 fe43 	bl	80009f8 <__aeabi_dcmpgt>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d0be      	beq.n	800bcf4 <floor+0x44>
 800bd76:	2c00      	cmp	r4, #0
 800bd78:	da02      	bge.n	800bd80 <floor+0xd0>
 800bd7a:	2e14      	cmp	r6, #20
 800bd7c:	d103      	bne.n	800bd86 <floor+0xd6>
 800bd7e:	3401      	adds	r4, #1
 800bd80:	ea25 0508 	bic.w	r5, r5, r8
 800bd84:	e7b6      	b.n	800bcf4 <floor+0x44>
 800bd86:	2301      	movs	r3, #1
 800bd88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bd8c:	fa03 f606 	lsl.w	r6, r3, r6
 800bd90:	4435      	add	r5, r6
 800bd92:	42bd      	cmp	r5, r7
 800bd94:	bf38      	it	cc
 800bd96:	18e4      	addcc	r4, r4, r3
 800bd98:	e7f2      	b.n	800bd80 <floor+0xd0>
 800bd9a:	2500      	movs	r5, #0
 800bd9c:	462c      	mov	r4, r5
 800bd9e:	e7a9      	b.n	800bcf4 <floor+0x44>
 800bda0:	8800759c 	.word	0x8800759c
 800bda4:	7e37e43c 	.word	0x7e37e43c
 800bda8:	bff00000 	.word	0xbff00000
 800bdac:	000fffff 	.word	0x000fffff

0800bdb0 <scalbn>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	460d      	mov	r5, r1
 800bdba:	4617      	mov	r7, r2
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	b996      	cbnz	r6, 800bde6 <scalbn+0x36>
 800bdc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bdc4:	4303      	orrs	r3, r0
 800bdc6:	d039      	beq.n	800be3c <scalbn+0x8c>
 800bdc8:	4b35      	ldr	r3, [pc, #212]	; (800bea0 <scalbn+0xf0>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f7f4 fb84 	bl	80004d8 <__aeabi_dmul>
 800bdd0:	4b34      	ldr	r3, [pc, #208]	; (800bea4 <scalbn+0xf4>)
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	429f      	cmp	r7, r3
 800bdd6:	460d      	mov	r5, r1
 800bdd8:	da0f      	bge.n	800bdfa <scalbn+0x4a>
 800bdda:	a32d      	add	r3, pc, #180	; (adr r3, 800be90 <scalbn+0xe0>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	f7f4 fb7a 	bl	80004d8 <__aeabi_dmul>
 800bde4:	e006      	b.n	800bdf4 <scalbn+0x44>
 800bde6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bdea:	4296      	cmp	r6, r2
 800bdec:	d10a      	bne.n	800be04 <scalbn+0x54>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	f7f4 f9bc 	bl	800016c <__adddf3>
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	460d      	mov	r5, r1
 800bdf8:	e020      	b.n	800be3c <scalbn+0x8c>
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800be00:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800be04:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800be08:	19b9      	adds	r1, r7, r6
 800be0a:	4291      	cmp	r1, r2
 800be0c:	dd0e      	ble.n	800be2c <scalbn+0x7c>
 800be0e:	a322      	add	r3, pc, #136	; (adr r3, 800be98 <scalbn+0xe8>)
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800be18:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800be1c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800be20:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800be24:	4820      	ldr	r0, [pc, #128]	; (800bea8 <scalbn+0xf8>)
 800be26:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800be2a:	e7d9      	b.n	800bde0 <scalbn+0x30>
 800be2c:	2900      	cmp	r1, #0
 800be2e:	dd08      	ble.n	800be42 <scalbn+0x92>
 800be30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be38:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800be3c:	4620      	mov	r0, r4
 800be3e:	4629      	mov	r1, r5
 800be40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be42:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800be46:	da16      	bge.n	800be76 <scalbn+0xc6>
 800be48:	f24c 3350 	movw	r3, #50000	; 0xc350
 800be4c:	429f      	cmp	r7, r3
 800be4e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800be52:	dd08      	ble.n	800be66 <scalbn+0xb6>
 800be54:	4c15      	ldr	r4, [pc, #84]	; (800beac <scalbn+0xfc>)
 800be56:	4814      	ldr	r0, [pc, #80]	; (800bea8 <scalbn+0xf8>)
 800be58:	f363 74df 	bfi	r4, r3, #31, #1
 800be5c:	a30e      	add	r3, pc, #56	; (adr r3, 800be98 <scalbn+0xe8>)
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	4621      	mov	r1, r4
 800be64:	e7bc      	b.n	800bde0 <scalbn+0x30>
 800be66:	4c12      	ldr	r4, [pc, #72]	; (800beb0 <scalbn+0x100>)
 800be68:	4812      	ldr	r0, [pc, #72]	; (800beb4 <scalbn+0x104>)
 800be6a:	f363 74df 	bfi	r4, r3, #31, #1
 800be6e:	a308      	add	r3, pc, #32	; (adr r3, 800be90 <scalbn+0xe0>)
 800be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be74:	e7f5      	b.n	800be62 <scalbn+0xb2>
 800be76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be7a:	3136      	adds	r1, #54	; 0x36
 800be7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800be84:	4620      	mov	r0, r4
 800be86:	4629      	mov	r1, r5
 800be88:	2200      	movs	r2, #0
 800be8a:	4b0b      	ldr	r3, [pc, #44]	; (800beb8 <scalbn+0x108>)
 800be8c:	e7a8      	b.n	800bde0 <scalbn+0x30>
 800be8e:	bf00      	nop
 800be90:	c2f8f359 	.word	0xc2f8f359
 800be94:	01a56e1f 	.word	0x01a56e1f
 800be98:	8800759c 	.word	0x8800759c
 800be9c:	7e37e43c 	.word	0x7e37e43c
 800bea0:	43500000 	.word	0x43500000
 800bea4:	ffff3cb0 	.word	0xffff3cb0
 800bea8:	8800759c 	.word	0x8800759c
 800beac:	7e37e43c 	.word	0x7e37e43c
 800beb0:	01a56e1f 	.word	0x01a56e1f
 800beb4:	c2f8f359 	.word	0xc2f8f359
 800beb8:	3c900000 	.word	0x3c900000

0800bebc <_init>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	bf00      	nop
 800bec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec2:	bc08      	pop	{r3}
 800bec4:	469e      	mov	lr, r3
 800bec6:	4770      	bx	lr

0800bec8 <_fini>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	bf00      	nop
 800becc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bece:	bc08      	pop	{r3}
 800bed0:	469e      	mov	lr, r3
 800bed2:	4770      	bx	lr
